

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Feb 03 15:54:09 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           	psect	idataCOMRAM
    54  002C28                     __pidataCOMRAM:
    55                           	opt stack 0
    56                           
    57                           ;initializer for __pwm
    58  002C28  01                 	db	1
    59  002C29  01                 	db	1
    60  002C2A  01                 	db	1
    61  002C2B  01                 	db	1
    62  002C2C  01                 	db	1
    63                           
    64                           ;initializer for _ADC_NChannel
    65  002C2D  0005               	dw	5
    66                           
    67                           ;initializer for _SerialLen
    68  002C2F  0032               	dw	50
    69                           
    70                           ;initializer for _WifiTCPDataLen
    71  002C31  000F               	dw	15
    72                           
    73                           ;initializer for _freq
    74  002C33  50                 	db	80
    75                           
    76                           	psect	idataBANK0
    77  002C34                     __pidataBANK0:
    78                           	opt stack 0
    79                           
    80                           ;initializer for WifiTCPSend@F4101
    81  002C34  0D                 	db	13
    82  002C35  0A                 	db	10
    83  002C36  00                 	db	0
    84                           
    85                           ;initializer for _filtro
    86  002C37  CD                 	db	205
    87  002C38  CC                 	db	204
    88  002C39  3D                 	db	61
    89                           
    90                           ;initializer for _h
    91  002C3A  CD                 	db	205
    92  002C3B  CC                 	db	204
    93  002C3C  3D                 	db	61
    94  0000                     _ADCON0	set	4034
    95  0000                     _ADCON0bits	set	4034
    96  0000                     _ADCON1	set	4033
    97  0000                     _ADCON2	set	4032
    98  0000                     _ADRESH	set	4036
    99  0000                     _ADRESL	set	4035
   100  0000                     _INTCON	set	4082
   101  0000                     _INTCONbits	set	4082
   102  0000                     _LATB	set	3978
   103  0000                     _PIE1bits	set	3997
   104  0000                     _PIR1bits	set	3998
   105  0000                     _PORTB	set	3969
   106  0000                     _RCREG	set	4014
   107  0000                     _SPBRG	set	4015
   108  0000                     _SPBRGH	set	4016
   109  0000                     _SSPADD	set	4040
   110  0000                     _SSPBUF	set	4041
   111  0000                     _SSPCON1	set	4038
   112  0000                     _SSPCON1bits	set	4038
   113  0000                     _SSPCON2	set	4037
   114  0000                     _SSPCON2bits	set	4037
   115  0000                     _SSPSTAT	set	4039
   116  0000                     _SSPSTATbits	set	4039
   117  0000                     _T0CON	set	4053
   118  0000                     _TMR0L	set	4054
   119  0000                     _TRISA	set	3986
   120  0000                     _TRISB	set	3987
   121  0000                     _TRISCbits	set	3988
   122  0000                     _TXREG	set	4013
   123  0000                     _ADDEN	set	32091
   124  0000                     _BRGH	set	32098
   125  0000                     _CREN	set	32092
   126  0000                     _CSRC	set	32103
   127  0000                     _FERR	set	32090
   128  0000                     _OERR	set	32089
   129  0000                     _RCIE	set	31981
   130  0000                     _RCIF	set	31989
   131  0000                     _RX9	set	32094
   132  0000                     _RX9D	set	32088
   133  0000                     _SENDB	set	32099
   134  0000                     _SPEN	set	32095
   135  0000                     _SREN	set	32093
   136  0000                     _SYNC	set	32100
   137  0000                     _TRMT	set	32097
   138  0000                     _TX9	set	32102
   139  0000                     _TX9D	set	32096
   140  0000                     _TXEN	set	32101
   141  0000                     _TXIE	set	31980
   142  0000                     _TXIF	set	31988
   143                           
   144                           	psect	smallconst
   145  00081A                     __psmallconst:
   146                           	opt stack 0
   147  00081A  00                 	db	0
   148  00081B  41                 	db	65	;'A'
   149  00081C  54                 	db	84	;'T'
   150  00081D  2B                 	db	43
   151  00081E  43                 	db	67	;'C'
   152  00081F  57                 	db	87	;'W'
   153  000820  4A                 	db	74	;'J'
   154  000821  41                 	db	65	;'A'
   155  000822  50                 	db	80	;'P'
   156  000823  3D                 	db	61	;'='
   157  000824  22                 	db	34
   158  000825  42                 	db	66	;'B'
   159  000826  61                 	db	97	;'a'
   160  000827  74                 	db	116	;'t'
   161  000828  43                 	db	67	;'C'
   162  000829  61                 	db	97	;'a'
   163  00082A  76                 	db	118	;'v'
   164  00082B  65                 	db	101	;'e'
   165  00082C  72                 	db	114	;'r'
   166  00082D  6E                 	db	110	;'n'
   167  00082E  61                 	db	97	;'a'
   168  00082F  22                 	db	34
   169  000830  2C                 	db	44
   170  000831  22                 	db	34
   171  000832  32                 	db	50	;'2'
   172  000833  33                 	db	51	;'3'
   173  000834  64                 	db	100	;'d'
   174  000835  66                 	db	102	;'f'
   175  000836  64                 	db	100	;'d'
   176  000837  31                 	db	49	;'1'
   177  000838  62                 	db	98	;'b'
   178  000839  36                 	db	54	;'6'
   179  00083A  34                 	db	52	;'4'
   180  00083B  62                 	db	98	;'b'
   181  00083C  22                 	db	34
   182  00083D  0D                 	db	13
   183  00083E  0A                 	db	10
   184  00083F  00                 	db	0
   185  000840  41                 	db	65	;'A'
   186  000841  54                 	db	84	;'T'
   187  000842  2B                 	db	43
   188  000843  43                 	db	67	;'C'
   189  000844  49                 	db	73	;'I'
   190  000845  50                 	db	80	;'P'
   191  000846  53                 	db	83	;'S'
   192  000847  45                 	db	69	;'E'
   193  000848  52                 	db	82	;'R'
   194  000849  56                 	db	86	;'V'
   195  00084A  45                 	db	69	;'E'
   196  00084B  52                 	db	82	;'R'
   197  00084C  3D                 	db	61	;'='
   198  00084D  31                 	db	49	;'1'
   199  00084E  2C                 	db	44
   200  00084F  34                 	db	52	;'4'
   201  000850  30                 	db	48	;'0'
   202  000851  30                 	db	48	;'0'
   203  000852  30                 	db	48	;'0'
   204  000853  0D                 	db	13
   205  000854  0A                 	db	10
   206  000855  00                 	db	0
   207  000856  41                 	db	65	;'A'
   208  000857  54                 	db	84	;'T'
   209  000858  2B                 	db	43
   210  000859  43                 	db	67	;'C'
   211  00085A  57                 	db	87	;'W'
   212  00085B  4D                 	db	77	;'M'
   213  00085C  4F                 	db	79	;'O'
   214  00085D  44                 	db	68	;'D'
   215  00085E  45                 	db	69	;'E'
   216  00085F  3D                 	db	61	;'='
   217  000860  31                 	db	49	;'1'
   218  000861  0D                 	db	13
   219  000862  0A                 	db	10
   220  000863  00                 	db	0
   221  000864  41                 	db	65	;'A'
   222  000865  54                 	db	84	;'T'
   223  000866  2B                 	db	43
   224  000867  43                 	db	67	;'C'
   225  000868  49                 	db	73	;'I'
   226  000869  50                 	db	80	;'P'
   227  00086A  4D                 	db	77	;'M'
   228  00086B  55                 	db	85	;'U'
   229  00086C  58                 	db	88	;'X'
   230  00086D  3D                 	db	61	;'='
   231  00086E  31                 	db	49	;'1'
   232  00086F  0D                 	db	13
   233  000870  0A                 	db	10
   234  000871  00                 	db	0
   235  000872  41                 	db	65	;'A'
   236  000873  54                 	db	84	;'T'
   237  000874  2B                 	db	43
   238  000875  43                 	db	67	;'C'
   239  000876  49                 	db	73	;'I'
   240  000877  50                 	db	80	;'P'
   241  000878  53                 	db	83	;'S'
   242  000879  45                 	db	69	;'E'
   243  00087A  4E                 	db	78	;'N'
   244  00087B  44                 	db	68	;'D'
   245  00087C  3D                 	db	61	;'='
   246  00087D  30                 	db	48	;'0'
   247  00087E  2C                 	db	44
   248  00087F  00                 	db	0
   249  000880  6C                 	db	108	;'l'
   250  000881  69                 	db	105	;'i'
   251  000882  6E                 	db	110	;'n'
   252  000883  6B                 	db	107	;'k'
   253  000884  20                 	db	32
   254  000885  69                 	db	105	;'i'
   255  000886  73                 	db	115	;'s'
   256  000887  20                 	db	32
   257  000888  6E                 	db	110	;'n'
   258  000889  6F                 	db	111	;'o'
   259  00088A  74                 	db	116	;'t'
   260  00088B  00                 	db	0
   261  00088C  41                 	db	65	;'A'
   262  00088D  54                 	db	84	;'T'
   263  00088E  2B                 	db	43
   264  00088F  52                 	db	82	;'R'
   265  000890  53                 	db	83	;'S'
   266  000891  54                 	db	84	;'T'
   267  000892  0D                 	db	13
   268  000893  0A                 	db	10
   269  000894  00                 	db	0
   270  000895  4F                 	db	79	;'O'
   271  000896  4B                 	db	75	;'K'
   272  000897  00                 	db	0
   273                           
   274                           ; #config settings
   275  000898  00                 	db	0	; dummy byte at the end
   276  0000                     
   277                           	psect	cinit
   278  002864                     __pcinit:
   279                           	opt stack 0
   280  002864                     start_initialization:
   281                           	opt stack 0
   282  002864                     __initialization:
   283                           	opt stack 0
   284                           
   285                           ; Initialize objects allocated to BANK0 (9 bytes)
   286                           ; load TBLPTR registers with __pidataBANK0
   287  002864  0E34               	movlw	low __pidataBANK0
   288  002866  6EF6               	movwf	tblptrl,c
   289  002868  0E2C               	movlw	high __pidataBANK0
   290  00286A  6EF7               	movwf	tblptrh,c
   291  00286C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   292  00286E  6EF8               	movwf	tblptru,c
   293  002870  EE00  F0E4         	lfsr	0,__pdataBANK0
   294  002874  EE10 F009          	lfsr	1,9
   295  002878                     copy_data0:
   296  002878  0009               	tblrd		*+
   297  00287A  CFF5 FFEE          	movff	tablat,postinc0
   298  00287E  50E5               	movf	postdec1,w,c
   299  002880  50E1               	movf	fsr1l,w,c
   300  002882  E1FA               	bnz	copy_data0
   301                           
   302                           ; Initialize objects allocated to COMRAM (12 bytes)
   303                           ; load TBLPTR registers with __pidataCOMRAM
   304  002884  0E28               	movlw	low __pidataCOMRAM
   305  002886  6EF6               	movwf	tblptrl,c
   306  002888  0E2C               	movlw	high __pidataCOMRAM
   307  00288A  6EF7               	movwf	tblptrh,c
   308  00288C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   309  00288E  6EF8               	movwf	tblptru,c
   310  002890  EE00  F03B         	lfsr	0,__pdataCOMRAM
   311  002894  EE10 F00C          	lfsr	1,12
   312  002898                     copy_data1:
   313  002898  0009               	tblrd		*+
   314  00289A  CFF5 FFEE          	movff	tablat,postinc0
   315  00289E  50E5               	movf	postdec1,w,c
   316  0028A0  50E1               	movf	fsr1l,w,c
   317  0028A2  E1FA               	bnz	copy_data1
   318                           
   319                           ; Clear objects allocated to BANK2 (50 bytes)
   320  0028A4  EE02  F000         	lfsr	0,__pbssBANK2
   321  0028A8  0E32               	movlw	50
   322  0028AA                     clear_0:
   323  0028AA  6AEE               	clrf	postinc0,c
   324  0028AC  06E8               	decf	wreg,f,c
   325  0028AE  E1FD               	bnz	clear_0
   326                           
   327                           ; Clear objects allocated to BANK1 (249 bytes)
   328  0028B0  EE01  F000         	lfsr	0,__pbssBANK1
   329  0028B4  0EF9               	movlw	249
   330  0028B6                     clear_1:
   331  0028B6  6AEE               	clrf	postinc0,c
   332  0028B8  06E8               	decf	wreg,f,c
   333  0028BA  E1FD               	bnz	clear_1
   334                           
   335                           ; Clear objects allocated to BANK0 (98 bytes)
   336  0028BC  EE00  F060         	lfsr	0,__pbssBANK0
   337  0028C0  0E62               	movlw	98
   338  0028C2                     clear_2:
   339  0028C2  6AEE               	clrf	postinc0,c
   340  0028C4  06E8               	decf	wreg,f,c
   341  0028C6  E1FD               	bnz	clear_2
   342                           
   343                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   344  0028C8  6A4C               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   345                           
   346                           ; Clear objects allocated to COMRAM (5 bytes)
   347  0028CA  6A4B               	clrf	(__pbssCOMRAM+4)& (0+255),c
   348  0028CC  6A4A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   349  0028CE  6A49               	clrf	(__pbssCOMRAM+2)& (0+255),c
   350  0028D0  6A48               	clrf	(__pbssCOMRAM+1)& (0+255),c
   351  0028D2  6A47               	clrf	__pbssCOMRAM& (0+255),c
   352  0028D4                     end_of_initialization:
   353                           	opt stack 0
   354  0028D4                     __end_of__initialization:
   355                           	opt stack 0
   356  0028D4  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   357  0028D6  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   358  0028D8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   359  0028DA  6EF8               	movwf	tblptru,c
   360  0028DC  0100               	movlb	0
   361  0028DE  EF4D  F004         	goto	_main	;jump to C main() function
   362                           tblptru	equ	0xFF8
   363                           tblptrh	equ	0xFF7
   364                           tblptrl	equ	0xFF6
   365                           tablat	equ	0xFF5
   366                           postinc0	equ	0xFEE
   367                           wreg	equ	0xFE8
   368                           postdec1	equ	0xFE5
   369                           fsr1l	equ	0xFE1
   370                           
   371                           	psect	bitbssCOMRAM
   372  000260                     __pbitbssCOMRAM:
   373                           	opt stack 0
   374  000260                     _flagData:
   375                           	opt stack 0
   376  000260                     	ds	1
   377  000261                     _flagLink:
   378                           	opt stack 0
   379  000261                     	ds	1
   380                           tblptru	equ	0xFF8
   381                           tblptrh	equ	0xFF7
   382                           tblptrl	equ	0xFF6
   383                           tablat	equ	0xFF5
   384                           postinc0	equ	0xFEE
   385                           wreg	equ	0xFE8
   386                           postdec1	equ	0xFE5
   387                           fsr1l	equ	0xFE1
   388                           
   389                           	psect	bssCOMRAM
   390  000047                     __pbssCOMRAM:
   391                           	opt stack 0
   392  000047                     _ADC_Channel:
   393                           	opt stack 0
   394  000047                     	ds	2
   395  000049                     _PWM_Counter:
   396                           	opt stack 0
   397  000049                     	ds	1
   398  00004A                     _SerialReceivedData:
   399                           	opt stack 0
   400  00004A                     	ds	1
   401  00004B                     _step:
   402                           	opt stack 0
   403  00004B                     	ds	1
   404                           tblptru	equ	0xFF8
   405                           tblptrh	equ	0xFF7
   406                           tblptrl	equ	0xFF6
   407                           tablat	equ	0xFF5
   408                           postinc0	equ	0xFEE
   409                           wreg	equ	0xFE8
   410                           postdec1	equ	0xFE5
   411                           fsr1l	equ	0xFE1
   412                           
   413                           	psect	dataCOMRAM
   414  00003B                     __pdataCOMRAM:
   415                           	opt stack 0
   416  00003B                     __pwm:
   417                           	opt stack 0
   418  00003B                     	ds	5
   419  000040                     _ADC_NChannel:
   420                           	opt stack 0
   421  000040                     	ds	2
   422  000042                     _SerialLen:
   423                           	opt stack 0
   424  000042                     	ds	2
   425  000044                     _WifiTCPDataLen:
   426                           	opt stack 0
   427  000044                     	ds	2
   428  000046                     _freq:
   429                           	opt stack 0
   430  000046                     	ds	1
   431                           tblptru	equ	0xFF8
   432                           tblptrh	equ	0xFF7
   433                           tblptrl	equ	0xFF6
   434                           tablat	equ	0xFF5
   435                           postinc0	equ	0xFEE
   436                           wreg	equ	0xFE8
   437                           postdec1	equ	0xFE5
   438                           fsr1l	equ	0xFE1
   439                           
   440                           	psect	bssBANK0
   441  000060                     __pbssBANK0:
   442                           	opt stack 0
   443  000060                     _accel:
   444                           	opt stack 0
   445  000060                     	ds	9
   446  000069                     _accelBias:
   447                           	opt stack 0
   448  000069                     	ds	9
   449  000072                     _accelTemp:
   450                           	opt stack 0
   451  000072                     	ds	9
   452  00007B                     _giro:
   453                           	opt stack 0
   454  00007B                     	ds	9
   455  000084                     _giroBias:
   456                           	opt stack 0
   457  000084                     	ds	9
   458  00008D                     _giroTemp:
   459                           	opt stack 0
   460  00008D                     	ds	9
   461  000096                     _pos:
   462                           	opt stack 0
   463  000096                     	ds	9
   464  00009F                     _vel:
   465                           	opt stack 0
   466  00009F                     	ds	9
   467  0000A8                     _PID_interruptCounter:
   468                           	opt stack 0
   469  0000A8                     	ds	4
   470  0000AC                     _contador:
   471                           	opt stack 0
   472  0000AC                     	ds	2
   473  0000AE                     _ADC:
   474                           	opt stack 0
   475  0000AE                     	ds	20
   476                           tblptru	equ	0xFF8
   477                           tblptrh	equ	0xFF7
   478                           tblptrl	equ	0xFF6
   479                           tablat	equ	0xFF5
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           postdec1	equ	0xFE5
   483                           fsr1l	equ	0xFE1
   484                           
   485                           	psect	dataBANK0
   486  0000E4                     __pdataBANK0:
   487                           	opt stack 0
   488  0000E4                     WifiTCPSend@F4101:
   489                           	opt stack 0
   490  0000E4                     	ds	3
   491  0000E7                     _filtro:
   492                           	opt stack 0
   493  0000E7                     	ds	3
   494  0000EA                     _h:
   495                           	opt stack 0
   496  0000EA                     	ds	3
   497                           tblptru	equ	0xFF8
   498                           tblptrh	equ	0xFF7
   499                           tblptrl	equ	0xFF6
   500                           tablat	equ	0xFF5
   501                           postinc0	equ	0xFEE
   502                           wreg	equ	0xFE8
   503                           postdec1	equ	0xFE5
   504                           fsr1l	equ	0xFE1
   505                           
   506                           	psect	bssBANK1
   507  000100                     __pbssBANK1:
   508                           	opt stack 0
   509  000100                     _pid:
   510                           	opt stack 0
   511  000100                     	ds	148
   512  000194                     _A:
   513                           	opt stack 0
   514  000194                     	ds	36
   515  0001B8                     _WifiTCPData:
   516                           	opt stack 0
   517  0001B8                     	ds	15
   518  0001C7                     _SerialReceivedString:
   519                           	opt stack 0
   520  0001C7                     	ds	50
   521                           tblptru	equ	0xFF8
   522                           tblptrh	equ	0xFF7
   523                           tblptrl	equ	0xFF6
   524                           tablat	equ	0xFF5
   525                           postinc0	equ	0xFEE
   526                           wreg	equ	0xFE8
   527                           postdec1	equ	0xFE5
   528                           fsr1l	equ	0xFE1
   529                           
   530                           	psect	bssBANK2
   531  000200                     __pbssBANK2:
   532                           	opt stack 0
   533  000200                     _SerialSendString:
   534                           	opt stack 0
   535  000200                     	ds	50
   536                           tblptru	equ	0xFF8
   537                           tblptrh	equ	0xFF7
   538                           tblptrl	equ	0xFF6
   539                           tablat	equ	0xFF5
   540                           postinc0	equ	0xFEE
   541                           wreg	equ	0xFE8
   542                           postdec1	equ	0xFE5
   543                           fsr1l	equ	0xFE1
   544                           
   545                           	psect	cstackBANK2
   546  000232                     __pcstackBANK2:
   547                           	opt stack 0
   548  000232                     main@j:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x0
   552  000232                     	ds	1
   553  000233                     main@u2:
   554                           	opt stack 0
   555                           
   556                           ; 3 bytes @ 0x1
   557  000233                     	ds	3
   558  000236                     main@u3:
   559                           	opt stack 0
   560                           
   561                           ; 3 bytes @ 0x4
   562  000236                     	ds	3
   563  000239                     main@l:
   564                           	opt stack 0
   565                           
   566                           ; 3 bytes @ 0x7
   567  000239                     	ds	3
   568  00023C                     main@lambda:
   569                           	opt stack 0
   570                           
   571                           ; 3 bytes @ 0xA
   572  00023C                     	ds	3
   573  00023F                     main@u1:
   574                           	opt stack 0
   575                           
   576                           ; 3 bytes @ 0xD
   577  00023F                     	ds	3
   578  000242                     main@u4:
   579                           	opt stack 0
   580                           
   581                           ; 3 bytes @ 0x10
   582  000242                     	ds	3
   583  000245                     _main$1983:
   584                           	opt stack 0
   585                           
   586                           ; 3 bytes @ 0x13
   587  000245                     	ds	3
   588  000248                     main@i:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x16
   592  000248                     	ds	1
   593  000249                     main@pwmTemp:
   594                           	opt stack 0
   595                           
   596                           ; 3 bytes @ 0x17
   597  000249                     	ds	3
   598                           tblptru	equ	0xFF8
   599                           tblptrh	equ	0xFF7
   600                           tblptrl	equ	0xFF6
   601                           tablat	equ	0xFF5
   602                           postinc0	equ	0xFEE
   603                           wreg	equ	0xFE8
   604                           postdec1	equ	0xFE5
   605                           fsr1l	equ	0xFE1
   606                           
   607                           	psect	cstackBANK0
   608  0000C2                     __pcstackBANK0:
   609                           	opt stack 0
   610  0000C2                     ___ftdiv@cntr:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0x0
   614  0000C2                     	ds	1
   615  0000C3                     ___ftdiv@f3:
   616                           	opt stack 0
   617                           
   618                           ; 3 bytes @ 0x1
   619  0000C3                     	ds	3
   620  0000C6                     ___ftdiv@exp:
   621                           	opt stack 0
   622                           
   623                           ; 1 bytes @ 0x4
   624  0000C6                     	ds	1
   625  0000C7                     ___ftdiv@sign:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x5
   629  0000C7                     	ds	1
   630  0000C8                     ?___ftneg:
   631                           	opt stack 0
   632  0000C8                     ___ftneg@f1:
   633                           	opt stack 0
   634                           
   635                           ; 3 bytes @ 0x6
   636  0000C8                     	ds	3
   637  0000CB                     ?___ftadd:
   638                           	opt stack 0
   639  0000CB                     ___ftadd@f1:
   640                           	opt stack 0
   641                           
   642                           ; 3 bytes @ 0x9
   643  0000CB                     	ds	3
   644  0000CE                     ___ftadd@f2:
   645                           	opt stack 0
   646                           
   647                           ; 3 bytes @ 0xC
   648  0000CE                     	ds	3
   649  0000D1                     ??___ftadd:
   650                           
   651                           ; 1 bytes @ 0xF
   652  0000D1                     	ds	3
   653  0000D4                     ___ftadd@sign:
   654                           	opt stack 0
   655                           
   656                           ; 1 bytes @ 0x12
   657  0000D4                     	ds	1
   658  0000D5                     ___ftadd@exp2:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x13
   662  0000D5                     	ds	1
   663  0000D6                     ___ftadd@exp1:
   664                           	opt stack 0
   665                           
   666                           ; 1 bytes @ 0x14
   667  0000D6                     	ds	1
   668  0000D7                     ??_readAccelGiroValues:
   669  0000D7                     PID_outputControlCalc@reference:
   670                           	opt stack 0
   671                           
   672                           ; 3 bytes @ 0x15
   673  0000D7                     	ds	3
   674  0000DA                     PID_outputControlCalc@systemOutput:
   675                           	opt stack 0
   676  0000DA                     _readAccelGiroValues$1982:
   677                           	opt stack 0
   678                           
   679                           ; 3 bytes @ 0x18
   680  0000DA                     	ds	3
   681  0000DD                     sensorInit@i:
   682                           	opt stack 0
   683  0000DD                     PID_outputControlCalc@whichPID:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x1B
   687  0000DD                     	ds	1
   688  0000DE                     
   689                           ; 1 bytes @ 0x1C
   690  0000DE                     	ds	2
   691  0000E0                     _PID_outputControlCalc$1984:
   692                           	opt stack 0
   693                           
   694                           ; 3 bytes @ 0x1E
   695  0000E0                     	ds	3
   696  0000E3                     ??_main:
   697                           
   698                           ; 1 bytes @ 0x21
   699  0000E3                     	ds	1
   700                           tblptru	equ	0xFF8
   701                           tblptrh	equ	0xFF7
   702                           tblptrl	equ	0xFF6
   703                           tablat	equ	0xFF5
   704                           postinc0	equ	0xFEE
   705                           wreg	equ	0xFE8
   706                           postdec1	equ	0xFE5
   707                           fsr1l	equ	0xFE1
   708                           
   709                           	psect	cstackCOMRAM
   710  000001                     __pcstackCOMRAM:
   711                           	opt stack 0
   712  000001                     waitToken@value:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x0
   716  000001                     	ds	1
   717  000002                     SerialReadUntilToken@charToCompare:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0x1
   721  000002                     	ds	1
   722  000003                     SerialReadUntilToken@i:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x2
   726  000003                     	ds	2
   727  000005                     ??_INTERRUPTION:
   728                           
   729                           ; 1 bytes @ 0x4
   730  000005                     	ds	14
   731  000013                     ??_IdleI2C:
   732  000013                     ?___ftpack:
   733                           	opt stack 0
   734  000013                     ?___fttol:
   735                           	opt stack 0
   736  000013                     delayMS@waitTime:
   737                           	opt stack 0
   738  000013                     ___ftpack@arg:
   739                           	opt stack 0
   740  000013                     ___ftge@ff1:
   741                           	opt stack 0
   742  000013                     ___fttol@f1:
   743                           	opt stack 0
   744                           
   745                           ; 3 bytes @ 0x12
   746  000013                     	ds	1
   747  000014                     WriteI2C@data_out:
   748                           	opt stack 0
   749                           
   750                           ; 1 bytes @ 0x13
   751  000014                     	ds	1
   752  000015                     ??_delayMS:
   753  000015                     initI2C@Adress2:
   754                           	opt stack 0
   755  000015                     readACC@Adress:
   756                           	opt stack 0
   757  000015                     readGIRO@Adress:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x14
   761  000015                     	ds	1
   762  000016                     initI2C@Adress1:
   763                           	opt stack 0
   764  000016                     readACC@c:
   765                           	opt stack 0
   766  000016                     readGIRO@c:
   767                           	opt stack 0
   768  000016                     ___ftpack@exp:
   769                           	opt stack 0
   770  000016                     delayMS@j:
   771                           	opt stack 0
   772  000016                     ___ftge@ff2:
   773                           	opt stack 0
   774                           
   775                           ; 3 bytes @ 0x15
   776  000016                     	ds	1
   777  000017                     ??___fttol:
   778  000017                     ?___awdiv:
   779                           	opt stack 0
   780  000017                     ___ftpack@sign:
   781                           	opt stack 0
   782  000017                     ___awdiv@dividend:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x16
   786  000017                     	ds	1
   787  000018                     ??___ftpack:
   788                           
   789                           ; 1 bytes @ 0x17
   790  000018                     	ds	1
   791  000019                     ??___ftge:
   792  000019                     ___awdiv@divisor:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0x18
   796  000019                     	ds	2
   797  00001B                     ___awdiv@counter:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x1A
   801  00001B                     	ds	1
   802  00001C                     ___awdiv@sign:
   803                           	opt stack 0
   804  00001C                     ___fttol@sign1:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x1B
   808  00001C                     	ds	1
   809  00001D                     ___awdiv@quotient:
   810                           	opt stack 0
   811  00001D                     ___fttol@lval:
   812                           	opt stack 0
   813                           
   814                           ; 4 bytes @ 0x1C
   815  00001D                     	ds	2
   816  00001F                     ?___awtoft:
   817                           	opt stack 0
   818  00001F                     ___awtoft@c:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x1E
   822  00001F                     	ds	2
   823  000021                     ___fttol@exp1:
   824                           	opt stack 0
   825                           
   826                           ; 1 bytes @ 0x20
   827  000021                     	ds	1
   828  000022                     ___awtoft@sign:
   829                           	opt stack 0
   830                           
   831                           ; 1 bytes @ 0x21
   832  000022                     	ds	1
   833  000023                     ?___ftmul:
   834                           	opt stack 0
   835  000023                     ___ftmul@f1:
   836                           	opt stack 0
   837                           
   838                           ; 3 bytes @ 0x22
   839  000023                     	ds	3
   840  000026                     ___ftmul@f2:
   841                           	opt stack 0
   842                           
   843                           ; 3 bytes @ 0x25
   844  000026                     	ds	3
   845  000029                     ??___ftmul:
   846                           
   847                           ; 1 bytes @ 0x28
   848  000029                     	ds	3
   849  00002C                     ___ftmul@exp:
   850                           	opt stack 0
   851                           
   852                           ; 1 bytes @ 0x2B
   853  00002C                     	ds	1
   854  00002D                     ___ftmul@f3_as_product:
   855                           	opt stack 0
   856                           
   857                           ; 3 bytes @ 0x2C
   858  00002D                     	ds	3
   859  000030                     ___ftmul@cntr:
   860                           	opt stack 0
   861                           
   862                           ; 1 bytes @ 0x2F
   863  000030                     	ds	1
   864  000031                     ___ftmul@sign:
   865                           	opt stack 0
   866                           
   867                           ; 1 bytes @ 0x30
   868  000031                     	ds	1
   869  000032                     ?___ftdiv:
   870                           	opt stack 0
   871  000032                     ___ftdiv@f1:
   872                           	opt stack 0
   873                           
   874                           ; 3 bytes @ 0x31
   875  000032                     	ds	3
   876  000035                     ___ftdiv@f2:
   877                           	opt stack 0
   878                           
   879                           ; 3 bytes @ 0x34
   880  000035                     	ds	3
   881  000038                     ??___ftdiv:
   882                           
   883                           ; 1 bytes @ 0x37
   884  000038                     	ds	3
   885  00003B                     tblptru	equ	0xFF8
   886                           tblptrh	equ	0xFF7
   887                           tblptrl	equ	0xFF6
   888                           tablat	equ	0xFF5
   889                           postinc0	equ	0xFEE
   890                           wreg	equ	0xFE8
   891                           postdec1	equ	0xFE5
   892                           fsr1l	equ	0xFE1
   893                           
   894                           ; 1 bytes @ 0x3A
   895 ;;
   896 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   897 ;;
   898 ;; *************** function _main *****************
   899 ;; Defined at:
   900 ;;		line 25 in file "main.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;		None
   903 ;; Auto vars:     Size  Location     Type
   904 ;;  pwmTemp         3   23[BANK2 ] float 
   905 ;;  u4              3   16[BANK2 ] float 
   906 ;;  u1              3   13[BANK2 ] float 
   907 ;;  u3              3    4[BANK2 ] float 
   908 ;;  u2              3    1[BANK2 ] float 
   909 ;;  i               1   22[BANK2 ] unsigned char 
   910 ;;  lambda          3   10[BANK2 ] float 
   911 ;;  l               3    7[BANK2 ] float 
   912 ;;  j               1    0[BANK2 ] unsigned char 
   913 ;; Return value:  Size  Location     Type
   914 ;;                  1    wreg      void 
   915 ;; Registers used:
   916 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   917 ;; Tracked objects:
   918 ;;		On entry : 0/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   922 ;;      Params:         0       0       0       0       0       0       0       0       0
   923 ;;      Locals:         0       0       0      26       0       0       0       0       0
   924 ;;      Temps:          0       1       0       0       0       0       0       0       0
   925 ;;      Totals:         0       1       0      26       0       0       0       0       0
   926 ;;Total ram usage:       27 bytes
   927 ;; Hardware stack levels required when called:    9
   928 ;; This function calls:
   929 ;;		_PID_outputControlCalc
   930 ;;		_PWM_Init
   931 ;;		___ftadd
   932 ;;		___ftdiv
   933 ;;		___ftmul
   934 ;;		___ftneg
   935 ;;		___fttol
   936 ;;		_delayMS
   937 ;;		_initI2C
   938 ;;		_initUART
   939 ;;		_readAccelGiroValues
   940 ;;		_sensorInit
   941 ;; This function is called by:
   942 ;;		Startup code after reset
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           	psect	text0
   947  00089A                     __ptext0:
   948                           	opt stack 0
   949  00089A                     _main:
   950                           	opt stack 22
   951                           
   952                           ;main.c: 30: initUART();
   953                           
   954                           ;incstack = 0
   955  00089A  EC88  F015         	call	_initUART	;wreg free
   956                           
   957                           ;main.c: 32: PWM_Init();
   958  00089E  ECED  F015         	call	_PWM_Init	;wreg free
   959                           
   960                           ;main.c: 33: initI2C(0xA6,0x2D);
   961  0008A2  0E2D               	movlw	45
   962  0008A4  6E15               	movwf	initI2C@Adress2,c
   963  0008A6  0EA6               	movlw	166
   964  0008A8  EC94  F012         	call	_initI2C
   965                           
   966                           ;main.c: 34: sensorInit();
   967  0008AC  EC14  F010         	call	_sensorInit	;wreg free
   968                           
   969                           ;main.c: 36: float l = 2, lambda = 1;
   970  0008B0  0E00               	movlw	0
   971  0008B2  0102               	movlb	2	; () banked
   972  0008B4  6F39               	movwf	main@l& (0+255),b
   973  0008B6  0E00               	movlw	0
   974  0008B8  0102               	movlb	2	; () banked
   975  0008BA  6F3A               	movwf	(main@l+1)& (0+255),b
   976  0008BC  0E40               	movlw	64
   977  0008BE  0102               	movlb	2	; () banked
   978  0008C0  6F3B               	movwf	(main@l+2)& (0+255),b
   979                           
   980                           ; BSR set to: 2
   981  0008C2  0E00               	movlw	0
   982  0008C4  0102               	movlb	2	; () banked
   983  0008C6  6F3C               	movwf	main@lambda& (0+255),b
   984  0008C8  0E80               	movlw	128
   985  0008CA  0102               	movlb	2	; () banked
   986  0008CC  6F3D               	movwf	(main@lambda+1)& (0+255),b
   987  0008CE  0E3F               	movlw	63
   988  0008D0  0102               	movlb	2	; () banked
   989  0008D2  6F3E               	movwf	(main@lambda+2)& (0+255),b
   990                           
   991                           ; BSR set to: 2
   992                           ;main.c: 38: pid[0].lowerLimit = -127; pid[0].upperLimit = 127;
   993  0008D4  0E00               	movlw	0
   994  0008D6  0101               	movlb	1	; () banked
   995  0008D8  6F1B               	movwf	(_pid+27)& (0+255),b
   996  0008DA  0EFE               	movlw	254
   997  0008DC  0101               	movlb	1	; () banked
   998  0008DE  6F1C               	movwf	(_pid+28)& (0+255),b
   999  0008E0  0EC2               	movlw	194
  1000  0008E2  0101               	movlb	1	; () banked
  1001  0008E4  6F1D               	movwf	(_pid+29)& (0+255),b
  1002                           
  1003                           ; BSR set to: 1
  1004  0008E6  0E00               	movlw	0
  1005  0008E8  0101               	movlb	1	; () banked
  1006  0008EA  6F18               	movwf	(_pid+24)& (0+255),b
  1007  0008EC  0EFE               	movlw	254
  1008  0008EE  0101               	movlb	1	; () banked
  1009  0008F0  6F19               	movwf	(_pid+25)& (0+255),b
  1010  0008F2  0E42               	movlw	66
  1011  0008F4  0101               	movlb	1	; () banked
  1012  0008F6  6F1A               	movwf	(_pid+26)& (0+255),b
  1013                           
  1014                           ; BSR set to: 1
  1015                           ;main.c: 39: pid[0].Kp = 1.0; pid[0].Ki = 0.0; pid[0].Kd = 0.0; pid[0].step = 1.0;
  1016  0008F8  0E00               	movlw	0
  1017  0008FA  0101               	movlb	1	; () banked
  1018  0008FC  6F00               	movwf	_pid& (0+255),b
  1019  0008FE  0E80               	movlw	128
  1020  000900  0101               	movlb	1	; () banked
  1021  000902  6F01               	movwf	(_pid+1)& (0+255),b
  1022  000904  0E3F               	movlw	63
  1023  000906  0101               	movlb	1	; () banked
  1024  000908  6F02               	movwf	(_pid+2)& (0+255),b
  1025                           
  1026                           ; BSR set to: 1
  1027  00090A  0E00               	movlw	0
  1028  00090C  0101               	movlb	1	; () banked
  1029  00090E  6F03               	movwf	(_pid+3)& (0+255),b
  1030  000910  0E00               	movlw	0
  1031  000912  0101               	movlb	1	; () banked
  1032  000914  6F04               	movwf	(_pid+4)& (0+255),b
  1033  000916  0E00               	movlw	0
  1034  000918  0101               	movlb	1	; () banked
  1035  00091A  6F05               	movwf	(_pid+5)& (0+255),b
  1036                           
  1037                           ; BSR set to: 1
  1038  00091C  0E00               	movlw	0
  1039  00091E  0101               	movlb	1	; () banked
  1040  000920  6F06               	movwf	(_pid+6)& (0+255),b
  1041  000922  0E00               	movlw	0
  1042  000924  0101               	movlb	1	; () banked
  1043  000926  6F07               	movwf	(_pid+7)& (0+255),b
  1044  000928  0E00               	movlw	0
  1045  00092A  0101               	movlb	1	; () banked
  1046  00092C  6F08               	movwf	(_pid+8)& (0+255),b
  1047                           
  1048                           ; BSR set to: 1
  1049  00092E  0E00               	movlw	0
  1050  000930  0101               	movlb	1	; () banked
  1051  000932  6F15               	movwf	(_pid+21)& (0+255),b
  1052  000934  0E80               	movlw	128
  1053  000936  0101               	movlb	1	; () banked
  1054  000938  6F16               	movwf	(_pid+22)& (0+255),b
  1055  00093A  0E3F               	movlw	63
  1056  00093C  0101               	movlb	1	; () banked
  1057  00093E  6F17               	movwf	(_pid+23)& (0+255),b
  1058                           
  1059                           ; BSR set to: 1
  1060                           ;main.c: 41: pid[1].lowerLimit = -127; pid[1].upperLimit = 127;
  1061  000940  0E00               	movlw	0
  1062  000942  0101               	movlb	1	; () banked
  1063  000944  6F40               	movwf	(_pid+64)& (0+255),b
  1064  000946  0EFE               	movlw	254
  1065  000948  0101               	movlb	1	; () banked
  1066  00094A  6F41               	movwf	(_pid+65)& (0+255),b
  1067  00094C  0EC2               	movlw	194
  1068  00094E  0101               	movlb	1	; () banked
  1069  000950  6F42               	movwf	(_pid+66)& (0+255),b
  1070                           
  1071                           ; BSR set to: 1
  1072  000952  0E00               	movlw	0
  1073  000954  0101               	movlb	1	; () banked
  1074  000956  6F3D               	movwf	(_pid+61)& (0+255),b
  1075  000958  0EFE               	movlw	254
  1076  00095A  0101               	movlb	1	; () banked
  1077  00095C  6F3E               	movwf	(_pid+62)& (0+255),b
  1078  00095E  0E42               	movlw	66
  1079  000960  0101               	movlb	1	; () banked
  1080  000962  6F3F               	movwf	(_pid+63)& (0+255),b
  1081                           
  1082                           ; BSR set to: 1
  1083                           ;main.c: 42: pid[1].Kp = 1.0; pid[1].Ki = 0.0; pid[1].Kd = 0.0; pid[1].step = 1.0;
  1084  000964  0E00               	movlw	0
  1085  000966  0101               	movlb	1	; () banked
  1086  000968  6F25               	movwf	(_pid+37)& (0+255),b
  1087  00096A  0E80               	movlw	128
  1088  00096C  0101               	movlb	1	; () banked
  1089  00096E  6F26               	movwf	(_pid+38)& (0+255),b
  1090  000970  0E3F               	movlw	63
  1091  000972  0101               	movlb	1	; () banked
  1092  000974  6F27               	movwf	(_pid+39)& (0+255),b
  1093                           
  1094                           ; BSR set to: 1
  1095  000976  0E00               	movlw	0
  1096  000978  0101               	movlb	1	; () banked
  1097  00097A  6F28               	movwf	(_pid+40)& (0+255),b
  1098  00097C  0E00               	movlw	0
  1099  00097E  0101               	movlb	1	; () banked
  1100  000980  6F29               	movwf	(_pid+41)& (0+255),b
  1101  000982  0E00               	movlw	0
  1102  000984  0101               	movlb	1	; () banked
  1103  000986  6F2A               	movwf	(_pid+42)& (0+255),b
  1104                           
  1105                           ; BSR set to: 1
  1106  000988  0E00               	movlw	0
  1107  00098A  0101               	movlb	1	; () banked
  1108  00098C  6F2B               	movwf	(_pid+43)& (0+255),b
  1109  00098E  0E00               	movlw	0
  1110  000990  0101               	movlb	1	; () banked
  1111  000992  6F2C               	movwf	(_pid+44)& (0+255),b
  1112  000994  0E00               	movlw	0
  1113  000996  0101               	movlb	1	; () banked
  1114  000998  6F2D               	movwf	(_pid+45)& (0+255),b
  1115                           
  1116                           ; BSR set to: 1
  1117  00099A  0E00               	movlw	0
  1118  00099C  0101               	movlb	1	; () banked
  1119  00099E  6F3A               	movwf	(_pid+58)& (0+255),b
  1120  0009A0  0E80               	movlw	128
  1121  0009A2  0101               	movlb	1	; () banked
  1122  0009A4  6F3B               	movwf	(_pid+59)& (0+255),b
  1123  0009A6  0E3F               	movlw	63
  1124  0009A8  0101               	movlb	1	; () banked
  1125  0009AA  6F3C               	movwf	(_pid+60)& (0+255),b
  1126                           
  1127                           ; BSR set to: 1
  1128                           ;main.c: 44: pid[2].lowerLimit = -127; pid[2].upperLimit = 127;
  1129  0009AC  0E00               	movlw	0
  1130  0009AE  0101               	movlb	1	; () banked
  1131  0009B0  6F65               	movwf	(_pid+101)& (0+255),b
  1132  0009B2  0EFE               	movlw	254
  1133  0009B4  0101               	movlb	1	; () banked
  1134  0009B6  6F66               	movwf	(_pid+102)& (0+255),b
  1135  0009B8  0EC2               	movlw	194
  1136  0009BA  0101               	movlb	1	; () banked
  1137  0009BC  6F67               	movwf	(_pid+103)& (0+255),b
  1138                           
  1139                           ; BSR set to: 1
  1140  0009BE  0E00               	movlw	0
  1141  0009C0  0101               	movlb	1	; () banked
  1142  0009C2  6F62               	movwf	(_pid+98)& (0+255),b
  1143  0009C4  0EFE               	movlw	254
  1144  0009C6  0101               	movlb	1	; () banked
  1145  0009C8  6F63               	movwf	(_pid+99)& (0+255),b
  1146  0009CA  0E42               	movlw	66
  1147  0009CC  0101               	movlb	1	; () banked
  1148  0009CE  6F64               	movwf	(_pid+100)& (0+255),b
  1149                           
  1150                           ; BSR set to: 1
  1151                           ;main.c: 45: pid[2].Kp = 1.0; pid[2].Ki = 0.0; pid[2].Kd = 0.0; pid[2].step = 1.0;
  1152  0009D0  0E00               	movlw	0
  1153  0009D2  0101               	movlb	1	; () banked
  1154  0009D4  6F4A               	movwf	(_pid+74)& (0+255),b
  1155  0009D6  0E80               	movlw	128
  1156  0009D8  0101               	movlb	1	; () banked
  1157  0009DA  6F4B               	movwf	(_pid+75)& (0+255),b
  1158  0009DC  0E3F               	movlw	63
  1159  0009DE  0101               	movlb	1	; () banked
  1160  0009E0  6F4C               	movwf	(_pid+76)& (0+255),b
  1161                           
  1162                           ; BSR set to: 1
  1163  0009E2  0E00               	movlw	0
  1164  0009E4  0101               	movlb	1	; () banked
  1165  0009E6  6F4D               	movwf	(_pid+77)& (0+255),b
  1166  0009E8  0E00               	movlw	0
  1167  0009EA  0101               	movlb	1	; () banked
  1168  0009EC  6F4E               	movwf	(_pid+78)& (0+255),b
  1169  0009EE  0E00               	movlw	0
  1170  0009F0  0101               	movlb	1	; () banked
  1171  0009F2  6F4F               	movwf	(_pid+79)& (0+255),b
  1172                           
  1173                           ; BSR set to: 1
  1174  0009F4  0E00               	movlw	0
  1175  0009F6  0101               	movlb	1	; () banked
  1176  0009F8  6F50               	movwf	(_pid+80)& (0+255),b
  1177  0009FA  0E00               	movlw	0
  1178  0009FC  0101               	movlb	1	; () banked
  1179  0009FE  6F51               	movwf	(_pid+81)& (0+255),b
  1180  000A00  0E00               	movlw	0
  1181  000A02  0101               	movlb	1	; () banked
  1182  000A04  6F52               	movwf	(_pid+82)& (0+255),b
  1183                           
  1184                           ; BSR set to: 1
  1185  000A06  0E00               	movlw	0
  1186  000A08  0101               	movlb	1	; () banked
  1187  000A0A  6F5F               	movwf	(_pid+95)& (0+255),b
  1188  000A0C  0E80               	movlw	128
  1189  000A0E  0101               	movlb	1	; () banked
  1190  000A10  6F60               	movwf	(_pid+96)& (0+255),b
  1191  000A12  0E3F               	movlw	63
  1192  000A14  0101               	movlb	1	; () banked
  1193  000A16  6F61               	movwf	(_pid+97)& (0+255),b
  1194                           
  1195                           ; BSR set to: 1
  1196                           ;main.c: 47: pid[3].lowerLimit = -127; pid[3].upperLimit = 127;
  1197  000A18  0E00               	movlw	0
  1198  000A1A  0101               	movlb	1	; () banked
  1199  000A1C  6F8A               	movwf	(_pid+138)& (0+255),b
  1200  000A1E  0EFE               	movlw	254
  1201  000A20  0101               	movlb	1	; () banked
  1202  000A22  6F8B               	movwf	(_pid+139)& (0+255),b
  1203  000A24  0EC2               	movlw	194
  1204  000A26  0101               	movlb	1	; () banked
  1205  000A28  6F8C               	movwf	(_pid+140)& (0+255),b
  1206                           
  1207                           ; BSR set to: 1
  1208  000A2A  0E00               	movlw	0
  1209  000A2C  0101               	movlb	1	; () banked
  1210  000A2E  6F87               	movwf	(_pid+135)& (0+255),b
  1211  000A30  0EFE               	movlw	254
  1212  000A32  0101               	movlb	1	; () banked
  1213  000A34  6F88               	movwf	(_pid+136)& (0+255),b
  1214  000A36  0E42               	movlw	66
  1215  000A38  0101               	movlb	1	; () banked
  1216  000A3A  6F89               	movwf	(_pid+137)& (0+255),b
  1217                           
  1218                           ; BSR set to: 1
  1219                           ;main.c: 48: pid[3].Kp = 1.0; pid[3].Ki = 0.0; pid[3].Kd = 0.0; pid[3].step = 1.0;
  1220  000A3C  0E00               	movlw	0
  1221  000A3E  0101               	movlb	1	; () banked
  1222  000A40  6F6F               	movwf	(_pid+111)& (0+255),b
  1223  000A42  0E80               	movlw	128
  1224  000A44  0101               	movlb	1	; () banked
  1225  000A46  6F70               	movwf	(_pid+112)& (0+255),b
  1226  000A48  0E3F               	movlw	63
  1227  000A4A  0101               	movlb	1	; () banked
  1228  000A4C  6F71               	movwf	(_pid+113)& (0+255),b
  1229                           
  1230                           ; BSR set to: 1
  1231  000A4E  0E00               	movlw	0
  1232  000A50  0101               	movlb	1	; () banked
  1233  000A52  6F72               	movwf	(_pid+114)& (0+255),b
  1234  000A54  0E00               	movlw	0
  1235  000A56  0101               	movlb	1	; () banked
  1236  000A58  6F73               	movwf	(_pid+115)& (0+255),b
  1237  000A5A  0E00               	movlw	0
  1238  000A5C  0101               	movlb	1	; () banked
  1239  000A5E  6F74               	movwf	(_pid+116)& (0+255),b
  1240                           
  1241                           ; BSR set to: 1
  1242  000A60  0E00               	movlw	0
  1243  000A62  0101               	movlb	1	; () banked
  1244  000A64  6F75               	movwf	(_pid+117)& (0+255),b
  1245  000A66  0E00               	movlw	0
  1246  000A68  0101               	movlb	1	; () banked
  1247  000A6A  6F76               	movwf	(_pid+118)& (0+255),b
  1248  000A6C  0E00               	movlw	0
  1249  000A6E  0101               	movlb	1	; () banked
  1250  000A70  6F77               	movwf	(_pid+119)& (0+255),b
  1251                           
  1252                           ; BSR set to: 1
  1253  000A72  0E00               	movlw	0
  1254  000A74  0101               	movlb	1	; () banked
  1255  000A76  6F84               	movwf	(_pid+132)& (0+255),b
  1256  000A78  0E80               	movlw	128
  1257  000A7A  0101               	movlb	1	; () banked
  1258  000A7C  6F85               	movwf	(_pid+133)& (0+255),b
  1259  000A7E  0E3F               	movlw	63
  1260  000A80  0101               	movlb	1	; () banked
  1261  000A82  6F86               	movwf	(_pid+134)& (0+255),b
  1262                           
  1263                           ; BSR set to: 1
  1264                           ;main.c: 50: unsigned char j=1;
  1265  000A84  0E01               	movlw	1
  1266  000A86  0102               	movlb	2	; () banked
  1267  000A88  6F32               	movwf	main@j& (0+255),b
  1268                           
  1269                           ; BSR set to: 2
  1270                           ;main.c: 51: for(unsigned char i = 1; i < 185; ++i) {
  1271  000A8A  0E01               	movlw	1
  1272  000A8C  0102               	movlb	2	; () banked
  1273  000A8E  6F48               	movwf	main@i& (0+255),b
  1274  000A90                     l4185:
  1275                           
  1276                           ; BSR set to: 2
  1277  000A90  0EB8               	movlw	184
  1278  000A92  0102               	movlb	2	; () banked
  1279  000A94  6548               	cpfsgt	main@i& (0+255),b
  1280  000A96  D001               	goto	l602
  1281  000A98  D011               	goto	l4195
  1282  000A9A                     l602:
  1283                           
  1284                           ; BSR set to: 2
  1285                           ;main.c: 54: _pwm[0] = i;
  1286  000A9A  C248  F03B         	movff	main@i,__pwm
  1287                           
  1288                           ;main.c: 55: _pwm[1] = i;
  1289  000A9E  C248  F03C         	movff	main@i,__pwm+1
  1290                           
  1291                           ;main.c: 56: _pwm[3] = i;
  1292  000AA2  C248  F03E         	movff	main@i,__pwm+3
  1293                           
  1294                           ;main.c: 57: _pwm[2] = i;
  1295  000AA6  C248  F03D         	movff	main@i,__pwm+2
  1296                           
  1297                           ; BSR set to: 2
  1298                           ;main.c: 58: delayMS(90);
  1299  000AAA  0E00               	movlw	0
  1300  000AAC  6E14               	movwf	delayMS@waitTime+1,c
  1301  000AAE  0E5A               	movlw	90
  1302  000AB0  6E13               	movwf	delayMS@waitTime,c
  1303  000AB2  ECB9  F015         	call	_delayMS	;wreg free
  1304  000AB6  0102               	movlb	2	; () banked
  1305  000AB8  2B48               	incf	main@i& (0+255),f,b
  1306  000ABA  D7EA               	goto	l4185
  1307  000ABC                     l4195:
  1308                           
  1309                           ;main.c: 61: readAccelGiroValues();
  1310  000ABC  EC76  F008         	call	_readAccelGiroValues	;wreg free
  1311                           
  1312                           ;main.c: 62: PID_outputControlCalc(5,pos.z,0);
  1313  000AC0  0E00               	movlw	0
  1314  000AC2  0100               	movlb	0	; () banked
  1315  000AC4  6FD7               	movwf	PID_outputControlCalc@reference& (0+255),b
  1316  000AC6  0EA0               	movlw	160
  1317  000AC8  0100               	movlb	0	; () banked
  1318  000ACA  6FD8               	movwf	(PID_outputControlCalc@reference+1)& (0+255),b
  1319  000ACC  0E40               	movlw	64
  1320  000ACE  0100               	movlb	0	; () banked
  1321  000AD0  6FD9               	movwf	(PID_outputControlCalc@reference+2)& (0+255),b
  1322  000AD2  C09C  F0DA         	movff	_pos+6,PID_outputControlCalc@systemOutput
  1323  000AD6  C09D  F0DB         	movff	_pos+7,PID_outputControlCalc@systemOutput+1
  1324  000ADA  C09E  F0DC         	movff	_pos+8,PID_outputControlCalc@systemOutput+2
  1325  000ADE  0E00               	movlw	0
  1326  000AE0  0100               	movlb	0	; () banked
  1327  000AE2  6FDD               	movwf	PID_outputControlCalc@whichPID& (0+255),b
  1328  000AE4  EC3D  F00C         	call	_PID_outputControlCalc	;wreg free
  1329                           
  1330                           ;main.c: 63: float u1 = pid[0].controlSignal + 740;
  1331  000AE8  C11E  F0CB         	movff	_pid+30,___ftadd@f1
  1332  000AEC  C11F  F0CC         	movff	_pid+31,___ftadd@f1+1
  1333  000AF0  C120  F0CD         	movff	_pid+32,___ftadd@f1+2
  1334  000AF4  0E00               	movlw	0
  1335  000AF6  0100               	movlb	0	; () banked
  1336  000AF8  6FCE               	movwf	___ftadd@f2& (0+255),b
  1337  000AFA  0E39               	movlw	57
  1338  000AFC  0100               	movlb	0	; () banked
  1339  000AFE  6FCF               	movwf	(___ftadd@f2+1)& (0+255),b
  1340  000B00  0E44               	movlw	68
  1341  000B02  0100               	movlb	0	; () banked
  1342  000B04  6FD0               	movwf	(___ftadd@f2+2)& (0+255),b
  1343  000B06  ECE0  F00E         	call	___ftadd	;wreg free
  1344  000B0A  C0CB  F23F         	movff	?___ftadd,main@u1
  1345  000B0E  C0CC  F240         	movff	?___ftadd+1,main@u1+1
  1346  000B12  C0CD  F241         	movff	?___ftadd+2,main@u1+2
  1347                           
  1348                           ;main.c: 64: PID_outputControlCalc(0.0,giro.x,1);
  1349  000B16  0E00               	movlw	0
  1350  000B18  0100               	movlb	0	; () banked
  1351  000B1A  6FD7               	movwf	PID_outputControlCalc@reference& (0+255),b
  1352  000B1C  0E00               	movlw	0
  1353  000B1E  0100               	movlb	0	; () banked
  1354  000B20  6FD8               	movwf	(PID_outputControlCalc@reference+1)& (0+255),b
  1355  000B22  0E00               	movlw	0
  1356  000B24  0100               	movlb	0	; () banked
  1357  000B26  6FD9               	movwf	(PID_outputControlCalc@reference+2)& (0+255),b
  1358  000B28  C07B  F0DA         	movff	_giro,PID_outputControlCalc@systemOutput
  1359  000B2C  C07C  F0DB         	movff	_giro+1,PID_outputControlCalc@systemOutput+1
  1360  000B30  C07D  F0DC         	movff	_giro+2,PID_outputControlCalc@systemOutput+2
  1361  000B34  0E01               	movlw	1
  1362  000B36  0100               	movlb	0	; () banked
  1363  000B38  6FDD               	movwf	PID_outputControlCalc@whichPID& (0+255),b
  1364  000B3A  EC3D  F00C         	call	_PID_outputControlCalc	;wreg free
  1365                           
  1366                           ;main.c: 65: float u2 = pid[1].controlSignal;
  1367  000B3E  C143  F233         	movff	_pid+67,main@u2
  1368  000B42  C144  F234         	movff	_pid+68,main@u2+1
  1369  000B46  C145  F235         	movff	_pid+69,main@u2+2
  1370                           
  1371                           ;main.c: 66: PID_outputControlCalc(0.0,giro.y,2);
  1372  000B4A  0E00               	movlw	0
  1373  000B4C  0100               	movlb	0	; () banked
  1374  000B4E  6FD7               	movwf	PID_outputControlCalc@reference& (0+255),b
  1375  000B50  0E00               	movlw	0
  1376  000B52  0100               	movlb	0	; () banked
  1377  000B54  6FD8               	movwf	(PID_outputControlCalc@reference+1)& (0+255),b
  1378  000B56  0E00               	movlw	0
  1379  000B58  0100               	movlb	0	; () banked
  1380  000B5A  6FD9               	movwf	(PID_outputControlCalc@reference+2)& (0+255),b
  1381  000B5C  C07E  F0DA         	movff	_giro+3,PID_outputControlCalc@systemOutput
  1382  000B60  C07F  F0DB         	movff	_giro+4,PID_outputControlCalc@systemOutput+1
  1383  000B64  C080  F0DC         	movff	_giro+5,PID_outputControlCalc@systemOutput+2
  1384  000B68  0E02               	movlw	2
  1385  000B6A  0100               	movlb	0	; () banked
  1386  000B6C  6FDD               	movwf	PID_outputControlCalc@whichPID& (0+255),b
  1387  000B6E  EC3D  F00C         	call	_PID_outputControlCalc	;wreg free
  1388                           
  1389                           ;main.c: 67: float u3 = pid[2].controlSignal;
  1390  000B72  C168  F236         	movff	_pid+104,main@u3
  1391  000B76  C169  F237         	movff	_pid+105,main@u3+1
  1392  000B7A  C16A  F238         	movff	_pid+106,main@u3+2
  1393                           
  1394                           ;main.c: 68: PID_outputControlCalc(0.0,giro.z,3);
  1395  000B7E  0E00               	movlw	0
  1396  000B80  0100               	movlb	0	; () banked
  1397  000B82  6FD7               	movwf	PID_outputControlCalc@reference& (0+255),b
  1398  000B84  0E00               	movlw	0
  1399  000B86  0100               	movlb	0	; () banked
  1400  000B88  6FD8               	movwf	(PID_outputControlCalc@reference+1)& (0+255),b
  1401  000B8A  0E00               	movlw	0
  1402  000B8C  0100               	movlb	0	; () banked
  1403  000B8E  6FD9               	movwf	(PID_outputControlCalc@reference+2)& (0+255),b
  1404  000B90  C081  F0DA         	movff	_giro+6,PID_outputControlCalc@systemOutput
  1405  000B94  C082  F0DB         	movff	_giro+7,PID_outputControlCalc@systemOutput+1
  1406  000B98  C083  F0DC         	movff	_giro+8,PID_outputControlCalc@systemOutput+2
  1407  000B9C  0E03               	movlw	3
  1408  000B9E  0100               	movlb	0	; () banked
  1409  000BA0  6FDD               	movwf	PID_outputControlCalc@whichPID& (0+255),b
  1410  000BA2  EC3D  F00C         	call	_PID_outputControlCalc	;wreg free
  1411                           
  1412                           ;main.c: 69: float u4 = pid[3].controlSignal;
  1413  000BA6  C18D  F242         	movff	_pid+141,main@u4
  1414  000BAA  C18E  F243         	movff	_pid+142,main@u4+1
  1415  000BAE  C18F  F244         	movff	_pid+143,main@u4+2
  1416                           
  1417                           ;main.c: 71: float pwmTemp = (u1/4 - u3/(2*l) - u4/(4*lambda));
  1418  000BB2  0E00               	movlw	0
  1419  000BB4  6E26               	movwf	___ftmul@f2,c
  1420  000BB6  0E80               	movlw	128
  1421  000BB8  6E27               	movwf	___ftmul@f2+1,c
  1422  000BBA  0E40               	movlw	64
  1423  000BBC  6E28               	movwf	___ftmul@f2+2,c
  1424  000BBE  C23C  F023         	movff	main@lambda,___ftmul@f1
  1425  000BC2  C23D  F024         	movff	main@lambda+1,___ftmul@f1+1
  1426  000BC6  C23E  F025         	movff	main@lambda+2,___ftmul@f1+2
  1427  000BCA  EC1A  F012         	call	___ftmul	;wreg free
  1428  000BCE  C023  F035         	movff	?___ftmul,___ftdiv@f2
  1429  000BD2  C024  F036         	movff	?___ftmul+1,___ftdiv@f2+1
  1430  000BD6  C025  F037         	movff	?___ftmul+2,___ftdiv@f2+2
  1431  000BDA  C242  F032         	movff	main@u4,___ftdiv@f1
  1432  000BDE  C243  F033         	movff	main@u4+1,___ftdiv@f1+1
  1433  000BE2  C244  F034         	movff	main@u4+2,___ftdiv@f1+2
  1434  000BE6  EC1E  F011         	call	___ftdiv	;wreg free
  1435  000BEA  C032  F0C8         	movff	?___ftdiv,___ftneg@f1
  1436  000BEE  C033  F0C9         	movff	?___ftdiv+1,___ftneg@f1+1
  1437  000BF2  C034  F0CA         	movff	?___ftdiv+2,___ftneg@f1+2
  1438  000BF6  ECA1  F015         	call	___ftneg	;wreg free
  1439  000BFA  C0C8  F0CE         	movff	?___ftneg,___ftadd@f2
  1440  000BFE  C0C9  F0CF         	movff	?___ftneg+1,___ftadd@f2+1
  1441  000C02  C0CA  F0D0         	movff	?___ftneg+2,___ftadd@f2+2
  1442  000C06  0E00               	movlw	0
  1443  000C08  6E35               	movwf	___ftdiv@f2,c
  1444  000C0A  0E80               	movlw	128
  1445  000C0C  6E36               	movwf	___ftdiv@f2+1,c
  1446  000C0E  0E40               	movlw	64
  1447  000C10  6E37               	movwf	___ftdiv@f2+2,c
  1448  000C12  C23F  F032         	movff	main@u1,___ftdiv@f1
  1449  000C16  C240  F033         	movff	main@u1+1,___ftdiv@f1+1
  1450  000C1A  C241  F034         	movff	main@u1+2,___ftdiv@f1+2
  1451  000C1E  EC1E  F011         	call	___ftdiv	;wreg free
  1452  000C22  C032  F0CB         	movff	?___ftdiv,___ftadd@f1
  1453  000C26  C033  F0CC         	movff	?___ftdiv+1,___ftadd@f1+1
  1454  000C2A  C034  F0CD         	movff	?___ftdiv+2,___ftadd@f1+2
  1455  000C2E  ECE0  F00E         	call	___ftadd	;wreg free
  1456  000C32  C0CB  F245         	movff	?___ftadd,_main$1983
  1457  000C36  C0CC  F246         	movff	?___ftadd+1,_main$1983+1
  1458  000C3A  C0CD  F247         	movff	?___ftadd+2,_main$1983+2
  1459                           
  1460                           ;main.c: 71: float pwmTemp = (u1/4 - u3/(2*l) - u4/(4*lambda));
  1461  000C3E  C245  F0CB         	movff	_main$1983,___ftadd@f1
  1462  000C42  C246  F0CC         	movff	_main$1983+1,___ftadd@f1+1
  1463  000C46  C247  F0CD         	movff	_main$1983+2,___ftadd@f1+2
  1464  000C4A  0E00               	movlw	0
  1465  000C4C  6E26               	movwf	___ftmul@f2,c
  1466  000C4E  0E00               	movlw	0
  1467  000C50  6E27               	movwf	___ftmul@f2+1,c
  1468  000C52  0E40               	movlw	64
  1469  000C54  6E28               	movwf	___ftmul@f2+2,c
  1470  000C56  C239  F023         	movff	main@l,___ftmul@f1
  1471  000C5A  C23A  F024         	movff	main@l+1,___ftmul@f1+1
  1472  000C5E  C23B  F025         	movff	main@l+2,___ftmul@f1+2
  1473  000C62  EC1A  F012         	call	___ftmul	;wreg free
  1474  000C66  C023  F035         	movff	?___ftmul,___ftdiv@f2
  1475  000C6A  C024  F036         	movff	?___ftmul+1,___ftdiv@f2+1
  1476  000C6E  C025  F037         	movff	?___ftmul+2,___ftdiv@f2+2
  1477  000C72  C236  F032         	movff	main@u3,___ftdiv@f1
  1478  000C76  C237  F033         	movff	main@u3+1,___ftdiv@f1+1
  1479  000C7A  C238  F034         	movff	main@u3+2,___ftdiv@f1+2
  1480  000C7E  EC1E  F011         	call	___ftdiv	;wreg free
  1481  000C82  C032  F0C8         	movff	?___ftdiv,___ftneg@f1
  1482  000C86  C033  F0C9         	movff	?___ftdiv+1,___ftneg@f1+1
  1483  000C8A  C034  F0CA         	movff	?___ftdiv+2,___ftneg@f1+2
  1484  000C8E  ECA1  F015         	call	___ftneg	;wreg free
  1485  000C92  C0C8  F0CE         	movff	?___ftneg,___ftadd@f2
  1486  000C96  C0C9  F0CF         	movff	?___ftneg+1,___ftadd@f2+1
  1487  000C9A  C0CA  F0D0         	movff	?___ftneg+2,___ftadd@f2+2
  1488  000C9E  ECE0  F00E         	call	___ftadd	;wreg free
  1489  000CA2  C0CB  F249         	movff	?___ftadd,main@pwmTemp
  1490  000CA6  C0CC  F24A         	movff	?___ftadd+1,main@pwmTemp+1
  1491  000CAA  C0CD  F24B         	movff	?___ftadd+2,main@pwmTemp+2
  1492                           
  1493                           ;main.c: 72: if(pwmTemp < 0)
  1494  000CAE  0102               	movlb	2	; () banked
  1495  000CB0  AF4B               	btfss	(main@pwmTemp+2)& (0+255),7,b
  1496  000CB2  D009               	goto	l4215
  1497                           
  1498                           ; BSR set to: 2
  1499                           ;main.c: 73: pwmTemp = 0;
  1500  000CB4  0E00               	movlw	0
  1501  000CB6  0102               	movlb	2	; () banked
  1502  000CB8  6F49               	movwf	main@pwmTemp& (0+255),b
  1503  000CBA  0E00               	movlw	0
  1504  000CBC  0102               	movlb	2	; () banked
  1505  000CBE  6F4A               	movwf	(main@pwmTemp+1)& (0+255),b
  1506  000CC0  0E00               	movlw	0
  1507  000CC2  0102               	movlb	2	; () banked
  1508  000CC4  6F4B               	movwf	(main@pwmTemp+2)& (0+255),b
  1509  000CC6                     l4215:
  1510                           
  1511                           ; BSR set to: 2
  1512                           ;main.c: 74: _pwm[0] = (unsigned char) pwmTemp;
  1513  000CC6  C249  F013         	movff	main@pwmTemp,___fttol@f1
  1514  000CCA  C24A  F014         	movff	main@pwmTemp+1,___fttol@f1+1
  1515  000CCE  C24B  F015         	movff	main@pwmTemp+2,___fttol@f1+2
  1516  000CD2  ECA0  F011         	call	___fttol	;wreg free
  1517  000CD6  5013               	movf	?___fttol,w,c
  1518  000CD8  6E3B               	movwf	__pwm,c
  1519                           
  1520                           ;main.c: 75: pwmTemp = (u1/4 - u2/(2*l) + u4/(4*lambda));
  1521  000CDA  0E00               	movlw	0
  1522  000CDC  6E26               	movwf	___ftmul@f2,c
  1523  000CDE  0E80               	movlw	128
  1524  000CE0  6E27               	movwf	___ftmul@f2+1,c
  1525  000CE2  0E40               	movlw	64
  1526  000CE4  6E28               	movwf	___ftmul@f2+2,c
  1527  000CE6  C23C  F023         	movff	main@lambda,___ftmul@f1
  1528  000CEA  C23D  F024         	movff	main@lambda+1,___ftmul@f1+1
  1529  000CEE  C23E  F025         	movff	main@lambda+2,___ftmul@f1+2
  1530  000CF2  EC1A  F012         	call	___ftmul	;wreg free
  1531  000CF6  C023  F035         	movff	?___ftmul,___ftdiv@f2
  1532  000CFA  C024  F036         	movff	?___ftmul+1,___ftdiv@f2+1
  1533  000CFE  C025  F037         	movff	?___ftmul+2,___ftdiv@f2+2
  1534  000D02  C242  F032         	movff	main@u4,___ftdiv@f1
  1535  000D06  C243  F033         	movff	main@u4+1,___ftdiv@f1+1
  1536  000D0A  C244  F034         	movff	main@u4+2,___ftdiv@f1+2
  1537  000D0E  EC1E  F011         	call	___ftdiv	;wreg free
  1538  000D12  C032  F0CE         	movff	?___ftdiv,___ftadd@f2
  1539  000D16  C033  F0CF         	movff	?___ftdiv+1,___ftadd@f2+1
  1540  000D1A  C034  F0D0         	movff	?___ftdiv+2,___ftadd@f2+2
  1541  000D1E  0E00               	movlw	0
  1542  000D20  6E35               	movwf	___ftdiv@f2,c
  1543  000D22  0E80               	movlw	128
  1544  000D24  6E36               	movwf	___ftdiv@f2+1,c
  1545  000D26  0E40               	movlw	64
  1546  000D28  6E37               	movwf	___ftdiv@f2+2,c
  1547  000D2A  C23F  F032         	movff	main@u1,___ftdiv@f1
  1548  000D2E  C240  F033         	movff	main@u1+1,___ftdiv@f1+1
  1549  000D32  C241  F034         	movff	main@u1+2,___ftdiv@f1+2
  1550  000D36  EC1E  F011         	call	___ftdiv	;wreg free
  1551  000D3A  C032  F0CB         	movff	?___ftdiv,___ftadd@f1
  1552  000D3E  C033  F0CC         	movff	?___ftdiv+1,___ftadd@f1+1
  1553  000D42  C034  F0CD         	movff	?___ftdiv+2,___ftadd@f1+2
  1554  000D46  ECE0  F00E         	call	___ftadd	;wreg free
  1555  000D4A  C0CB  F245         	movff	?___ftadd,_main$1983
  1556  000D4E  C0CC  F246         	movff	?___ftadd+1,_main$1983+1
  1557  000D52  C0CD  F247         	movff	?___ftadd+2,_main$1983+2
  1558                           
  1559                           ;main.c: 75: pwmTemp = (u1/4 - u2/(2*l) + u4/(4*lambda));
  1560  000D56  C245  F0CB         	movff	_main$1983,___ftadd@f1
  1561  000D5A  C246  F0CC         	movff	_main$1983+1,___ftadd@f1+1
  1562  000D5E  C247  F0CD         	movff	_main$1983+2,___ftadd@f1+2
  1563  000D62  0E00               	movlw	0
  1564  000D64  6E26               	movwf	___ftmul@f2,c
  1565  000D66  0E00               	movlw	0
  1566  000D68  6E27               	movwf	___ftmul@f2+1,c
  1567  000D6A  0E40               	movlw	64
  1568  000D6C  6E28               	movwf	___ftmul@f2+2,c
  1569  000D6E  C239  F023         	movff	main@l,___ftmul@f1
  1570  000D72  C23A  F024         	movff	main@l+1,___ftmul@f1+1
  1571  000D76  C23B  F025         	movff	main@l+2,___ftmul@f1+2
  1572  000D7A  EC1A  F012         	call	___ftmul	;wreg free
  1573  000D7E  C023  F035         	movff	?___ftmul,___ftdiv@f2
  1574  000D82  C024  F036         	movff	?___ftmul+1,___ftdiv@f2+1
  1575  000D86  C025  F037         	movff	?___ftmul+2,___ftdiv@f2+2
  1576  000D8A  C233  F032         	movff	main@u2,___ftdiv@f1
  1577  000D8E  C234  F033         	movff	main@u2+1,___ftdiv@f1+1
  1578  000D92  C235  F034         	movff	main@u2+2,___ftdiv@f1+2
  1579  000D96  EC1E  F011         	call	___ftdiv	;wreg free
  1580  000D9A  C032  F0C8         	movff	?___ftdiv,___ftneg@f1
  1581  000D9E  C033  F0C9         	movff	?___ftdiv+1,___ftneg@f1+1
  1582  000DA2  C034  F0CA         	movff	?___ftdiv+2,___ftneg@f1+2
  1583  000DA6  ECA1  F015         	call	___ftneg	;wreg free
  1584  000DAA  C0C8  F0CE         	movff	?___ftneg,___ftadd@f2
  1585  000DAE  C0C9  F0CF         	movff	?___ftneg+1,___ftadd@f2+1
  1586  000DB2  C0CA  F0D0         	movff	?___ftneg+2,___ftadd@f2+2
  1587  000DB6  ECE0  F00E         	call	___ftadd	;wreg free
  1588  000DBA  C0CB  F249         	movff	?___ftadd,main@pwmTemp
  1589  000DBE  C0CC  F24A         	movff	?___ftadd+1,main@pwmTemp+1
  1590  000DC2  C0CD  F24B         	movff	?___ftadd+2,main@pwmTemp+2
  1591                           
  1592                           ;main.c: 76: if(pwmTemp < 0)
  1593  000DC6  0102               	movlb	2	; () banked
  1594  000DC8  AF4B               	btfss	(main@pwmTemp+2)& (0+255),7,b
  1595  000DCA  D009               	goto	l4225
  1596                           
  1597                           ; BSR set to: 2
  1598                           ;main.c: 77: pwmTemp = 0;
  1599  000DCC  0E00               	movlw	0
  1600  000DCE  0102               	movlb	2	; () banked
  1601  000DD0  6F49               	movwf	main@pwmTemp& (0+255),b
  1602  000DD2  0E00               	movlw	0
  1603  000DD4  0102               	movlb	2	; () banked
  1604  000DD6  6F4A               	movwf	(main@pwmTemp+1)& (0+255),b
  1605  000DD8  0E00               	movlw	0
  1606  000DDA  0102               	movlb	2	; () banked
  1607  000DDC  6F4B               	movwf	(main@pwmTemp+2)& (0+255),b
  1608  000DDE                     l4225:
  1609                           
  1610                           ; BSR set to: 2
  1611                           ;main.c: 78: _pwm[1] = (unsigned char) pwmTemp;
  1612  000DDE  C249  F013         	movff	main@pwmTemp,___fttol@f1
  1613  000DE2  C24A  F014         	movff	main@pwmTemp+1,___fttol@f1+1
  1614  000DE6  C24B  F015         	movff	main@pwmTemp+2,___fttol@f1+2
  1615  000DEA  ECA0  F011         	call	___fttol	;wreg free
  1616  000DEE  5013               	movf	?___fttol,w,c
  1617  000DF0  6E3C               	movwf	__pwm+1,c
  1618                           
  1619                           ;main.c: 79: pwmTemp = (u1/4 + u3/(2*l) - u4/(4*lambda));
  1620  000DF2  0E00               	movlw	0
  1621  000DF4  6E26               	movwf	___ftmul@f2,c
  1622  000DF6  0E00               	movlw	0
  1623  000DF8  6E27               	movwf	___ftmul@f2+1,c
  1624  000DFA  0E40               	movlw	64
  1625  000DFC  6E28               	movwf	___ftmul@f2+2,c
  1626  000DFE  C239  F023         	movff	main@l,___ftmul@f1
  1627  000E02  C23A  F024         	movff	main@l+1,___ftmul@f1+1
  1628  000E06  C23B  F025         	movff	main@l+2,___ftmul@f1+2
  1629  000E0A  EC1A  F012         	call	___ftmul	;wreg free
  1630  000E0E  C023  F035         	movff	?___ftmul,___ftdiv@f2
  1631  000E12  C024  F036         	movff	?___ftmul+1,___ftdiv@f2+1
  1632  000E16  C025  F037         	movff	?___ftmul+2,___ftdiv@f2+2
  1633  000E1A  C236  F032         	movff	main@u3,___ftdiv@f1
  1634  000E1E  C237  F033         	movff	main@u3+1,___ftdiv@f1+1
  1635  000E22  C238  F034         	movff	main@u3+2,___ftdiv@f1+2
  1636  000E26  EC1E  F011         	call	___ftdiv	;wreg free
  1637  000E2A  C032  F0CE         	movff	?___ftdiv,___ftadd@f2
  1638  000E2E  C033  F0CF         	movff	?___ftdiv+1,___ftadd@f2+1
  1639  000E32  C034  F0D0         	movff	?___ftdiv+2,___ftadd@f2+2
  1640  000E36  0E00               	movlw	0
  1641  000E38  6E35               	movwf	___ftdiv@f2,c
  1642  000E3A  0E80               	movlw	128
  1643  000E3C  6E36               	movwf	___ftdiv@f2+1,c
  1644  000E3E  0E40               	movlw	64
  1645  000E40  6E37               	movwf	___ftdiv@f2+2,c
  1646  000E42  C23F  F032         	movff	main@u1,___ftdiv@f1
  1647  000E46  C240  F033         	movff	main@u1+1,___ftdiv@f1+1
  1648  000E4A  C241  F034         	movff	main@u1+2,___ftdiv@f1+2
  1649  000E4E  EC1E  F011         	call	___ftdiv	;wreg free
  1650  000E52  C032  F0CB         	movff	?___ftdiv,___ftadd@f1
  1651  000E56  C033  F0CC         	movff	?___ftdiv+1,___ftadd@f1+1
  1652  000E5A  C034  F0CD         	movff	?___ftdiv+2,___ftadd@f1+2
  1653  000E5E  ECE0  F00E         	call	___ftadd	;wreg free
  1654  000E62  C0CB  F245         	movff	?___ftadd,_main$1983
  1655  000E66  C0CC  F246         	movff	?___ftadd+1,_main$1983+1
  1656  000E6A  C0CD  F247         	movff	?___ftadd+2,_main$1983+2
  1657                           
  1658                           ;main.c: 79: pwmTemp = (u1/4 + u3/(2*l) - u4/(4*lambda));
  1659  000E6E  C245  F0CB         	movff	_main$1983,___ftadd@f1
  1660  000E72  C246  F0CC         	movff	_main$1983+1,___ftadd@f1+1
  1661  000E76  C247  F0CD         	movff	_main$1983+2,___ftadd@f1+2
  1662  000E7A  0E00               	movlw	0
  1663  000E7C  6E26               	movwf	___ftmul@f2,c
  1664  000E7E  0E80               	movlw	128
  1665  000E80  6E27               	movwf	___ftmul@f2+1,c
  1666  000E82  0E40               	movlw	64
  1667  000E84  6E28               	movwf	___ftmul@f2+2,c
  1668  000E86  C23C  F023         	movff	main@lambda,___ftmul@f1
  1669  000E8A  C23D  F024         	movff	main@lambda+1,___ftmul@f1+1
  1670  000E8E  C23E  F025         	movff	main@lambda+2,___ftmul@f1+2
  1671  000E92  EC1A  F012         	call	___ftmul	;wreg free
  1672  000E96  C023  F035         	movff	?___ftmul,___ftdiv@f2
  1673  000E9A  C024  F036         	movff	?___ftmul+1,___ftdiv@f2+1
  1674  000E9E  C025  F037         	movff	?___ftmul+2,___ftdiv@f2+2
  1675  000EA2  C242  F032         	movff	main@u4,___ftdiv@f1
  1676  000EA6  C243  F033         	movff	main@u4+1,___ftdiv@f1+1
  1677  000EAA  C244  F034         	movff	main@u4+2,___ftdiv@f1+2
  1678  000EAE  EC1E  F011         	call	___ftdiv	;wreg free
  1679  000EB2  C032  F0C8         	movff	?___ftdiv,___ftneg@f1
  1680  000EB6  C033  F0C9         	movff	?___ftdiv+1,___ftneg@f1+1
  1681  000EBA  C034  F0CA         	movff	?___ftdiv+2,___ftneg@f1+2
  1682  000EBE  ECA1  F015         	call	___ftneg	;wreg free
  1683  000EC2  C0C8  F0CE         	movff	?___ftneg,___ftadd@f2
  1684  000EC6  C0C9  F0CF         	movff	?___ftneg+1,___ftadd@f2+1
  1685  000ECA  C0CA  F0D0         	movff	?___ftneg+2,___ftadd@f2+2
  1686  000ECE  ECE0  F00E         	call	___ftadd	;wreg free
  1687  000ED2  C0CB  F249         	movff	?___ftadd,main@pwmTemp
  1688  000ED6  C0CC  F24A         	movff	?___ftadd+1,main@pwmTemp+1
  1689  000EDA  C0CD  F24B         	movff	?___ftadd+2,main@pwmTemp+2
  1690                           
  1691                           ;main.c: 80: if(pwmTemp < 0)
  1692  000EDE  0102               	movlb	2	; () banked
  1693  000EE0  AF4B               	btfss	(main@pwmTemp+2)& (0+255),7,b
  1694  000EE2  D009               	goto	l4235
  1695                           
  1696                           ; BSR set to: 2
  1697                           ;main.c: 81: pwmTemp = 0;
  1698  000EE4  0E00               	movlw	0
  1699  000EE6  0102               	movlb	2	; () banked
  1700  000EE8  6F49               	movwf	main@pwmTemp& (0+255),b
  1701  000EEA  0E00               	movlw	0
  1702  000EEC  0102               	movlb	2	; () banked
  1703  000EEE  6F4A               	movwf	(main@pwmTemp+1)& (0+255),b
  1704  000EF0  0E00               	movlw	0
  1705  000EF2  0102               	movlb	2	; () banked
  1706  000EF4  6F4B               	movwf	(main@pwmTemp+2)& (0+255),b
  1707  000EF6                     l4235:
  1708                           
  1709                           ; BSR set to: 2
  1710                           ;main.c: 82: _pwm[3] = (unsigned char) pwmTemp;
  1711  000EF6  C249  F013         	movff	main@pwmTemp,___fttol@f1
  1712  000EFA  C24A  F014         	movff	main@pwmTemp+1,___fttol@f1+1
  1713  000EFE  C24B  F015         	movff	main@pwmTemp+2,___fttol@f1+2
  1714  000F02  ECA0  F011         	call	___fttol	;wreg free
  1715  000F06  5013               	movf	?___fttol,w,c
  1716  000F08  6E3E               	movwf	__pwm+3,c
  1717                           
  1718                           ;main.c: 83: pwmTemp = (u1/4 + u2/(2*l) + u4/(4*lambda));
  1719  000F0A  0E00               	movlw	0
  1720  000F0C  6E26               	movwf	___ftmul@f2,c
  1721  000F0E  0E00               	movlw	0
  1722  000F10  6E27               	movwf	___ftmul@f2+1,c
  1723  000F12  0E40               	movlw	64
  1724  000F14  6E28               	movwf	___ftmul@f2+2,c
  1725  000F16  C239  F023         	movff	main@l,___ftmul@f1
  1726  000F1A  C23A  F024         	movff	main@l+1,___ftmul@f1+1
  1727  000F1E  C23B  F025         	movff	main@l+2,___ftmul@f1+2
  1728  000F22  EC1A  F012         	call	___ftmul	;wreg free
  1729  000F26  C023  F035         	movff	?___ftmul,___ftdiv@f2
  1730  000F2A  C024  F036         	movff	?___ftmul+1,___ftdiv@f2+1
  1731  000F2E  C025  F037         	movff	?___ftmul+2,___ftdiv@f2+2
  1732  000F32  C233  F032         	movff	main@u2,___ftdiv@f1
  1733  000F36  C234  F033         	movff	main@u2+1,___ftdiv@f1+1
  1734  000F3A  C235  F034         	movff	main@u2+2,___ftdiv@f1+2
  1735  000F3E  EC1E  F011         	call	___ftdiv	;wreg free
  1736  000F42  C032  F0CE         	movff	?___ftdiv,___ftadd@f2
  1737  000F46  C033  F0CF         	movff	?___ftdiv+1,___ftadd@f2+1
  1738  000F4A  C034  F0D0         	movff	?___ftdiv+2,___ftadd@f2+2
  1739  000F4E  0E00               	movlw	0
  1740  000F50  6E35               	movwf	___ftdiv@f2,c
  1741  000F52  0E80               	movlw	128
  1742  000F54  6E36               	movwf	___ftdiv@f2+1,c
  1743  000F56  0E40               	movlw	64
  1744  000F58  6E37               	movwf	___ftdiv@f2+2,c
  1745  000F5A  C23F  F032         	movff	main@u1,___ftdiv@f1
  1746  000F5E  C240  F033         	movff	main@u1+1,___ftdiv@f1+1
  1747  000F62  C241  F034         	movff	main@u1+2,___ftdiv@f1+2
  1748  000F66  EC1E  F011         	call	___ftdiv	;wreg free
  1749  000F6A  C032  F0CB         	movff	?___ftdiv,___ftadd@f1
  1750  000F6E  C033  F0CC         	movff	?___ftdiv+1,___ftadd@f1+1
  1751  000F72  C034  F0CD         	movff	?___ftdiv+2,___ftadd@f1+2
  1752  000F76  ECE0  F00E         	call	___ftadd	;wreg free
  1753  000F7A  C0CB  F245         	movff	?___ftadd,_main$1983
  1754  000F7E  C0CC  F246         	movff	?___ftadd+1,_main$1983+1
  1755  000F82  C0CD  F247         	movff	?___ftadd+2,_main$1983+2
  1756                           
  1757                           ;main.c: 83: pwmTemp = (u1/4 + u2/(2*l) + u4/(4*lambda));
  1758  000F86  C245  F0CB         	movff	_main$1983,___ftadd@f1
  1759  000F8A  C246  F0CC         	movff	_main$1983+1,___ftadd@f1+1
  1760  000F8E  C247  F0CD         	movff	_main$1983+2,___ftadd@f1+2
  1761  000F92  0E00               	movlw	0
  1762  000F94  6E26               	movwf	___ftmul@f2,c
  1763  000F96  0E80               	movlw	128
  1764  000F98  6E27               	movwf	___ftmul@f2+1,c
  1765  000F9A  0E40               	movlw	64
  1766  000F9C  6E28               	movwf	___ftmul@f2+2,c
  1767  000F9E  C23C  F023         	movff	main@lambda,___ftmul@f1
  1768  000FA2  C23D  F024         	movff	main@lambda+1,___ftmul@f1+1
  1769  000FA6  C23E  F025         	movff	main@lambda+2,___ftmul@f1+2
  1770  000FAA  EC1A  F012         	call	___ftmul	;wreg free
  1771  000FAE  C023  F035         	movff	?___ftmul,___ftdiv@f2
  1772  000FB2  C024  F036         	movff	?___ftmul+1,___ftdiv@f2+1
  1773  000FB6  C025  F037         	movff	?___ftmul+2,___ftdiv@f2+2
  1774  000FBA  C242  F032         	movff	main@u4,___ftdiv@f1
  1775  000FBE  C243  F033         	movff	main@u4+1,___ftdiv@f1+1
  1776  000FC2  C244  F034         	movff	main@u4+2,___ftdiv@f1+2
  1777  000FC6  EC1E  F011         	call	___ftdiv	;wreg free
  1778  000FCA  C032  F0CE         	movff	?___ftdiv,___ftadd@f2
  1779  000FCE  C033  F0CF         	movff	?___ftdiv+1,___ftadd@f2+1
  1780  000FD2  C034  F0D0         	movff	?___ftdiv+2,___ftadd@f2+2
  1781  000FD6  ECE0  F00E         	call	___ftadd	;wreg free
  1782  000FDA  C0CB  F249         	movff	?___ftadd,main@pwmTemp
  1783  000FDE  C0CC  F24A         	movff	?___ftadd+1,main@pwmTemp+1
  1784  000FE2  C0CD  F24B         	movff	?___ftadd+2,main@pwmTemp+2
  1785                           
  1786                           ;main.c: 84: if(pwmTemp < 0)
  1787  000FE6  0102               	movlb	2	; () banked
  1788  000FE8  AF4B               	btfss	(main@pwmTemp+2)& (0+255),7,b
  1789  000FEA  D009               	goto	l4245
  1790                           
  1791                           ; BSR set to: 2
  1792                           ;main.c: 85: pwmTemp = 0;
  1793  000FEC  0E00               	movlw	0
  1794  000FEE  0102               	movlb	2	; () banked
  1795  000FF0  6F49               	movwf	main@pwmTemp& (0+255),b
  1796  000FF2  0E00               	movlw	0
  1797  000FF4  0102               	movlb	2	; () banked
  1798  000FF6  6F4A               	movwf	(main@pwmTemp+1)& (0+255),b
  1799  000FF8  0E00               	movlw	0
  1800  000FFA  0102               	movlb	2	; () banked
  1801  000FFC  6F4B               	movwf	(main@pwmTemp+2)& (0+255),b
  1802  000FFE                     l4245:
  1803                           
  1804                           ; BSR set to: 2
  1805                           ;main.c: 86: _pwm[2] = (unsigned char) pwmTemp;
  1806  000FFE  C249  F013         	movff	main@pwmTemp,___fttol@f1
  1807  001002  C24A  F014         	movff	main@pwmTemp+1,___fttol@f1+1
  1808  001006  C24B  F015         	movff	main@pwmTemp+2,___fttol@f1+2
  1809  00100A  ECA0  F011         	call	___fttol	;wreg free
  1810  00100E  5013               	movf	?___fttol,w,c
  1811  001010  6E3D               	movwf	__pwm+2,c
  1812                           
  1813                           ;main.c: 88: _delay((unsigned long)((10)*(48000000/4000.0))); _delay((unsigned long)((10
      +                          )*(48000000/4000.0))); _delay((unsigned long)((10)*(48000000/4000.0))); _delay((unsigned
      +                           long)((10)*(48000000/4000.0))); _delay((unsigned long)((10)*(48000000/4000.0))); _dela
  1814  001012  0E9C               	movlw	156
  1815  001014  0100               	movlb	0	; () banked
  1816  001016  6FE3               	movwf	??_main& (0+255),b
  1817  001018  0ED7               	movlw	215
  1818  00101A                     u4437:
  1819  00101A  2EE8               	decfsz	wreg,f,c
  1820  00101C  D7FE               	goto	u4437
  1821  00101E  2FE3               	decfsz	??_main& (0+255),f,b
  1822  001020  D7FC               	goto	u4437
  1823  001022  F000               	nop	
  1824  001024  0E9C               	movlw	156
  1825  001026  0100               	movlb	0	; () banked
  1826  001028  6FE3               	movwf	??_main& (0+255),b
  1827  00102A  0ED7               	movlw	215
  1828  00102C                     u4447:
  1829  00102C  2EE8               	decfsz	wreg,f,c
  1830  00102E  D7FE               	goto	u4447
  1831  001030  2FE3               	decfsz	??_main& (0+255),f,b
  1832  001032  D7FC               	goto	u4447
  1833  001034  F000               	nop	
  1834  001036  0E9C               	movlw	156
  1835  001038  0100               	movlb	0	; () banked
  1836  00103A  6FE3               	movwf	??_main& (0+255),b
  1837  00103C  0ED7               	movlw	215
  1838  00103E                     u4457:
  1839  00103E  2EE8               	decfsz	wreg,f,c
  1840  001040  D7FE               	goto	u4457
  1841  001042  2FE3               	decfsz	??_main& (0+255),f,b
  1842  001044  D7FC               	goto	u4457
  1843  001046  F000               	nop	
  1844  001048  0E9C               	movlw	156
  1845  00104A  0100               	movlb	0	; () banked
  1846  00104C  6FE3               	movwf	??_main& (0+255),b
  1847  00104E  0ED7               	movlw	215
  1848  001050                     u4467:
  1849  001050  2EE8               	decfsz	wreg,f,c
  1850  001052  D7FE               	goto	u4467
  1851  001054  2FE3               	decfsz	??_main& (0+255),f,b
  1852  001056  D7FC               	goto	u4467
  1853  001058  F000               	nop	
  1854  00105A  0E9C               	movlw	156
  1855  00105C  0100               	movlb	0	; () banked
  1856  00105E  6FE3               	movwf	??_main& (0+255),b
  1857  001060  0ED7               	movlw	215
  1858  001062                     u4477:
  1859  001062  2EE8               	decfsz	wreg,f,c
  1860  001064  D7FE               	goto	u4477
  1861  001066  2FE3               	decfsz	??_main& (0+255),f,b
  1862  001068  D7FC               	goto	u4477
  1863  00106A  F000               	nop	
  1864  00106C  0E9C               	movlw	156
  1865  00106E  0100               	movlb	0	; () banked
  1866  001070  6FE3               	movwf	??_main& (0+255),b
  1867  001072  0ED7               	movlw	215
  1868  001074                     u4487:
  1869  001074  2EE8               	decfsz	wreg,f,c
  1870  001076  D7FE               	goto	u4487
  1871  001078  2FE3               	decfsz	??_main& (0+255),f,b
  1872  00107A  D7FC               	goto	u4487
  1873  00107C  F000               	nop	
  1874                           
  1875                           ;main.c: 89: _delay((unsigned long)((10)*(48000000/4000.0))); _delay((unsigned long)((10
      +                          )*(48000000/4000.0))); _delay((unsigned long)((10)*(48000000/4000.0))); _delay((unsigned
      +                           long)((10)*(48000000/4000.0))); _delay((unsigned long)((10)*(48000000/4000.0))); _dela
  1876  00107E  0E9C               	movlw	156
  1877  001080  0100               	movlb	0	; () banked
  1878  001082  6FE3               	movwf	??_main& (0+255),b
  1879  001084  0ED7               	movlw	215
  1880  001086                     u4497:
  1881  001086  2EE8               	decfsz	wreg,f,c
  1882  001088  D7FE               	goto	u4497
  1883  00108A  2FE3               	decfsz	??_main& (0+255),f,b
  1884  00108C  D7FC               	goto	u4497
  1885  00108E  F000               	nop	
  1886  001090  0E9C               	movlw	156
  1887  001092  0100               	movlb	0	; () banked
  1888  001094  6FE3               	movwf	??_main& (0+255),b
  1889  001096  0ED7               	movlw	215
  1890  001098                     u4507:
  1891  001098  2EE8               	decfsz	wreg,f,c
  1892  00109A  D7FE               	goto	u4507
  1893  00109C  2FE3               	decfsz	??_main& (0+255),f,b
  1894  00109E  D7FC               	goto	u4507
  1895  0010A0  F000               	nop	
  1896  0010A2  0E9C               	movlw	156
  1897  0010A4  0100               	movlb	0	; () banked
  1898  0010A6  6FE3               	movwf	??_main& (0+255),b
  1899  0010A8  0ED7               	movlw	215
  1900  0010AA                     u4517:
  1901  0010AA  2EE8               	decfsz	wreg,f,c
  1902  0010AC  D7FE               	goto	u4517
  1903  0010AE  2FE3               	decfsz	??_main& (0+255),f,b
  1904  0010B0  D7FC               	goto	u4517
  1905  0010B2  F000               	nop	
  1906  0010B4  0E9C               	movlw	156
  1907  0010B6  0100               	movlb	0	; () banked
  1908  0010B8  6FE3               	movwf	??_main& (0+255),b
  1909  0010BA  0ED7               	movlw	215
  1910  0010BC                     u4527:
  1911  0010BC  2EE8               	decfsz	wreg,f,c
  1912  0010BE  D7FE               	goto	u4527
  1913  0010C0  2FE3               	decfsz	??_main& (0+255),f,b
  1914  0010C2  D7FC               	goto	u4527
  1915  0010C4  F000               	nop	
  1916  0010C6  0E9C               	movlw	156
  1917  0010C8  0100               	movlb	0	; () banked
  1918  0010CA  6FE3               	movwf	??_main& (0+255),b
  1919  0010CC  0ED7               	movlw	215
  1920  0010CE                     u4537:
  1921  0010CE  2EE8               	decfsz	wreg,f,c
  1922  0010D0  D7FE               	goto	u4537
  1923  0010D2  2FE3               	decfsz	??_main& (0+255),f,b
  1924  0010D4  D7FC               	goto	u4537
  1925  0010D6  F000               	nop	
  1926  0010D8  0E9C               	movlw	156
  1927  0010DA  0100               	movlb	0	; () banked
  1928  0010DC  6FE3               	movwf	??_main& (0+255),b
  1929  0010DE  0ED7               	movlw	215
  1930  0010E0                     u4547:
  1931  0010E0  2EE8               	decfsz	wreg,f,c
  1932  0010E2  D7FE               	goto	u4547
  1933  0010E4  2FE3               	decfsz	??_main& (0+255),f,b
  1934  0010E6  D7FC               	goto	u4547
  1935  0010E8  F000               	nop	
  1936  0010EA  D4E8               	goto	l4195
  1937  0010EC                     __end_of_main:
  1938                           	opt stack 0
  1939                           tblptru	equ	0xFF8
  1940                           tblptrh	equ	0xFF7
  1941                           tblptrl	equ	0xFF6
  1942                           tablat	equ	0xFF5
  1943                           postinc0	equ	0xFEE
  1944                           wreg	equ	0xFE8
  1945                           postdec1	equ	0xFE5
  1946                           fsr1l	equ	0xFE1
  1947                           
  1948 ;; *************** function _sensorInit *****************
  1949 ;; Defined at:
  1950 ;;		line 85 in file "ADXL345.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;		None
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;  i               1   27[BANK0 ] unsigned char 
  1955 ;; Return value:  Size  Location     Type
  1956 ;;                  1    wreg      void 
  1957 ;; Registers used:
  1958 ;;		wreg, status,2, status,0, cstack
  1959 ;; Tracked objects:
  1960 ;;		On entry : 0/0
  1961 ;;		On exit  : 0/0
  1962 ;;		Unchanged: 0/0
  1963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1964 ;;      Params:         0       0       0       0       0       0       0       0       0
  1965 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1966 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1967 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1968 ;;Total ram usage:        1 bytes
  1969 ;; Hardware stack levels used:    1
  1970 ;; Hardware stack levels required when called:    8
  1971 ;; This function calls:
  1972 ;;		_readAccelGiroValues
  1973 ;; This function is called by:
  1974 ;;		_main
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           	psect	text1
  1979  002028                     __ptext1:
  1980                           	opt stack 0
  1981  002028                     _sensorInit:
  1982                           	opt stack 22
  1983                           
  1984                           ;ADXL345.c: 87: accel.x = 0; accel.y = 0; accel.z = 0;
  1985                           
  1986                           ;incstack = 0
  1987  002028  0E00               	movlw	0
  1988  00202A  0100               	movlb	0	; () banked
  1989  00202C  6F60               	movwf	_accel& (0+255),b
  1990  00202E  0E00               	movlw	0
  1991  002030  0100               	movlb	0	; () banked
  1992  002032  6F61               	movwf	(_accel+1)& (0+255),b
  1993  002034  0E00               	movlw	0
  1994  002036  0100               	movlb	0	; () banked
  1995  002038  6F62               	movwf	(_accel+2)& (0+255),b
  1996  00203A  0E00               	movlw	0
  1997  00203C  0100               	movlb	0	; () banked
  1998  00203E  6F63               	movwf	(_accel+3)& (0+255),b
  1999  002040  0E00               	movlw	0
  2000  002042  0100               	movlb	0	; () banked
  2001  002044  6F64               	movwf	(_accel+4)& (0+255),b
  2002  002046  0E00               	movlw	0
  2003  002048  0100               	movlb	0	; () banked
  2004  00204A  6F65               	movwf	(_accel+5)& (0+255),b
  2005  00204C  0E00               	movlw	0
  2006  00204E  0100               	movlb	0	; () banked
  2007  002050  6F66               	movwf	(_accel+6)& (0+255),b
  2008  002052  0E00               	movlw	0
  2009  002054  0100               	movlb	0	; () banked
  2010  002056  6F67               	movwf	(_accel+7)& (0+255),b
  2011  002058  0E00               	movlw	0
  2012  00205A  0100               	movlb	0	; () banked
  2013  00205C  6F68               	movwf	(_accel+8)& (0+255),b
  2014                           
  2015                           ;ADXL345.c: 88: accelTemp.x = 0; accelTemp.y = 0; accelTemp.z = 0;
  2016  00205E  0E00               	movlw	0
  2017  002060  0100               	movlb	0	; () banked
  2018  002062  6F72               	movwf	_accelTemp& (0+255),b
  2019  002064  0E00               	movlw	0
  2020  002066  0100               	movlb	0	; () banked
  2021  002068  6F73               	movwf	(_accelTemp+1)& (0+255),b
  2022  00206A  0E00               	movlw	0
  2023  00206C  0100               	movlb	0	; () banked
  2024  00206E  6F74               	movwf	(_accelTemp+2)& (0+255),b
  2025  002070  0E00               	movlw	0
  2026  002072  0100               	movlb	0	; () banked
  2027  002074  6F75               	movwf	(_accelTemp+3)& (0+255),b
  2028  002076  0E00               	movlw	0
  2029  002078  0100               	movlb	0	; () banked
  2030  00207A  6F76               	movwf	(_accelTemp+4)& (0+255),b
  2031  00207C  0E00               	movlw	0
  2032  00207E  0100               	movlb	0	; () banked
  2033  002080  6F77               	movwf	(_accelTemp+5)& (0+255),b
  2034  002082  0E00               	movlw	0
  2035  002084  0100               	movlb	0	; () banked
  2036  002086  6F78               	movwf	(_accelTemp+6)& (0+255),b
  2037  002088  0E00               	movlw	0
  2038  00208A  0100               	movlb	0	; () banked
  2039  00208C  6F79               	movwf	(_accelTemp+7)& (0+255),b
  2040  00208E  0E00               	movlw	0
  2041  002090  0100               	movlb	0	; () banked
  2042  002092  6F7A               	movwf	(_accelTemp+8)& (0+255),b
  2043                           
  2044                           ;ADXL345.c: 89: giroTemp.x = 0; giroTemp.y = 0; giroTemp.z = 0;
  2045  002094  0E00               	movlw	0
  2046  002096  0100               	movlb	0	; () banked
  2047  002098  6F8D               	movwf	_giroTemp& (0+255),b
  2048  00209A  0E00               	movlw	0
  2049  00209C  0100               	movlb	0	; () banked
  2050  00209E  6F8E               	movwf	(_giroTemp+1)& (0+255),b
  2051  0020A0  0E00               	movlw	0
  2052  0020A2  0100               	movlb	0	; () banked
  2053  0020A4  6F8F               	movwf	(_giroTemp+2)& (0+255),b
  2054  0020A6  0E00               	movlw	0
  2055  0020A8  0100               	movlb	0	; () banked
  2056  0020AA  6F90               	movwf	(_giroTemp+3)& (0+255),b
  2057  0020AC  0E00               	movlw	0
  2058  0020AE  0100               	movlb	0	; () banked
  2059  0020B0  6F91               	movwf	(_giroTemp+4)& (0+255),b
  2060  0020B2  0E00               	movlw	0
  2061  0020B4  0100               	movlb	0	; () banked
  2062  0020B6  6F92               	movwf	(_giroTemp+5)& (0+255),b
  2063  0020B8  0E00               	movlw	0
  2064  0020BA  0100               	movlb	0	; () banked
  2065  0020BC  6F93               	movwf	(_giroTemp+6)& (0+255),b
  2066  0020BE  0E00               	movlw	0
  2067  0020C0  0100               	movlb	0	; () banked
  2068  0020C2  6F94               	movwf	(_giroTemp+7)& (0+255),b
  2069  0020C4  0E00               	movlw	0
  2070  0020C6  0100               	movlb	0	; () banked
  2071  0020C8  6F95               	movwf	(_giroTemp+8)& (0+255),b
  2072                           
  2073                           ;ADXL345.c: 90: giro.x = 0; giro.y = 0; giro.z = 0;
  2074  0020CA  0E00               	movlw	0
  2075  0020CC  0100               	movlb	0	; () banked
  2076  0020CE  6F7B               	movwf	_giro& (0+255),b
  2077  0020D0  0E00               	movlw	0
  2078  0020D2  0100               	movlb	0	; () banked
  2079  0020D4  6F7C               	movwf	(_giro+1)& (0+255),b
  2080  0020D6  0E00               	movlw	0
  2081  0020D8  0100               	movlb	0	; () banked
  2082  0020DA  6F7D               	movwf	(_giro+2)& (0+255),b
  2083  0020DC  0E00               	movlw	0
  2084  0020DE  0100               	movlb	0	; () banked
  2085  0020E0  6F7E               	movwf	(_giro+3)& (0+255),b
  2086  0020E2  0E00               	movlw	0
  2087  0020E4  0100               	movlb	0	; () banked
  2088  0020E6  6F7F               	movwf	(_giro+4)& (0+255),b
  2089  0020E8  0E00               	movlw	0
  2090  0020EA  0100               	movlb	0	; () banked
  2091  0020EC  6F80               	movwf	(_giro+5)& (0+255),b
  2092  0020EE  0E00               	movlw	0
  2093  0020F0  0100               	movlb	0	; () banked
  2094  0020F2  6F81               	movwf	(_giro+6)& (0+255),b
  2095  0020F4  0E00               	movlw	0
  2096  0020F6  0100               	movlb	0	; () banked
  2097  0020F8  6F82               	movwf	(_giro+7)& (0+255),b
  2098  0020FA  0E00               	movlw	0
  2099  0020FC  0100               	movlb	0	; () banked
  2100  0020FE  6F83               	movwf	(_giro+8)& (0+255),b
  2101                           
  2102                           ;ADXL345.c: 91: vel.x = 0; vel.y = 0; vel.z = 0;
  2103  002100  0E00               	movlw	0
  2104  002102  0100               	movlb	0	; () banked
  2105  002104  6F9F               	movwf	_vel& (0+255),b
  2106  002106  0E00               	movlw	0
  2107  002108  0100               	movlb	0	; () banked
  2108  00210A  6FA0               	movwf	(_vel+1)& (0+255),b
  2109  00210C  0E00               	movlw	0
  2110  00210E  0100               	movlb	0	; () banked
  2111  002110  6FA1               	movwf	(_vel+2)& (0+255),b
  2112  002112  0E00               	movlw	0
  2113  002114  0100               	movlb	0	; () banked
  2114  002116  6FA2               	movwf	(_vel+3)& (0+255),b
  2115  002118  0E00               	movlw	0
  2116  00211A  0100               	movlb	0	; () banked
  2117  00211C  6FA3               	movwf	(_vel+4)& (0+255),b
  2118  00211E  0E00               	movlw	0
  2119  002120  0100               	movlb	0	; () banked
  2120  002122  6FA4               	movwf	(_vel+5)& (0+255),b
  2121  002124  0E00               	movlw	0
  2122  002126  0100               	movlb	0	; () banked
  2123  002128  6FA5               	movwf	(_vel+6)& (0+255),b
  2124  00212A  0E00               	movlw	0
  2125  00212C  0100               	movlb	0	; () banked
  2126  00212E  6FA6               	movwf	(_vel+7)& (0+255),b
  2127  002130  0E00               	movlw	0
  2128  002132  0100               	movlb	0	; () banked
  2129  002134  6FA7               	movwf	(_vel+8)& (0+255),b
  2130                           
  2131                           ;ADXL345.c: 92: pos.x = 0; pos.y = 0; pos.z = 0;
  2132  002136  0E00               	movlw	0
  2133  002138  0100               	movlb	0	; () banked
  2134  00213A  6F96               	movwf	_pos& (0+255),b
  2135  00213C  0E00               	movlw	0
  2136  00213E  0100               	movlb	0	; () banked
  2137  002140  6F97               	movwf	(_pos+1)& (0+255),b
  2138  002142  0E00               	movlw	0
  2139  002144  0100               	movlb	0	; () banked
  2140  002146  6F98               	movwf	(_pos+2)& (0+255),b
  2141  002148  0E00               	movlw	0
  2142  00214A  0100               	movlb	0	; () banked
  2143  00214C  6F99               	movwf	(_pos+3)& (0+255),b
  2144  00214E  0E00               	movlw	0
  2145  002150  0100               	movlb	0	; () banked
  2146  002152  6F9A               	movwf	(_pos+4)& (0+255),b
  2147  002154  0E00               	movlw	0
  2148  002156  0100               	movlb	0	; () banked
  2149  002158  6F9B               	movwf	(_pos+5)& (0+255),b
  2150  00215A  0E00               	movlw	0
  2151  00215C  0100               	movlb	0	; () banked
  2152  00215E  6F9C               	movwf	(_pos+6)& (0+255),b
  2153  002160  0E00               	movlw	0
  2154  002162  0100               	movlb	0	; () banked
  2155  002164  6F9D               	movwf	(_pos+7)& (0+255),b
  2156  002166  0E00               	movlw	0
  2157  002168  0100               	movlb	0	; () banked
  2158  00216A  6F9E               	movwf	(_pos+8)& (0+255),b
  2159                           
  2160                           ;ADXL345.c: 93: accelBias.x = 0; accelBias.y = 0; accelBias.z = 0;
  2161  00216C  0E00               	movlw	0
  2162  00216E  0100               	movlb	0	; () banked
  2163  002170  6F69               	movwf	_accelBias& (0+255),b
  2164  002172  0E00               	movlw	0
  2165  002174  0100               	movlb	0	; () banked
  2166  002176  6F6A               	movwf	(_accelBias+1)& (0+255),b
  2167  002178  0E00               	movlw	0
  2168  00217A  0100               	movlb	0	; () banked
  2169  00217C  6F6B               	movwf	(_accelBias+2)& (0+255),b
  2170  00217E  0E00               	movlw	0
  2171  002180  0100               	movlb	0	; () banked
  2172  002182  6F6C               	movwf	(_accelBias+3)& (0+255),b
  2173  002184  0E00               	movlw	0
  2174  002186  0100               	movlb	0	; () banked
  2175  002188  6F6D               	movwf	(_accelBias+4)& (0+255),b
  2176  00218A  0E00               	movlw	0
  2177  00218C  0100               	movlb	0	; () banked
  2178  00218E  6F6E               	movwf	(_accelBias+5)& (0+255),b
  2179  002190  0E00               	movlw	0
  2180  002192  0100               	movlb	0	; () banked
  2181  002194  6F6F               	movwf	(_accelBias+6)& (0+255),b
  2182  002196  0E00               	movlw	0
  2183  002198  0100               	movlb	0	; () banked
  2184  00219A  6F70               	movwf	(_accelBias+7)& (0+255),b
  2185  00219C  0E00               	movlw	0
  2186  00219E  0100               	movlb	0	; () banked
  2187  0021A0  6F71               	movwf	(_accelBias+8)& (0+255),b
  2188                           
  2189                           ;ADXL345.c: 94: giroBias.x = 0; giroBias.y = 0; giroBias.z = 0;
  2190  0021A2  0E00               	movlw	0
  2191  0021A4  0100               	movlb	0	; () banked
  2192  0021A6  6F84               	movwf	_giroBias& (0+255),b
  2193  0021A8  0E00               	movlw	0
  2194  0021AA  0100               	movlb	0	; () banked
  2195  0021AC  6F85               	movwf	(_giroBias+1)& (0+255),b
  2196  0021AE  0E00               	movlw	0
  2197  0021B0  0100               	movlb	0	; () banked
  2198  0021B2  6F86               	movwf	(_giroBias+2)& (0+255),b
  2199  0021B4  0E00               	movlw	0
  2200  0021B6  0100               	movlb	0	; () banked
  2201  0021B8  6F87               	movwf	(_giroBias+3)& (0+255),b
  2202  0021BA  0E00               	movlw	0
  2203  0021BC  0100               	movlb	0	; () banked
  2204  0021BE  6F88               	movwf	(_giroBias+4)& (0+255),b
  2205  0021C0  0E00               	movlw	0
  2206  0021C2  0100               	movlb	0	; () banked
  2207  0021C4  6F89               	movwf	(_giroBias+5)& (0+255),b
  2208  0021C6  0E00               	movlw	0
  2209  0021C8  0100               	movlb	0	; () banked
  2210  0021CA  6F8A               	movwf	(_giroBias+6)& (0+255),b
  2211  0021CC  0E00               	movlw	0
  2212  0021CE  0100               	movlb	0	; () banked
  2213  0021D0  6F8B               	movwf	(_giroBias+7)& (0+255),b
  2214  0021D2  0E00               	movlw	0
  2215  0021D4  0100               	movlb	0	; () banked
  2216  0021D6  6F8C               	movwf	(_giroBias+8)& (0+255),b
  2217                           
  2218                           ;ADXL345.c: 96: for(unsigned char i = 0; i < 200; ++i)
  2219  0021D8  0E00               	movlw	0
  2220  0021DA  0100               	movlb	0	; () banked
  2221  0021DC  6FDD               	movwf	sensorInit@i& (0+255),b
  2222  0021DE                     l3983:
  2223                           
  2224                           ; BSR set to: 0
  2225  0021DE  0EC7               	movlw	199
  2226  0021E0  0100               	movlb	0	; () banked
  2227  0021E2  65DD               	cpfsgt	sensorInit@i& (0+255),b
  2228  0021E4  D001               	goto	l3987
  2229  0021E6  D005               	goto	l112
  2230  0021E8                     l3987:
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;ADXL345.c: 97: readAccelGiroValues();
  2234  0021E8  EC76  F008         	call	_readAccelGiroValues	;wreg free
  2235  0021EC  0100               	movlb	0	; () banked
  2236  0021EE  2BDD               	incf	sensorInit@i& (0+255),f,b
  2237  0021F0  D7F6               	goto	l3983
  2238  0021F2                     l112:
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;ADXL345.c: 99: accelBias.x = accelTemp.x;
  2242  0021F2  C072  F069         	movff	_accelTemp,_accelBias
  2243  0021F6  C073  F06A         	movff	_accelTemp+1,_accelBias+1
  2244  0021FA  C074  F06B         	movff	_accelTemp+2,_accelBias+2
  2245                           
  2246                           ;ADXL345.c: 100: accelBias.y = accelTemp.y;
  2247  0021FE  C075  F06C         	movff	_accelTemp+3,_accelBias+3
  2248  002202  C076  F06D         	movff	_accelTemp+4,_accelBias+4
  2249  002206  C077  F06E         	movff	_accelTemp+5,_accelBias+5
  2250                           
  2251                           ;ADXL345.c: 101: accelBias.z = accelTemp.z;
  2252  00220A  C078  F06F         	movff	_accelTemp+6,_accelBias+6
  2253  00220E  C079  F070         	movff	_accelTemp+7,_accelBias+7
  2254  002212  C07A  F071         	movff	_accelTemp+8,_accelBias+8
  2255                           
  2256                           ;ADXL345.c: 103: giroBias.x = giroTemp.x;
  2257  002216  C08D  F084         	movff	_giroTemp,_giroBias
  2258  00221A  C08E  F085         	movff	_giroTemp+1,_giroBias+1
  2259  00221E  C08F  F086         	movff	_giroTemp+2,_giroBias+2
  2260                           
  2261                           ;ADXL345.c: 104: giroBias.y = giroTemp.y;
  2262  002222  C090  F087         	movff	_giroTemp+3,_giroBias+3
  2263  002226  C091  F088         	movff	_giroTemp+4,_giroBias+4
  2264  00222A  C092  F089         	movff	_giroTemp+5,_giroBias+5
  2265                           
  2266                           ;ADXL345.c: 105: giroBias.z = giroTemp.z;
  2267  00222E  C093  F08A         	movff	_giroTemp+6,_giroBias+6
  2268  002232  C094  F08B         	movff	_giroTemp+7,_giroBias+7
  2269  002236  C095  F08C         	movff	_giroTemp+8,_giroBias+8
  2270                           
  2271                           ; BSR set to: 0
  2272  00223A  0012               	return		;funcret
  2273  00223C                     __end_of_sensorInit:
  2274                           	opt stack 0
  2275                           tblptru	equ	0xFF8
  2276                           tblptrh	equ	0xFF7
  2277                           tblptrl	equ	0xFF6
  2278                           tablat	equ	0xFF5
  2279                           postinc0	equ	0xFEE
  2280                           wreg	equ	0xFE8
  2281                           postdec1	equ	0xFE5
  2282                           fsr1l	equ	0xFE1
  2283                           
  2284 ;; *************** function _readAccelGiroValues *****************
  2285 ;; Defined at:
  2286 ;;		line 108 in file "ADXL345.c"
  2287 ;; Parameters:    Size  Location     Type
  2288 ;;		None
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;		None
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  1    wreg      void 
  2293 ;; Registers used:
  2294 ;;		wreg, status,2, status,0, cstack
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2300 ;;      Params:         0       0       0       0       0       0       0       0       0
  2301 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2302 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2303 ;;      Totals:         0       6       0       0       0       0       0       0       0
  2304 ;;Total ram usage:        6 bytes
  2305 ;; Hardware stack levels used:    1
  2306 ;; Hardware stack levels required when called:    7
  2307 ;; This function calls:
  2308 ;;		___awdiv
  2309 ;;		___awtoft
  2310 ;;		___ftadd
  2311 ;;		___ftmul
  2312 ;;		___ftneg
  2313 ;;		_readACC
  2314 ;;		_readGIRO
  2315 ;; This function is called by:
  2316 ;;		_sensorInit
  2317 ;;		_main
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320                           
  2321                           	psect	text2
  2322  0010EC                     __ptext2:
  2323                           	opt stack 0
  2324  0010EC                     _readAccelGiroValues:
  2325                           	opt stack 22
  2326                           
  2327                           ;ADXL345.c: 110: accelTemp.x += filtro*((readACC(0x32) + readACC(0x33)<<8)/256 - accelTe
      +                          mp.x);
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;incstack = 0
  2331  0010EC  C0E7  F026         	movff	_filtro,___ftmul@f2
  2332  0010F0  C0E8  F027         	movff	_filtro+1,___ftmul@f2+1
  2333  0010F4  C0E9  F028         	movff	_filtro+2,___ftmul@f2+2
  2334  0010F8  C072  F0C8         	movff	_accelTemp,___ftneg@f1
  2335  0010FC  C073  F0C9         	movff	_accelTemp+1,___ftneg@f1+1
  2336  001100  C074  F0CA         	movff	_accelTemp+2,___ftneg@f1+2
  2337  001104  ECA1  F015         	call	___ftneg	;wreg free
  2338  001108  C0C8  F0CE         	movff	?___ftneg,___ftadd@f2
  2339  00110C  C0C9  F0CF         	movff	?___ftneg+1,___ftadd@f2+1
  2340  001110  C0CA  F0D0         	movff	?___ftneg+2,___ftadd@f2+2
  2341  001114  0E01               	movlw	1
  2342  001116  6E1A               	movwf	___awdiv@divisor+1,c
  2343  001118  0E00               	movlw	0
  2344  00111A  6E19               	movwf	___awdiv@divisor,c
  2345  00111C  0E32               	movlw	50
  2346  00111E  EC4A  F015         	call	_readACC
  2347  001122  0100               	movlb	0	; () banked
  2348  001124  6FD7               	movwf	??_readAccelGiroValues& (0+255),b
  2349  001126  6BD8               	clrf	(??_readAccelGiroValues+1)& (0+255),b
  2350  001128  0E33               	movlw	51
  2351  00112A  EC4A  F015         	call	_readACC
  2352  00112E  0100               	movlb	0	; () banked
  2353  001130  6FD9               	movwf	(??_readAccelGiroValues+2)& (0+255),b
  2354  001132  0100               	movlb	0	; () banked
  2355  001134  51D9               	movf	(??_readAccelGiroValues+2)& (0+255),w,b
  2356  001136  0100               	movlb	0	; () banked
  2357  001138  27D7               	addwf	??_readAccelGiroValues& (0+255),f,b
  2358  00113A  0E00               	movlw	0
  2359  00113C  23D8               	addwfc	(??_readAccelGiroValues+1)& (0+255),f,b
  2360  00113E  C0D7  F0D8         	movff	??_readAccelGiroValues,??_readAccelGiroValues+1
  2361  001142  0100               	movlb	0	; () banked
  2362  001144  6BD7               	clrf	??_readAccelGiroValues& (0+255),b
  2363  001146  C0D7  F017         	movff	??_readAccelGiroValues,___awdiv@dividend
  2364  00114A  C0D8  F018         	movff	??_readAccelGiroValues+1,___awdiv@dividend+1
  2365  00114E  ECF0  F013         	call	___awdiv	;wreg free
  2366  001152  C017  F01F         	movff	?___awdiv,___awtoft@c
  2367  001156  C018  F020         	movff	?___awdiv+1,___awtoft@c+1
  2368  00115A  EC6C  F015         	call	___awtoft	;wreg free
  2369  00115E  C01F  F0CB         	movff	?___awtoft,___ftadd@f1
  2370  001162  C020  F0CC         	movff	?___awtoft+1,___ftadd@f1+1
  2371  001166  C021  F0CD         	movff	?___awtoft+2,___ftadd@f1+2
  2372  00116A  ECE0  F00E         	call	___ftadd	;wreg free
  2373  00116E  C0CB  F023         	movff	?___ftadd,___ftmul@f1
  2374  001172  C0CC  F024         	movff	?___ftadd+1,___ftmul@f1+1
  2375  001176  C0CD  F025         	movff	?___ftadd+2,___ftmul@f1+2
  2376  00117A  EC1A  F012         	call	___ftmul	;wreg free
  2377  00117E  C023  F0DA         	movff	?___ftmul,_readAccelGiroValues$1982
  2378  001182  C024  F0DB         	movff	?___ftmul+1,_readAccelGiroValues$1982+1
  2379  001186  C025  F0DC         	movff	?___ftmul+2,_readAccelGiroValues$1982+2
  2380                           
  2381                           ;ADXL345.c: 110: accelTemp.x += filtro*((readACC(0x32) + readACC(0x33)<<8)/256 - accelTe
      +                          mp.x);
  2382  00118A  C072  F0CB         	movff	_accelTemp,___ftadd@f1
  2383  00118E  C073  F0CC         	movff	_accelTemp+1,___ftadd@f1+1
  2384  001192  C074  F0CD         	movff	_accelTemp+2,___ftadd@f1+2
  2385  001196  C0DA  F0CE         	movff	_readAccelGiroValues$1982,___ftadd@f2
  2386  00119A  C0DB  F0CF         	movff	_readAccelGiroValues$1982+1,___ftadd@f2+1
  2387  00119E  C0DC  F0D0         	movff	_readAccelGiroValues$1982+2,___ftadd@f2+2
  2388  0011A2  ECE0  F00E         	call	___ftadd	;wreg free
  2389  0011A6  C0CB  F072         	movff	?___ftadd,_accelTemp
  2390  0011AA  C0CC  F073         	movff	?___ftadd+1,_accelTemp+1
  2391  0011AE  C0CD  F074         	movff	?___ftadd+2,_accelTemp+2
  2392                           
  2393                           ;ADXL345.c: 111: accelTemp.y += filtro*((readACC(0x34) + readACC(0x35)<<8)/256 - accelTe
      +                          mp.y);
  2394  0011B2  C0E7  F026         	movff	_filtro,___ftmul@f2
  2395  0011B6  C0E8  F027         	movff	_filtro+1,___ftmul@f2+1
  2396  0011BA  C0E9  F028         	movff	_filtro+2,___ftmul@f2+2
  2397  0011BE  C075  F0C8         	movff	_accelTemp+3,___ftneg@f1
  2398  0011C2  C076  F0C9         	movff	_accelTemp+4,___ftneg@f1+1
  2399  0011C6  C077  F0CA         	movff	_accelTemp+5,___ftneg@f1+2
  2400  0011CA  ECA1  F015         	call	___ftneg	;wreg free
  2401  0011CE  C0C8  F0CE         	movff	?___ftneg,___ftadd@f2
  2402  0011D2  C0C9  F0CF         	movff	?___ftneg+1,___ftadd@f2+1
  2403  0011D6  C0CA  F0D0         	movff	?___ftneg+2,___ftadd@f2+2
  2404  0011DA  0E01               	movlw	1
  2405  0011DC  6E1A               	movwf	___awdiv@divisor+1,c
  2406  0011DE  0E00               	movlw	0
  2407  0011E0  6E19               	movwf	___awdiv@divisor,c
  2408  0011E2  0E34               	movlw	52
  2409  0011E4  EC4A  F015         	call	_readACC
  2410  0011E8  0100               	movlb	0	; () banked
  2411  0011EA  6FD7               	movwf	??_readAccelGiroValues& (0+255),b
  2412  0011EC  6BD8               	clrf	(??_readAccelGiroValues+1)& (0+255),b
  2413  0011EE  0E35               	movlw	53
  2414  0011F0  EC4A  F015         	call	_readACC
  2415  0011F4  0100               	movlb	0	; () banked
  2416  0011F6  6FD9               	movwf	(??_readAccelGiroValues+2)& (0+255),b
  2417  0011F8  0100               	movlb	0	; () banked
  2418  0011FA  51D9               	movf	(??_readAccelGiroValues+2)& (0+255),w,b
  2419  0011FC  0100               	movlb	0	; () banked
  2420  0011FE  27D7               	addwf	??_readAccelGiroValues& (0+255),f,b
  2421  001200  0E00               	movlw	0
  2422  001202  23D8               	addwfc	(??_readAccelGiroValues+1)& (0+255),f,b
  2423  001204  C0D7  F0D8         	movff	??_readAccelGiroValues,??_readAccelGiroValues+1
  2424  001208  0100               	movlb	0	; () banked
  2425  00120A  6BD7               	clrf	??_readAccelGiroValues& (0+255),b
  2426  00120C  C0D7  F017         	movff	??_readAccelGiroValues,___awdiv@dividend
  2427  001210  C0D8  F018         	movff	??_readAccelGiroValues+1,___awdiv@dividend+1
  2428  001214  ECF0  F013         	call	___awdiv	;wreg free
  2429  001218  C017  F01F         	movff	?___awdiv,___awtoft@c
  2430  00121C  C018  F020         	movff	?___awdiv+1,___awtoft@c+1
  2431  001220  EC6C  F015         	call	___awtoft	;wreg free
  2432  001224  C01F  F0CB         	movff	?___awtoft,___ftadd@f1
  2433  001228  C020  F0CC         	movff	?___awtoft+1,___ftadd@f1+1
  2434  00122C  C021  F0CD         	movff	?___awtoft+2,___ftadd@f1+2
  2435  001230  ECE0  F00E         	call	___ftadd	;wreg free
  2436  001234  C0CB  F023         	movff	?___ftadd,___ftmul@f1
  2437  001238  C0CC  F024         	movff	?___ftadd+1,___ftmul@f1+1
  2438  00123C  C0CD  F025         	movff	?___ftadd+2,___ftmul@f1+2
  2439  001240  EC1A  F012         	call	___ftmul	;wreg free
  2440  001244  C023  F0DA         	movff	?___ftmul,_readAccelGiroValues$1982
  2441  001248  C024  F0DB         	movff	?___ftmul+1,_readAccelGiroValues$1982+1
  2442  00124C  C025  F0DC         	movff	?___ftmul+2,_readAccelGiroValues$1982+2
  2443                           
  2444                           ;ADXL345.c: 111: accelTemp.y += filtro*((readACC(0x34) + readACC(0x35)<<8)/256 - accelTe
      +                          mp.y);
  2445  001250  C075  F0CB         	movff	_accelTemp+3,___ftadd@f1
  2446  001254  C076  F0CC         	movff	_accelTemp+4,___ftadd@f1+1
  2447  001258  C077  F0CD         	movff	_accelTemp+5,___ftadd@f1+2
  2448  00125C  C0DA  F0CE         	movff	_readAccelGiroValues$1982,___ftadd@f2
  2449  001260  C0DB  F0CF         	movff	_readAccelGiroValues$1982+1,___ftadd@f2+1
  2450  001264  C0DC  F0D0         	movff	_readAccelGiroValues$1982+2,___ftadd@f2+2
  2451  001268  ECE0  F00E         	call	___ftadd	;wreg free
  2452  00126C  C0CB  F075         	movff	?___ftadd,_accelTemp+3
  2453  001270  C0CC  F076         	movff	?___ftadd+1,_accelTemp+4
  2454  001274  C0CD  F077         	movff	?___ftadd+2,_accelTemp+5
  2455                           
  2456                           ;ADXL345.c: 112: accelTemp.z += filtro*((readACC(0x36) + readACC(0x37)<<8)/256 - accelTe
      +                          mp.z);
  2457  001278  C0E7  F026         	movff	_filtro,___ftmul@f2
  2458  00127C  C0E8  F027         	movff	_filtro+1,___ftmul@f2+1
  2459  001280  C0E9  F028         	movff	_filtro+2,___ftmul@f2+2
  2460  001284  C078  F0C8         	movff	_accelTemp+6,___ftneg@f1
  2461  001288  C079  F0C9         	movff	_accelTemp+7,___ftneg@f1+1
  2462  00128C  C07A  F0CA         	movff	_accelTemp+8,___ftneg@f1+2
  2463  001290  ECA1  F015         	call	___ftneg	;wreg free
  2464  001294  C0C8  F0CE         	movff	?___ftneg,___ftadd@f2
  2465  001298  C0C9  F0CF         	movff	?___ftneg+1,___ftadd@f2+1
  2466  00129C  C0CA  F0D0         	movff	?___ftneg+2,___ftadd@f2+2
  2467  0012A0  0E01               	movlw	1
  2468  0012A2  6E1A               	movwf	___awdiv@divisor+1,c
  2469  0012A4  0E00               	movlw	0
  2470  0012A6  6E19               	movwf	___awdiv@divisor,c
  2471  0012A8  0E36               	movlw	54
  2472  0012AA  EC4A  F015         	call	_readACC
  2473  0012AE  0100               	movlb	0	; () banked
  2474  0012B0  6FD7               	movwf	??_readAccelGiroValues& (0+255),b
  2475  0012B2  6BD8               	clrf	(??_readAccelGiroValues+1)& (0+255),b
  2476  0012B4  0E37               	movlw	55
  2477  0012B6  EC4A  F015         	call	_readACC
  2478  0012BA  0100               	movlb	0	; () banked
  2479  0012BC  6FD9               	movwf	(??_readAccelGiroValues+2)& (0+255),b
  2480  0012BE  0100               	movlb	0	; () banked
  2481  0012C0  51D9               	movf	(??_readAccelGiroValues+2)& (0+255),w,b
  2482  0012C2  0100               	movlb	0	; () banked
  2483  0012C4  27D7               	addwf	??_readAccelGiroValues& (0+255),f,b
  2484  0012C6  0E00               	movlw	0
  2485  0012C8  23D8               	addwfc	(??_readAccelGiroValues+1)& (0+255),f,b
  2486  0012CA  C0D7  F0D8         	movff	??_readAccelGiroValues,??_readAccelGiroValues+1
  2487  0012CE  0100               	movlb	0	; () banked
  2488  0012D0  6BD7               	clrf	??_readAccelGiroValues& (0+255),b
  2489  0012D2  C0D7  F017         	movff	??_readAccelGiroValues,___awdiv@dividend
  2490  0012D6  C0D8  F018         	movff	??_readAccelGiroValues+1,___awdiv@dividend+1
  2491  0012DA  ECF0  F013         	call	___awdiv	;wreg free
  2492  0012DE  C017  F01F         	movff	?___awdiv,___awtoft@c
  2493  0012E2  C018  F020         	movff	?___awdiv+1,___awtoft@c+1
  2494  0012E6  EC6C  F015         	call	___awtoft	;wreg free
  2495  0012EA  C01F  F0CB         	movff	?___awtoft,___ftadd@f1
  2496  0012EE  C020  F0CC         	movff	?___awtoft+1,___ftadd@f1+1
  2497  0012F2  C021  F0CD         	movff	?___awtoft+2,___ftadd@f1+2
  2498  0012F6  ECE0  F00E         	call	___ftadd	;wreg free
  2499  0012FA  C0CB  F023         	movff	?___ftadd,___ftmul@f1
  2500  0012FE  C0CC  F024         	movff	?___ftadd+1,___ftmul@f1+1
  2501  001302  C0CD  F025         	movff	?___ftadd+2,___ftmul@f1+2
  2502  001306  EC1A  F012         	call	___ftmul	;wreg free
  2503  00130A  C023  F0DA         	movff	?___ftmul,_readAccelGiroValues$1982
  2504  00130E  C024  F0DB         	movff	?___ftmul+1,_readAccelGiroValues$1982+1
  2505  001312  C025  F0DC         	movff	?___ftmul+2,_readAccelGiroValues$1982+2
  2506                           
  2507                           ;ADXL345.c: 112: accelTemp.z += filtro*((readACC(0x36) + readACC(0x37)<<8)/256 - accelTe
      +                          mp.z);
  2508  001316  C078  F0CB         	movff	_accelTemp+6,___ftadd@f1
  2509  00131A  C079  F0CC         	movff	_accelTemp+7,___ftadd@f1+1
  2510  00131E  C07A  F0CD         	movff	_accelTemp+8,___ftadd@f1+2
  2511  001322  C0DA  F0CE         	movff	_readAccelGiroValues$1982,___ftadd@f2
  2512  001326  C0DB  F0CF         	movff	_readAccelGiroValues$1982+1,___ftadd@f2+1
  2513  00132A  C0DC  F0D0         	movff	_readAccelGiroValues$1982+2,___ftadd@f2+2
  2514  00132E  ECE0  F00E         	call	___ftadd	;wreg free
  2515  001332  C0CB  F078         	movff	?___ftadd,_accelTemp+6
  2516  001336  C0CC  F079         	movff	?___ftadd+1,_accelTemp+7
  2517  00133A  C0CD  F07A         	movff	?___ftadd+2,_accelTemp+8
  2518                           
  2519                           ;ADXL345.c: 114: accel.x = accel.x - accelTemp.x;
  2520  00133E  C072  F0C8         	movff	_accelTemp,___ftneg@f1
  2521  001342  C073  F0C9         	movff	_accelTemp+1,___ftneg@f1+1
  2522  001346  C074  F0CA         	movff	_accelTemp+2,___ftneg@f1+2
  2523  00134A  ECA1  F015         	call	___ftneg	;wreg free
  2524  00134E  C0C8  F0CB         	movff	?___ftneg,___ftadd@f1
  2525  001352  C0C9  F0CC         	movff	?___ftneg+1,___ftadd@f1+1
  2526  001356  C0CA  F0CD         	movff	?___ftneg+2,___ftadd@f1+2
  2527  00135A  C060  F0CE         	movff	_accel,___ftadd@f2
  2528  00135E  C061  F0CF         	movff	_accel+1,___ftadd@f2+1
  2529  001362  C062  F0D0         	movff	_accel+2,___ftadd@f2+2
  2530  001366  ECE0  F00E         	call	___ftadd	;wreg free
  2531  00136A  C0CB  F060         	movff	?___ftadd,_accel
  2532  00136E  C0CC  F061         	movff	?___ftadd+1,_accel+1
  2533  001372  C0CD  F062         	movff	?___ftadd+2,_accel+2
  2534                           
  2535                           ;ADXL345.c: 115: accel.y = accel.y - accelTemp.y;
  2536  001376  C075  F0C8         	movff	_accelTemp+3,___ftneg@f1
  2537  00137A  C076  F0C9         	movff	_accelTemp+4,___ftneg@f1+1
  2538  00137E  C077  F0CA         	movff	_accelTemp+5,___ftneg@f1+2
  2539  001382  ECA1  F015         	call	___ftneg	;wreg free
  2540  001386  C0C8  F0CB         	movff	?___ftneg,___ftadd@f1
  2541  00138A  C0C9  F0CC         	movff	?___ftneg+1,___ftadd@f1+1
  2542  00138E  C0CA  F0CD         	movff	?___ftneg+2,___ftadd@f1+2
  2543  001392  C063  F0CE         	movff	_accel+3,___ftadd@f2
  2544  001396  C064  F0CF         	movff	_accel+4,___ftadd@f2+1
  2545  00139A  C065  F0D0         	movff	_accel+5,___ftadd@f2+2
  2546  00139E  ECE0  F00E         	call	___ftadd	;wreg free
  2547  0013A2  C0CB  F063         	movff	?___ftadd,_accel+3
  2548  0013A6  C0CC  F064         	movff	?___ftadd+1,_accel+4
  2549  0013AA  C0CD  F065         	movff	?___ftadd+2,_accel+5
  2550                           
  2551                           ;ADXL345.c: 116: accel.z = accel.z - accelTemp.z;
  2552  0013AE  C078  F0C8         	movff	_accelTemp+6,___ftneg@f1
  2553  0013B2  C079  F0C9         	movff	_accelTemp+7,___ftneg@f1+1
  2554  0013B6  C07A  F0CA         	movff	_accelTemp+8,___ftneg@f1+2
  2555  0013BA  ECA1  F015         	call	___ftneg	;wreg free
  2556  0013BE  C0C8  F0CB         	movff	?___ftneg,___ftadd@f1
  2557  0013C2  C0C9  F0CC         	movff	?___ftneg+1,___ftadd@f1+1
  2558  0013C6  C0CA  F0CD         	movff	?___ftneg+2,___ftadd@f1+2
  2559  0013CA  C066  F0CE         	movff	_accel+6,___ftadd@f2
  2560  0013CE  C067  F0CF         	movff	_accel+7,___ftadd@f2+1
  2561  0013D2  C068  F0D0         	movff	_accel+8,___ftadd@f2+2
  2562  0013D6  ECE0  F00E         	call	___ftadd	;wreg free
  2563  0013DA  C0CB  F066         	movff	?___ftadd,_accel+6
  2564  0013DE  C0CC  F067         	movff	?___ftadd+1,_accel+7
  2565  0013E2  C0CD  F068         	movff	?___ftadd+2,_accel+8
  2566                           
  2567                           ;ADXL345.c: 118: vel.x += h*accel.x;
  2568  0013E6  C09F  F0CB         	movff	_vel,___ftadd@f1
  2569  0013EA  C0A0  F0CC         	movff	_vel+1,___ftadd@f1+1
  2570  0013EE  C0A1  F0CD         	movff	_vel+2,___ftadd@f1+2
  2571  0013F2  C0EA  F026         	movff	_h,___ftmul@f2
  2572  0013F6  C0EB  F027         	movff	_h+1,___ftmul@f2+1
  2573  0013FA  C0EC  F028         	movff	_h+2,___ftmul@f2+2
  2574  0013FE  C060  F023         	movff	_accel,___ftmul@f1
  2575  001402  C061  F024         	movff	_accel+1,___ftmul@f1+1
  2576  001406  C062  F025         	movff	_accel+2,___ftmul@f1+2
  2577  00140A  EC1A  F012         	call	___ftmul	;wreg free
  2578  00140E  C023  F0CE         	movff	?___ftmul,___ftadd@f2
  2579  001412  C024  F0CF         	movff	?___ftmul+1,___ftadd@f2+1
  2580  001416  C025  F0D0         	movff	?___ftmul+2,___ftadd@f2+2
  2581  00141A  ECE0  F00E         	call	___ftadd	;wreg free
  2582  00141E  C0CB  F09F         	movff	?___ftadd,_vel
  2583  001422  C0CC  F0A0         	movff	?___ftadd+1,_vel+1
  2584  001426  C0CD  F0A1         	movff	?___ftadd+2,_vel+2
  2585                           
  2586                           ;ADXL345.c: 119: vel.y += h*accel.y;
  2587  00142A  C0A2  F0CB         	movff	_vel+3,___ftadd@f1
  2588  00142E  C0A3  F0CC         	movff	_vel+4,___ftadd@f1+1
  2589  001432  C0A4  F0CD         	movff	_vel+5,___ftadd@f1+2
  2590  001436  C0EA  F026         	movff	_h,___ftmul@f2
  2591  00143A  C0EB  F027         	movff	_h+1,___ftmul@f2+1
  2592  00143E  C0EC  F028         	movff	_h+2,___ftmul@f2+2
  2593  001442  C063  F023         	movff	_accel+3,___ftmul@f1
  2594  001446  C064  F024         	movff	_accel+4,___ftmul@f1+1
  2595  00144A  C065  F025         	movff	_accel+5,___ftmul@f1+2
  2596  00144E  EC1A  F012         	call	___ftmul	;wreg free
  2597  001452  C023  F0CE         	movff	?___ftmul,___ftadd@f2
  2598  001456  C024  F0CF         	movff	?___ftmul+1,___ftadd@f2+1
  2599  00145A  C025  F0D0         	movff	?___ftmul+2,___ftadd@f2+2
  2600  00145E  ECE0  F00E         	call	___ftadd	;wreg free
  2601  001462  C0CB  F0A2         	movff	?___ftadd,_vel+3
  2602  001466  C0CC  F0A3         	movff	?___ftadd+1,_vel+4
  2603  00146A  C0CD  F0A4         	movff	?___ftadd+2,_vel+5
  2604                           
  2605                           ;ADXL345.c: 120: vel.z += h*accel.z;
  2606  00146E  C0A5  F0CB         	movff	_vel+6,___ftadd@f1
  2607  001472  C0A6  F0CC         	movff	_vel+7,___ftadd@f1+1
  2608  001476  C0A7  F0CD         	movff	_vel+8,___ftadd@f1+2
  2609  00147A  C0EA  F026         	movff	_h,___ftmul@f2
  2610  00147E  C0EB  F027         	movff	_h+1,___ftmul@f2+1
  2611  001482  C0EC  F028         	movff	_h+2,___ftmul@f2+2
  2612  001486  C066  F023         	movff	_accel+6,___ftmul@f1
  2613  00148A  C067  F024         	movff	_accel+7,___ftmul@f1+1
  2614  00148E  C068  F025         	movff	_accel+8,___ftmul@f1+2
  2615  001492  EC1A  F012         	call	___ftmul	;wreg free
  2616  001496  C023  F0CE         	movff	?___ftmul,___ftadd@f2
  2617  00149A  C024  F0CF         	movff	?___ftmul+1,___ftadd@f2+1
  2618  00149E  C025  F0D0         	movff	?___ftmul+2,___ftadd@f2+2
  2619  0014A2  ECE0  F00E         	call	___ftadd	;wreg free
  2620  0014A6  C0CB  F0A5         	movff	?___ftadd,_vel+6
  2621  0014AA  C0CC  F0A6         	movff	?___ftadd+1,_vel+7
  2622  0014AE  C0CD  F0A7         	movff	?___ftadd+2,_vel+8
  2623                           
  2624                           ;ADXL345.c: 122: pos.x += h*vel.x;
  2625  0014B2  C096  F0CB         	movff	_pos,___ftadd@f1
  2626  0014B6  C097  F0CC         	movff	_pos+1,___ftadd@f1+1
  2627  0014BA  C098  F0CD         	movff	_pos+2,___ftadd@f1+2
  2628  0014BE  C0EA  F026         	movff	_h,___ftmul@f2
  2629  0014C2  C0EB  F027         	movff	_h+1,___ftmul@f2+1
  2630  0014C6  C0EC  F028         	movff	_h+2,___ftmul@f2+2
  2631  0014CA  C09F  F023         	movff	_vel,___ftmul@f1
  2632  0014CE  C0A0  F024         	movff	_vel+1,___ftmul@f1+1
  2633  0014D2  C0A1  F025         	movff	_vel+2,___ftmul@f1+2
  2634  0014D6  EC1A  F012         	call	___ftmul	;wreg free
  2635  0014DA  C023  F0CE         	movff	?___ftmul,___ftadd@f2
  2636  0014DE  C024  F0CF         	movff	?___ftmul+1,___ftadd@f2+1
  2637  0014E2  C025  F0D0         	movff	?___ftmul+2,___ftadd@f2+2
  2638  0014E6  ECE0  F00E         	call	___ftadd	;wreg free
  2639  0014EA  C0CB  F096         	movff	?___ftadd,_pos
  2640  0014EE  C0CC  F097         	movff	?___ftadd+1,_pos+1
  2641  0014F2  C0CD  F098         	movff	?___ftadd+2,_pos+2
  2642                           
  2643                           ;ADXL345.c: 123: pos.y += h*vel.y;
  2644  0014F6  C099  F0CB         	movff	_pos+3,___ftadd@f1
  2645  0014FA  C09A  F0CC         	movff	_pos+4,___ftadd@f1+1
  2646  0014FE  C09B  F0CD         	movff	_pos+5,___ftadd@f1+2
  2647  001502  C0EA  F026         	movff	_h,___ftmul@f2
  2648  001506  C0EB  F027         	movff	_h+1,___ftmul@f2+1
  2649  00150A  C0EC  F028         	movff	_h+2,___ftmul@f2+2
  2650  00150E  C0A2  F023         	movff	_vel+3,___ftmul@f1
  2651  001512  C0A3  F024         	movff	_vel+4,___ftmul@f1+1
  2652  001516  C0A4  F025         	movff	_vel+5,___ftmul@f1+2
  2653  00151A  EC1A  F012         	call	___ftmul	;wreg free
  2654  00151E  C023  F0CE         	movff	?___ftmul,___ftadd@f2
  2655  001522  C024  F0CF         	movff	?___ftmul+1,___ftadd@f2+1
  2656  001526  C025  F0D0         	movff	?___ftmul+2,___ftadd@f2+2
  2657  00152A  ECE0  F00E         	call	___ftadd	;wreg free
  2658  00152E  C0CB  F099         	movff	?___ftadd,_pos+3
  2659  001532  C0CC  F09A         	movff	?___ftadd+1,_pos+4
  2660  001536  C0CD  F09B         	movff	?___ftadd+2,_pos+5
  2661                           
  2662                           ;ADXL345.c: 124: pos.z += h*vel.z;
  2663  00153A  C09C  F0CB         	movff	_pos+6,___ftadd@f1
  2664  00153E  C09D  F0CC         	movff	_pos+7,___ftadd@f1+1
  2665  001542  C09E  F0CD         	movff	_pos+8,___ftadd@f1+2
  2666  001546  C0EA  F026         	movff	_h,___ftmul@f2
  2667  00154A  C0EB  F027         	movff	_h+1,___ftmul@f2+1
  2668  00154E  C0EC  F028         	movff	_h+2,___ftmul@f2+2
  2669  001552  C0A5  F023         	movff	_vel+6,___ftmul@f1
  2670  001556  C0A6  F024         	movff	_vel+7,___ftmul@f1+1
  2671  00155A  C0A7  F025         	movff	_vel+8,___ftmul@f1+2
  2672  00155E  EC1A  F012         	call	___ftmul	;wreg free
  2673  001562  C023  F0CE         	movff	?___ftmul,___ftadd@f2
  2674  001566  C024  F0CF         	movff	?___ftmul+1,___ftadd@f2+1
  2675  00156A  C025  F0D0         	movff	?___ftmul+2,___ftadd@f2+2
  2676  00156E  ECE0  F00E         	call	___ftadd	;wreg free
  2677  001572  C0CB  F09C         	movff	?___ftadd,_pos+6
  2678  001576  C0CC  F09D         	movff	?___ftadd+1,_pos+7
  2679  00157A  C0CD  F09E         	movff	?___ftadd+2,_pos+8
  2680                           
  2681                           ;ADXL345.c: 126: giroTemp.x += filtro*((readGIRO(0x28) + readGIRO(0x29)<<8)/256 - giroTe
      +                          mp.x);
  2682  00157E  C0E7  F026         	movff	_filtro,___ftmul@f2
  2683  001582  C0E8  F027         	movff	_filtro+1,___ftmul@f2+1
  2684  001586  C0E9  F028         	movff	_filtro+2,___ftmul@f2+2
  2685  00158A  C08D  F0C8         	movff	_giroTemp,___ftneg@f1
  2686  00158E  C08E  F0C9         	movff	_giroTemp+1,___ftneg@f1+1
  2687  001592  C08F  F0CA         	movff	_giroTemp+2,___ftneg@f1+2
  2688  001596  ECA1  F015         	call	___ftneg	;wreg free
  2689  00159A  C0C8  F0CE         	movff	?___ftneg,___ftadd@f2
  2690  00159E  C0C9  F0CF         	movff	?___ftneg+1,___ftadd@f2+1
  2691  0015A2  C0CA  F0D0         	movff	?___ftneg+2,___ftadd@f2+2
  2692  0015A6  0E01               	movlw	1
  2693  0015A8  6E1A               	movwf	___awdiv@divisor+1,c
  2694  0015AA  0E00               	movlw	0
  2695  0015AC  6E19               	movwf	___awdiv@divisor,c
  2696  0015AE  0E28               	movlw	40
  2697  0015B0  EC28  F015         	call	_readGIRO
  2698  0015B4  0100               	movlb	0	; () banked
  2699  0015B6  6FD7               	movwf	??_readAccelGiroValues& (0+255),b
  2700  0015B8  6BD8               	clrf	(??_readAccelGiroValues+1)& (0+255),b
  2701  0015BA  0E29               	movlw	41
  2702  0015BC  EC28  F015         	call	_readGIRO
  2703  0015C0  0100               	movlb	0	; () banked
  2704  0015C2  6FD9               	movwf	(??_readAccelGiroValues+2)& (0+255),b
  2705  0015C4  0100               	movlb	0	; () banked
  2706  0015C6  51D9               	movf	(??_readAccelGiroValues+2)& (0+255),w,b
  2707  0015C8  0100               	movlb	0	; () banked
  2708  0015CA  27D7               	addwf	??_readAccelGiroValues& (0+255),f,b
  2709  0015CC  0E00               	movlw	0
  2710  0015CE  23D8               	addwfc	(??_readAccelGiroValues+1)& (0+255),f,b
  2711  0015D0  C0D7  F0D8         	movff	??_readAccelGiroValues,??_readAccelGiroValues+1
  2712  0015D4  0100               	movlb	0	; () banked
  2713  0015D6  6BD7               	clrf	??_readAccelGiroValues& (0+255),b
  2714  0015D8  C0D7  F017         	movff	??_readAccelGiroValues,___awdiv@dividend
  2715  0015DC  C0D8  F018         	movff	??_readAccelGiroValues+1,___awdiv@dividend+1
  2716  0015E0  ECF0  F013         	call	___awdiv	;wreg free
  2717  0015E4  C017  F01F         	movff	?___awdiv,___awtoft@c
  2718  0015E8  C018  F020         	movff	?___awdiv+1,___awtoft@c+1
  2719  0015EC  EC6C  F015         	call	___awtoft	;wreg free
  2720  0015F0  C01F  F0CB         	movff	?___awtoft,___ftadd@f1
  2721  0015F4  C020  F0CC         	movff	?___awtoft+1,___ftadd@f1+1
  2722  0015F8  C021  F0CD         	movff	?___awtoft+2,___ftadd@f1+2
  2723  0015FC  ECE0  F00E         	call	___ftadd	;wreg free
  2724  001600  C0CB  F023         	movff	?___ftadd,___ftmul@f1
  2725  001604  C0CC  F024         	movff	?___ftadd+1,___ftmul@f1+1
  2726  001608  C0CD  F025         	movff	?___ftadd+2,___ftmul@f1+2
  2727  00160C  EC1A  F012         	call	___ftmul	;wreg free
  2728  001610  C023  F0DA         	movff	?___ftmul,_readAccelGiroValues$1982
  2729  001614  C024  F0DB         	movff	?___ftmul+1,_readAccelGiroValues$1982+1
  2730  001618  C025  F0DC         	movff	?___ftmul+2,_readAccelGiroValues$1982+2
  2731                           
  2732                           ;ADXL345.c: 126: giroTemp.x += filtro*((readGIRO(0x28) + readGIRO(0x29)<<8)/256 - giroTe
      +                          mp.x);
  2733  00161C  C08D  F0CB         	movff	_giroTemp,___ftadd@f1
  2734  001620  C08E  F0CC         	movff	_giroTemp+1,___ftadd@f1+1
  2735  001624  C08F  F0CD         	movff	_giroTemp+2,___ftadd@f1+2
  2736  001628  C0DA  F0CE         	movff	_readAccelGiroValues$1982,___ftadd@f2
  2737  00162C  C0DB  F0CF         	movff	_readAccelGiroValues$1982+1,___ftadd@f2+1
  2738  001630  C0DC  F0D0         	movff	_readAccelGiroValues$1982+2,___ftadd@f2+2
  2739  001634  ECE0  F00E         	call	___ftadd	;wreg free
  2740  001638  C0CB  F08D         	movff	?___ftadd,_giroTemp
  2741  00163C  C0CC  F08E         	movff	?___ftadd+1,_giroTemp+1
  2742  001640  C0CD  F08F         	movff	?___ftadd+2,_giroTemp+2
  2743                           
  2744                           ;ADXL345.c: 127: giroTemp.y += filtro*((readGIRO(0x2A) + readGIRO(0x2B)<<8)/256 - giroTe
      +                          mp.y);
  2745  001644  C0E7  F026         	movff	_filtro,___ftmul@f2
  2746  001648  C0E8  F027         	movff	_filtro+1,___ftmul@f2+1
  2747  00164C  C0E9  F028         	movff	_filtro+2,___ftmul@f2+2
  2748  001650  C090  F0C8         	movff	_giroTemp+3,___ftneg@f1
  2749  001654  C091  F0C9         	movff	_giroTemp+4,___ftneg@f1+1
  2750  001658  C092  F0CA         	movff	_giroTemp+5,___ftneg@f1+2
  2751  00165C  ECA1  F015         	call	___ftneg	;wreg free
  2752  001660  C0C8  F0CE         	movff	?___ftneg,___ftadd@f2
  2753  001664  C0C9  F0CF         	movff	?___ftneg+1,___ftadd@f2+1
  2754  001668  C0CA  F0D0         	movff	?___ftneg+2,___ftadd@f2+2
  2755  00166C  0E01               	movlw	1
  2756  00166E  6E1A               	movwf	___awdiv@divisor+1,c
  2757  001670  0E00               	movlw	0
  2758  001672  6E19               	movwf	___awdiv@divisor,c
  2759  001674  0E2A               	movlw	42
  2760  001676  EC28  F015         	call	_readGIRO
  2761  00167A  0100               	movlb	0	; () banked
  2762  00167C  6FD7               	movwf	??_readAccelGiroValues& (0+255),b
  2763  00167E  6BD8               	clrf	(??_readAccelGiroValues+1)& (0+255),b
  2764  001680  0E2B               	movlw	43
  2765  001682  EC28  F015         	call	_readGIRO
  2766  001686  0100               	movlb	0	; () banked
  2767  001688  6FD9               	movwf	(??_readAccelGiroValues+2)& (0+255),b
  2768  00168A  0100               	movlb	0	; () banked
  2769  00168C  51D9               	movf	(??_readAccelGiroValues+2)& (0+255),w,b
  2770  00168E  0100               	movlb	0	; () banked
  2771  001690  27D7               	addwf	??_readAccelGiroValues& (0+255),f,b
  2772  001692  0E00               	movlw	0
  2773  001694  23D8               	addwfc	(??_readAccelGiroValues+1)& (0+255),f,b
  2774  001696  C0D7  F0D8         	movff	??_readAccelGiroValues,??_readAccelGiroValues+1
  2775  00169A  0100               	movlb	0	; () banked
  2776  00169C  6BD7               	clrf	??_readAccelGiroValues& (0+255),b
  2777  00169E  C0D7  F017         	movff	??_readAccelGiroValues,___awdiv@dividend
  2778  0016A2  C0D8  F018         	movff	??_readAccelGiroValues+1,___awdiv@dividend+1
  2779  0016A6  ECF0  F013         	call	___awdiv	;wreg free
  2780  0016AA  C017  F01F         	movff	?___awdiv,___awtoft@c
  2781  0016AE  C018  F020         	movff	?___awdiv+1,___awtoft@c+1
  2782  0016B2  EC6C  F015         	call	___awtoft	;wreg free
  2783  0016B6  C01F  F0CB         	movff	?___awtoft,___ftadd@f1
  2784  0016BA  C020  F0CC         	movff	?___awtoft+1,___ftadd@f1+1
  2785  0016BE  C021  F0CD         	movff	?___awtoft+2,___ftadd@f1+2
  2786  0016C2  ECE0  F00E         	call	___ftadd	;wreg free
  2787  0016C6  C0CB  F023         	movff	?___ftadd,___ftmul@f1
  2788  0016CA  C0CC  F024         	movff	?___ftadd+1,___ftmul@f1+1
  2789  0016CE  C0CD  F025         	movff	?___ftadd+2,___ftmul@f1+2
  2790  0016D2  EC1A  F012         	call	___ftmul	;wreg free
  2791  0016D6  C023  F0DA         	movff	?___ftmul,_readAccelGiroValues$1982
  2792  0016DA  C024  F0DB         	movff	?___ftmul+1,_readAccelGiroValues$1982+1
  2793  0016DE  C025  F0DC         	movff	?___ftmul+2,_readAccelGiroValues$1982+2
  2794                           
  2795                           ;ADXL345.c: 127: giroTemp.y += filtro*((readGIRO(0x2A) + readGIRO(0x2B)<<8)/256 - giroTe
      +                          mp.y);
  2796  0016E2  C090  F0CB         	movff	_giroTemp+3,___ftadd@f1
  2797  0016E6  C091  F0CC         	movff	_giroTemp+4,___ftadd@f1+1
  2798  0016EA  C092  F0CD         	movff	_giroTemp+5,___ftadd@f1+2
  2799  0016EE  C0DA  F0CE         	movff	_readAccelGiroValues$1982,___ftadd@f2
  2800  0016F2  C0DB  F0CF         	movff	_readAccelGiroValues$1982+1,___ftadd@f2+1
  2801  0016F6  C0DC  F0D0         	movff	_readAccelGiroValues$1982+2,___ftadd@f2+2
  2802  0016FA  ECE0  F00E         	call	___ftadd	;wreg free
  2803  0016FE  C0CB  F090         	movff	?___ftadd,_giroTemp+3
  2804  001702  C0CC  F091         	movff	?___ftadd+1,_giroTemp+4
  2805  001706  C0CD  F092         	movff	?___ftadd+2,_giroTemp+5
  2806                           
  2807                           ;ADXL345.c: 128: giroTemp.z += filtro*((readGIRO(0x2C) + readGIRO(0x2D)<<8)/256 - giroTe
      +                          mp.z);
  2808  00170A  C0E7  F026         	movff	_filtro,___ftmul@f2
  2809  00170E  C0E8  F027         	movff	_filtro+1,___ftmul@f2+1
  2810  001712  C0E9  F028         	movff	_filtro+2,___ftmul@f2+2
  2811  001716  C093  F0C8         	movff	_giroTemp+6,___ftneg@f1
  2812  00171A  C094  F0C9         	movff	_giroTemp+7,___ftneg@f1+1
  2813  00171E  C095  F0CA         	movff	_giroTemp+8,___ftneg@f1+2
  2814  001722  ECA1  F015         	call	___ftneg	;wreg free
  2815  001726  C0C8  F0CE         	movff	?___ftneg,___ftadd@f2
  2816  00172A  C0C9  F0CF         	movff	?___ftneg+1,___ftadd@f2+1
  2817  00172E  C0CA  F0D0         	movff	?___ftneg+2,___ftadd@f2+2
  2818  001732  0E01               	movlw	1
  2819  001734  6E1A               	movwf	___awdiv@divisor+1,c
  2820  001736  0E00               	movlw	0
  2821  001738  6E19               	movwf	___awdiv@divisor,c
  2822  00173A  0E2C               	movlw	44
  2823  00173C  EC28  F015         	call	_readGIRO
  2824  001740  0100               	movlb	0	; () banked
  2825  001742  6FD7               	movwf	??_readAccelGiroValues& (0+255),b
  2826  001744  6BD8               	clrf	(??_readAccelGiroValues+1)& (0+255),b
  2827  001746  0E2D               	movlw	45
  2828  001748  EC28  F015         	call	_readGIRO
  2829  00174C  0100               	movlb	0	; () banked
  2830  00174E  6FD9               	movwf	(??_readAccelGiroValues+2)& (0+255),b
  2831  001750  0100               	movlb	0	; () banked
  2832  001752  51D9               	movf	(??_readAccelGiroValues+2)& (0+255),w,b
  2833  001754  0100               	movlb	0	; () banked
  2834  001756  27D7               	addwf	??_readAccelGiroValues& (0+255),f,b
  2835  001758  0E00               	movlw	0
  2836  00175A  23D8               	addwfc	(??_readAccelGiroValues+1)& (0+255),f,b
  2837  00175C  C0D7  F0D8         	movff	??_readAccelGiroValues,??_readAccelGiroValues+1
  2838  001760  0100               	movlb	0	; () banked
  2839  001762  6BD7               	clrf	??_readAccelGiroValues& (0+255),b
  2840  001764  C0D7  F017         	movff	??_readAccelGiroValues,___awdiv@dividend
  2841  001768  C0D8  F018         	movff	??_readAccelGiroValues+1,___awdiv@dividend+1
  2842  00176C  ECF0  F013         	call	___awdiv	;wreg free
  2843  001770  C017  F01F         	movff	?___awdiv,___awtoft@c
  2844  001774  C018  F020         	movff	?___awdiv+1,___awtoft@c+1
  2845  001778  EC6C  F015         	call	___awtoft	;wreg free
  2846  00177C  C01F  F0CB         	movff	?___awtoft,___ftadd@f1
  2847  001780  C020  F0CC         	movff	?___awtoft+1,___ftadd@f1+1
  2848  001784  C021  F0CD         	movff	?___awtoft+2,___ftadd@f1+2
  2849  001788  ECE0  F00E         	call	___ftadd	;wreg free
  2850  00178C  C0CB  F023         	movff	?___ftadd,___ftmul@f1
  2851  001790  C0CC  F024         	movff	?___ftadd+1,___ftmul@f1+1
  2852  001794  C0CD  F025         	movff	?___ftadd+2,___ftmul@f1+2
  2853  001798  EC1A  F012         	call	___ftmul	;wreg free
  2854  00179C  C023  F0DA         	movff	?___ftmul,_readAccelGiroValues$1982
  2855  0017A0  C024  F0DB         	movff	?___ftmul+1,_readAccelGiroValues$1982+1
  2856  0017A4  C025  F0DC         	movff	?___ftmul+2,_readAccelGiroValues$1982+2
  2857                           
  2858                           ;ADXL345.c: 128: giroTemp.z += filtro*((readGIRO(0x2C) + readGIRO(0x2D)<<8)/256 - giroTe
      +                          mp.z);
  2859  0017A8  C093  F0CB         	movff	_giroTemp+6,___ftadd@f1
  2860  0017AC  C094  F0CC         	movff	_giroTemp+7,___ftadd@f1+1
  2861  0017B0  C095  F0CD         	movff	_giroTemp+8,___ftadd@f1+2
  2862  0017B4  C0DA  F0CE         	movff	_readAccelGiroValues$1982,___ftadd@f2
  2863  0017B8  C0DB  F0CF         	movff	_readAccelGiroValues$1982+1,___ftadd@f2+1
  2864  0017BC  C0DC  F0D0         	movff	_readAccelGiroValues$1982+2,___ftadd@f2+2
  2865  0017C0  ECE0  F00E         	call	___ftadd	;wreg free
  2866  0017C4  C0CB  F093         	movff	?___ftadd,_giroTemp+6
  2867  0017C8  C0CC  F094         	movff	?___ftadd+1,_giroTemp+7
  2868  0017CC  C0CD  F095         	movff	?___ftadd+2,_giroTemp+8
  2869                           
  2870                           ;ADXL345.c: 129: giro.x = giro.x - giroTemp.x;
  2871  0017D0  C08D  F0C8         	movff	_giroTemp,___ftneg@f1
  2872  0017D4  C08E  F0C9         	movff	_giroTemp+1,___ftneg@f1+1
  2873  0017D8  C08F  F0CA         	movff	_giroTemp+2,___ftneg@f1+2
  2874  0017DC  ECA1  F015         	call	___ftneg	;wreg free
  2875  0017E0  C0C8  F0CB         	movff	?___ftneg,___ftadd@f1
  2876  0017E4  C0C9  F0CC         	movff	?___ftneg+1,___ftadd@f1+1
  2877  0017E8  C0CA  F0CD         	movff	?___ftneg+2,___ftadd@f1+2
  2878  0017EC  C07B  F0CE         	movff	_giro,___ftadd@f2
  2879  0017F0  C07C  F0CF         	movff	_giro+1,___ftadd@f2+1
  2880  0017F4  C07D  F0D0         	movff	_giro+2,___ftadd@f2+2
  2881  0017F8  ECE0  F00E         	call	___ftadd	;wreg free
  2882  0017FC  C0CB  F07B         	movff	?___ftadd,_giro
  2883  001800  C0CC  F07C         	movff	?___ftadd+1,_giro+1
  2884  001804  C0CD  F07D         	movff	?___ftadd+2,_giro+2
  2885                           
  2886                           ;ADXL345.c: 130: giro.y = giro.y - giroTemp.y;
  2887  001808  C090  F0C8         	movff	_giroTemp+3,___ftneg@f1
  2888  00180C  C091  F0C9         	movff	_giroTemp+4,___ftneg@f1+1
  2889  001810  C092  F0CA         	movff	_giroTemp+5,___ftneg@f1+2
  2890  001814  ECA1  F015         	call	___ftneg	;wreg free
  2891  001818  C0C8  F0CB         	movff	?___ftneg,___ftadd@f1
  2892  00181C  C0C9  F0CC         	movff	?___ftneg+1,___ftadd@f1+1
  2893  001820  C0CA  F0CD         	movff	?___ftneg+2,___ftadd@f1+2
  2894  001824  C07E  F0CE         	movff	_giro+3,___ftadd@f2
  2895  001828  C07F  F0CF         	movff	_giro+4,___ftadd@f2+1
  2896  00182C  C080  F0D0         	movff	_giro+5,___ftadd@f2+2
  2897  001830  ECE0  F00E         	call	___ftadd	;wreg free
  2898  001834  C0CB  F07E         	movff	?___ftadd,_giro+3
  2899  001838  C0CC  F07F         	movff	?___ftadd+1,_giro+4
  2900  00183C  C0CD  F080         	movff	?___ftadd+2,_giro+5
  2901                           
  2902                           ;ADXL345.c: 131: giro.z = giro.z - giroTemp.z;
  2903  001840  C093  F0C8         	movff	_giroTemp+6,___ftneg@f1
  2904  001844  C094  F0C9         	movff	_giroTemp+7,___ftneg@f1+1
  2905  001848  C095  F0CA         	movff	_giroTemp+8,___ftneg@f1+2
  2906  00184C  ECA1  F015         	call	___ftneg	;wreg free
  2907  001850  C0C8  F0CB         	movff	?___ftneg,___ftadd@f1
  2908  001854  C0C9  F0CC         	movff	?___ftneg+1,___ftadd@f1+1
  2909  001858  C0CA  F0CD         	movff	?___ftneg+2,___ftadd@f1+2
  2910  00185C  C081  F0CE         	movff	_giro+6,___ftadd@f2
  2911  001860  C082  F0CF         	movff	_giro+7,___ftadd@f2+1
  2912  001864  C083  F0D0         	movff	_giro+8,___ftadd@f2+2
  2913  001868  ECE0  F00E         	call	___ftadd	;wreg free
  2914  00186C  C0CB  F081         	movff	?___ftadd,_giro+6
  2915  001870  C0CC  F082         	movff	?___ftadd+1,_giro+7
  2916  001874  C0CD  F083         	movff	?___ftadd+2,_giro+8
  2917  001878  0012               	return		;funcret
  2918  00187A                     __end_of_readAccelGiroValues:
  2919                           	opt stack 0
  2920                           tblptru	equ	0xFF8
  2921                           tblptrh	equ	0xFF7
  2922                           tblptrl	equ	0xFF6
  2923                           tablat	equ	0xFF5
  2924                           postinc0	equ	0xFEE
  2925                           wreg	equ	0xFE8
  2926                           postdec1	equ	0xFE5
  2927                           fsr1l	equ	0xFE1
  2928                           
  2929 ;; *************** function _readGIRO *****************
  2930 ;; Defined at:
  2931 ;;		line 69 in file "ADXL345.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;  Adress          1    wreg     unsigned char 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  Adress          1   20[COMRAM] unsigned char 
  2936 ;;  c               1   21[COMRAM] unsigned char 
  2937 ;; Return value:  Size  Location     Type
  2938 ;;                  1    wreg      unsigned char 
  2939 ;; Registers used:
  2940 ;;		wreg, status,2, status,0, cstack
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2946 ;;      Params:         0       0       0       0       0       0       0       0       0
  2947 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2948 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2949 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2950 ;;Total ram usage:        2 bytes
  2951 ;; Hardware stack levels used:    1
  2952 ;; Hardware stack levels required when called:    6
  2953 ;; This function calls:
  2954 ;;		_IdleI2C
  2955 ;;		_ReadI2C
  2956 ;;		_WriteI2C
  2957 ;; This function is called by:
  2958 ;;		_readAccelGiroValues
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           	psect	text3
  2963  002A50                     __ptext3:
  2964                           	opt stack 0
  2965  002A50                     _readGIRO:
  2966                           	opt stack 22
  2967                           
  2968                           ;incstack = 0
  2969                           ;readGIRO@Adress stored from wreg
  2970  002A50  6E15               	movwf	readGIRO@Adress,c
  2971                           
  2972                           ;ADXL345.c: 71: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  2973  002A52  80C5               	bsf	4037,0,c	;volatile
  2974  002A54                     l96:
  2975  002A54  B0C5               	btfsc	4037,0,c	;volatile
  2976  002A56  D7FE               	goto	l96
  2977                           
  2978                           ;ADXL345.c: 72: WriteI2C(0xD2);
  2979  002A58  0ED2               	movlw	210
  2980  002A5A  EC02  F015         	call	_WriteI2C
  2981                           
  2982                           ;ADXL345.c: 73: IdleI2C();
  2983  002A5E  EC03  F016         	call	_IdleI2C	;wreg free
  2984                           
  2985                           ;ADXL345.c: 74: WriteI2C(Adress);
  2986  002A62  5015               	movf	readGIRO@Adress,w,c
  2987  002A64  EC02  F015         	call	_WriteI2C
  2988                           
  2989                           ;ADXL345.c: 75: IdleI2C();
  2990  002A68  EC03  F016         	call	_IdleI2C	;wreg free
  2991                           
  2992                           ;ADXL345.c: 76: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  2993  002A6C  82C5               	bsf	4037,1,c	;volatile
  2994  002A6E                     l99:
  2995  002A6E  B2C5               	btfsc	4037,1,c	;volatile
  2996  002A70  D7FE               	goto	l99
  2997                           
  2998                           ;ADXL345.c: 77: WriteI2C(0xD3);
  2999  002A72  0ED3               	movlw	211
  3000  002A74  EC02  F015         	call	_WriteI2C
  3001                           
  3002                           ;ADXL345.c: 78: IdleI2C();
  3003  002A78  EC03  F016         	call	_IdleI2C	;wreg free
  3004                           
  3005                           ;ADXL345.c: 79: unsigned char c = ReadI2C();
  3006  002A7C  ECDF  F015         	call	_ReadI2C	;wreg free
  3007  002A80  6E16               	movwf	readGIRO@c,c
  3008                           
  3009                           ;ADXL345.c: 80: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  3010  002A82  8AC5               	bsf	4037,5,c	;volatile
  3011  002A84  88C5               	bsf	4037,4,c	;volatile
  3012  002A86                     l102:
  3013  002A86  B8C5               	btfsc	4037,4,c	;volatile
  3014  002A88  D7FE               	goto	l102
  3015                           
  3016                           ;ADXL345.c: 81: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  3017  002A8A  84C5               	bsf	4037,2,c	;volatile
  3018  002A8C                     l105:
  3019  002A8C  B4C5               	btfsc	4037,2,c	;volatile
  3020  002A8E  D7FE               	goto	l105
  3021                           
  3022                           ;ADXL345.c: 82: return c;
  3023  002A90  5016               	movf	readGIRO@c,w,c
  3024  002A92  0012               	return	
  3025  002A94                     __end_of_readGIRO:
  3026                           	opt stack 0
  3027                           tblptru	equ	0xFF8
  3028                           tblptrh	equ	0xFF7
  3029                           tblptrl	equ	0xFF6
  3030                           tablat	equ	0xFF5
  3031                           postinc0	equ	0xFEE
  3032                           wreg	equ	0xFE8
  3033                           postdec1	equ	0xFE5
  3034                           fsr1l	equ	0xFE1
  3035                           
  3036 ;; *************** function _readACC *****************
  3037 ;; Defined at:
  3038 ;;		line 53 in file "ADXL345.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  Adress          1    wreg     unsigned char 
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  Adress          1   20[COMRAM] unsigned char 
  3043 ;;  c               1   21[COMRAM] unsigned char 
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  1    wreg      unsigned char 
  3046 ;; Registers used:
  3047 ;;		wreg, status,2, status,0, cstack
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3053 ;;      Params:         0       0       0       0       0       0       0       0       0
  3054 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3055 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3056 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3057 ;;Total ram usage:        2 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    6
  3060 ;; This function calls:
  3061 ;;		_IdleI2C
  3062 ;;		_ReadI2C
  3063 ;;		_WriteI2C
  3064 ;; This function is called by:
  3065 ;;		_readAccelGiroValues
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           	psect	text4
  3070  002A94                     __ptext4:
  3071                           	opt stack 0
  3072  002A94                     _readACC:
  3073                           	opt stack 22
  3074                           
  3075                           ;incstack = 0
  3076                           ;readACC@Adress stored from wreg
  3077  002A94  6E15               	movwf	readACC@Adress,c
  3078                           
  3079                           ;ADXL345.c: 55: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  3080  002A96  80C5               	bsf	4037,0,c	;volatile
  3081  002A98                     l81:
  3082  002A98  B0C5               	btfsc	4037,0,c	;volatile
  3083  002A9A  D7FE               	goto	l81
  3084                           
  3085                           ;ADXL345.c: 56: WriteI2C(0xA6);
  3086  002A9C  0EA6               	movlw	166
  3087  002A9E  EC02  F015         	call	_WriteI2C
  3088                           
  3089                           ;ADXL345.c: 57: IdleI2C();
  3090  002AA2  EC03  F016         	call	_IdleI2C	;wreg free
  3091                           
  3092                           ;ADXL345.c: 58: WriteI2C(Adress);
  3093  002AA6  5015               	movf	readACC@Adress,w,c
  3094  002AA8  EC02  F015         	call	_WriteI2C
  3095                           
  3096                           ;ADXL345.c: 59: IdleI2C();
  3097  002AAC  EC03  F016         	call	_IdleI2C	;wreg free
  3098                           
  3099                           ;ADXL345.c: 60: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  3100  002AB0  82C5               	bsf	4037,1,c	;volatile
  3101  002AB2                     l84:
  3102  002AB2  B2C5               	btfsc	4037,1,c	;volatile
  3103  002AB4  D7FE               	goto	l84
  3104                           
  3105                           ;ADXL345.c: 61: WriteI2C(0xA7);
  3106  002AB6  0EA7               	movlw	167
  3107  002AB8  EC02  F015         	call	_WriteI2C
  3108                           
  3109                           ;ADXL345.c: 62: IdleI2C();
  3110  002ABC  EC03  F016         	call	_IdleI2C	;wreg free
  3111                           
  3112                           ;ADXL345.c: 63: unsigned char c = ReadI2C();
  3113  002AC0  ECDF  F015         	call	_ReadI2C	;wreg free
  3114  002AC4  6E16               	movwf	readACC@c,c
  3115                           
  3116                           ;ADXL345.c: 64: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  3117  002AC6  8AC5               	bsf	4037,5,c	;volatile
  3118  002AC8  88C5               	bsf	4037,4,c	;volatile
  3119  002ACA                     l87:
  3120  002ACA  B8C5               	btfsc	4037,4,c	;volatile
  3121  002ACC  D7FE               	goto	l87
  3122                           
  3123                           ;ADXL345.c: 65: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  3124  002ACE  84C5               	bsf	4037,2,c	;volatile
  3125  002AD0                     l90:
  3126  002AD0  B4C5               	btfsc	4037,2,c	;volatile
  3127  002AD2  D7FE               	goto	l90
  3128                           
  3129                           ;ADXL345.c: 66: return c;
  3130  002AD4  5016               	movf	readACC@c,w,c
  3131  002AD6  0012               	return	
  3132  002AD8                     __end_of_readACC:
  3133                           	opt stack 0
  3134                           tblptru	equ	0xFF8
  3135                           tblptrh	equ	0xFF7
  3136                           tblptrl	equ	0xFF6
  3137                           tablat	equ	0xFF5
  3138                           postinc0	equ	0xFEE
  3139                           wreg	equ	0xFE8
  3140                           postdec1	equ	0xFE5
  3141                           fsr1l	equ	0xFE1
  3142                           
  3143 ;; *************** function _ReadI2C *****************
  3144 ;; Defined at:
  3145 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\i2c\i2c_read.c"
  3146 ;; Parameters:    Size  Location     Type
  3147 ;;		None
  3148 ;; Auto vars:     Size  Location     Type
  3149 ;;		None
  3150 ;; Return value:  Size  Location     Type
  3151 ;;                  1    wreg      unsigned char 
  3152 ;; Registers used:
  3153 ;;		wreg, status,2, status,0
  3154 ;; Tracked objects:
  3155 ;;		On entry : 0/0
  3156 ;;		On exit  : 0/0
  3157 ;;		Unchanged: 0/0
  3158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3159 ;;      Params:         0       0       0       0       0       0       0       0       0
  3160 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3161 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3162 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3163 ;;Total ram usage:        0 bytes
  3164 ;; Hardware stack levels used:    1
  3165 ;; Hardware stack levels required when called:    4
  3166 ;; This function calls:
  3167 ;;		Nothing
  3168 ;; This function is called by:
  3169 ;;		_readACC
  3170 ;;		_readGIRO
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174                           	psect	text5
  3175  002BBE                     __ptext5:
  3176                           	opt stack 0
  3177  002BBE                     _ReadI2C:
  3178                           	opt stack 23
  3179                           
  3180                           ;incstack = 0
  3181  002BBE  50C6               	movf	4038,w,c	;volatile
  3182  002BC0  0B0F               	andlw	15
  3183  002BC2  0A08               	xorlw	8
  3184  002BC4  B4D8               	btfsc	status,2,c
  3185  002BC6  D004               	goto	l691
  3186  002BC8  50C6               	movf	4038,w,c	;volatile
  3187  002BCA  0B0F               	andlw	15
  3188  002BCC  0A0B               	xorlw	11
  3189  002BCE  B4D8               	btfsc	status,2,c
  3190  002BD0                     l691:
  3191  002BD0  86C5               	bsf	4037,3,c	;volatile
  3192  002BD2                     l692:
  3193  002BD2  A0C7               	btfss	4039,0,c	;volatile
  3194  002BD4  D7FE               	goto	l692
  3195  002BD6  50C9               	movf	4041,w,c	;volatile
  3196  002BD8  0012               	return	
  3197  002BDA                     __end_of_ReadI2C:
  3198                           	opt stack 0
  3199                           tblptru	equ	0xFF8
  3200                           tblptrh	equ	0xFF7
  3201                           tblptrl	equ	0xFF6
  3202                           tablat	equ	0xFF5
  3203                           postinc0	equ	0xFEE
  3204                           wreg	equ	0xFE8
  3205                           postdec1	equ	0xFE5
  3206                           fsr1l	equ	0xFE1
  3207                           status	equ	0xFD8
  3208                           
  3209 ;; *************** function ___awtoft *****************
  3210 ;; Defined at:
  3211 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;  c               2   30[COMRAM] int 
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;  sign            1   33[COMRAM] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  3   30[COMRAM] float 
  3218 ;; Registers used:
  3219 ;;		wreg, status,2, status,0, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3225 ;;      Params:         3       0       0       0       0       0       0       0       0
  3226 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3227 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3228 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3229 ;;Total ram usage:        4 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    5
  3232 ;; This function calls:
  3233 ;;		___ftpack
  3234 ;; This function is called by:
  3235 ;;		_readAccelGiroValues
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text6
  3240  002AD8                     __ptext6:
  3241                           	opt stack 0
  3242  002AD8                     ___awtoft:
  3243                           	opt stack 23
  3244                           
  3245                           ;incstack = 0
  3246  002AD8  0E00               	movlw	0
  3247  002ADA  6E22               	movwf	___awtoft@sign,c
  3248  002ADC  AE20               	btfss	___awtoft@c+1,7,c
  3249  002ADE  D006               	goto	l3877
  3250  002AE0  6C1F               	negf	___awtoft@c,c
  3251  002AE2  1E20               	comf	___awtoft@c+1,f,c
  3252  002AE4  B0D8               	btfsc	status,0,c
  3253  002AE6  2A20               	incf	___awtoft@c+1,f,c
  3254  002AE8  0E01               	movlw	1
  3255  002AEA  6E22               	movwf	___awtoft@sign,c
  3256  002AEC                     l3877:
  3257  002AEC  C01F  F013         	movff	___awtoft@c,___ftpack@arg
  3258  002AF0  C020  F014         	movff	___awtoft@c+1,___ftpack@arg+1
  3259  002AF4  6A15               	clrf	___ftpack@arg+2,c
  3260  002AF6  0E8E               	movlw	142
  3261  002AF8  6E16               	movwf	___ftpack@exp,c
  3262  002AFA  C022  F017         	movff	___awtoft@sign,___ftpack@sign
  3263  002AFE  ECFA  F012         	call	___ftpack	;wreg free
  3264  002B02  C013  F01F         	movff	?___ftpack,?___awtoft
  3265  002B06  C014  F020         	movff	?___ftpack+1,?___awtoft+1
  3266  002B0A  C015  F021         	movff	?___ftpack+2,?___awtoft+2
  3267  002B0E  0012               	return	
  3268  002B10                     __end_of___awtoft:
  3269                           	opt stack 0
  3270                           tblptru	equ	0xFF8
  3271                           tblptrh	equ	0xFF7
  3272                           tblptrl	equ	0xFF6
  3273                           tablat	equ	0xFF5
  3274                           postinc0	equ	0xFEE
  3275                           wreg	equ	0xFE8
  3276                           postdec1	equ	0xFE5
  3277                           fsr1l	equ	0xFE1
  3278                           status	equ	0xFD8
  3279                           
  3280 ;; *************** function ___awdiv *****************
  3281 ;; Defined at:
  3282 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;  dividend        2   22[COMRAM] int 
  3285 ;;  divisor         2   24[COMRAM] int 
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;  quotient        2   28[COMRAM] int 
  3288 ;;  sign            1   27[COMRAM] unsigned char 
  3289 ;;  counter         1   26[COMRAM] unsigned char 
  3290 ;; Return value:  Size  Location     Type
  3291 ;;                  2   22[COMRAM] int 
  3292 ;; Registers used:
  3293 ;;		wreg, status,2, status,0
  3294 ;; Tracked objects:
  3295 ;;		On entry : 0/0
  3296 ;;		On exit  : 0/0
  3297 ;;		Unchanged: 0/0
  3298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3299 ;;      Params:         4       0       0       0       0       0       0       0       0
  3300 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3301 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3302 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3303 ;;Total ram usage:        8 bytes
  3304 ;; Hardware stack levels used:    1
  3305 ;; Hardware stack levels required when called:    4
  3306 ;; This function calls:
  3307 ;;		Nothing
  3308 ;; This function is called by:
  3309 ;;		_readAccelGiroValues
  3310 ;;		_scaleChange
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           	psect	text7
  3315  0027E0                     __ptext7:
  3316                           	opt stack 0
  3317  0027E0                     ___awdiv:
  3318                           	opt stack 24
  3319                           
  3320                           ;incstack = 0
  3321  0027E0  0E00               	movlw	0
  3322  0027E2  6E1C               	movwf	___awdiv@sign,c
  3323  0027E4  AE1A               	btfss	___awdiv@divisor+1,7,c
  3324  0027E6  D006               	goto	l3833
  3325  0027E8  6C19               	negf	___awdiv@divisor,c
  3326  0027EA  1E1A               	comf	___awdiv@divisor+1,f,c
  3327  0027EC  B0D8               	btfsc	status,0,c
  3328  0027EE  2A1A               	incf	___awdiv@divisor+1,f,c
  3329  0027F0  0E01               	movlw	1
  3330  0027F2  6E1C               	movwf	___awdiv@sign,c
  3331  0027F4                     l3833:
  3332  0027F4  AE18               	btfss	___awdiv@dividend+1,7,c
  3333  0027F6  D006               	goto	l3839
  3334  0027F8  6C17               	negf	___awdiv@dividend,c
  3335  0027FA  1E18               	comf	___awdiv@dividend+1,f,c
  3336  0027FC  B0D8               	btfsc	status,0,c
  3337  0027FE  2A18               	incf	___awdiv@dividend+1,f,c
  3338  002800  0E01               	movlw	1
  3339  002802  1A1C               	xorwf	___awdiv@sign,f,c
  3340  002804                     l3839:
  3341  002804  0E00               	movlw	0
  3342  002806  6E1E               	movwf	___awdiv@quotient+1,c
  3343  002808  0E00               	movlw	0
  3344  00280A  6E1D               	movwf	___awdiv@quotient,c
  3345  00280C  5019               	movf	___awdiv@divisor,w,c
  3346  00280E  101A               	iorwf	___awdiv@divisor+1,w,c
  3347  002810  B4D8               	btfsc	status,2,c
  3348  002812  D01C               	goto	l3861
  3349  002814  0E01               	movlw	1
  3350  002816  6E1B               	movwf	___awdiv@counter,c
  3351  002818  D004               	goto	l3847
  3352  00281A                     l3845:
  3353  00281A  90D8               	bcf	status,0,c
  3354  00281C  3619               	rlcf	___awdiv@divisor,f,c
  3355  00281E  361A               	rlcf	___awdiv@divisor+1,f,c
  3356  002820  2A1B               	incf	___awdiv@counter,f,c
  3357  002822                     l3847:
  3358  002822  AE1A               	btfss	___awdiv@divisor+1,7,c
  3359  002824  D7FA               	goto	l3845
  3360  002826                     l3849:
  3361  002826  90D8               	bcf	status,0,c
  3362  002828  361D               	rlcf	___awdiv@quotient,f,c
  3363  00282A  361E               	rlcf	___awdiv@quotient+1,f,c
  3364  00282C  5019               	movf	___awdiv@divisor,w,c
  3365  00282E  5C17               	subwf	___awdiv@dividend,w,c
  3366  002830  501A               	movf	___awdiv@divisor+1,w,c
  3367  002832  5818               	subwfb	___awdiv@dividend+1,w,c
  3368  002834  A0D8               	btfss	status,0,c
  3369  002836  D005               	goto	l3857
  3370  002838  5019               	movf	___awdiv@divisor,w,c
  3371  00283A  5E17               	subwf	___awdiv@dividend,f,c
  3372  00283C  501A               	movf	___awdiv@divisor+1,w,c
  3373  00283E  5A18               	subwfb	___awdiv@dividend+1,f,c
  3374  002840  801D               	bsf	___awdiv@quotient,0,c
  3375  002842                     l3857:
  3376  002842  90D8               	bcf	status,0,c
  3377  002844  321A               	rrcf	___awdiv@divisor+1,f,c
  3378  002846  3219               	rrcf	___awdiv@divisor,f,c
  3379  002848  2E1B               	decfsz	___awdiv@counter,f,c
  3380  00284A  D7ED               	goto	l3849
  3381  00284C                     l3861:
  3382  00284C  501C               	movf	___awdiv@sign,w,c
  3383  00284E  B4D8               	btfsc	status,2,c
  3384  002850  D004               	goto	l3865
  3385  002852  6C1D               	negf	___awdiv@quotient,c
  3386  002854  1E1E               	comf	___awdiv@quotient+1,f,c
  3387  002856  B0D8               	btfsc	status,0,c
  3388  002858  2A1E               	incf	___awdiv@quotient+1,f,c
  3389  00285A                     l3865:
  3390  00285A  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  3391  00285E  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  3392  002862  0012               	return	
  3393  002864                     __end_of___awdiv:
  3394                           	opt stack 0
  3395                           tblptru	equ	0xFF8
  3396                           tblptrh	equ	0xFF7
  3397                           tblptrl	equ	0xFF6
  3398                           tablat	equ	0xFF5
  3399                           postinc0	equ	0xFEE
  3400                           wreg	equ	0xFE8
  3401                           postdec1	equ	0xFE5
  3402                           fsr1l	equ	0xFE1
  3403                           status	equ	0xFD8
  3404                           
  3405 ;; *************** function _initUART *****************
  3406 ;; Defined at:
  3407 ;;		line 18 in file "Serial.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;		None
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;		None
  3412 ;; Return value:  Size  Location     Type
  3413 ;;                  1    wreg      void 
  3414 ;; Registers used:
  3415 ;;		wreg, status,2
  3416 ;; Tracked objects:
  3417 ;;		On entry : 0/0
  3418 ;;		On exit  : 0/0
  3419 ;;		Unchanged: 0/0
  3420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3421 ;;      Params:         0       0       0       0       0       0       0       0       0
  3422 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3423 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3424 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3425 ;;Total ram usage:        0 bytes
  3426 ;; Hardware stack levels used:    1
  3427 ;; Hardware stack levels required when called:    4
  3428 ;; This function calls:
  3429 ;;		Nothing
  3430 ;; This function is called by:
  3431 ;;		_main
  3432 ;; This function uses a non-reentrant model
  3433 ;;
  3434                           
  3435                           	psect	text8
  3436  002B10                     __ptext8:
  3437                           	opt stack 0
  3438  002B10                     _initUART:
  3439                           	opt stack 26
  3440                           
  3441                           ;Serial.c: 20: TRISCbits.TRISC7 = 1; TRISCbits.TRISC6 = 0;
  3442                           
  3443                           ;incstack = 0
  3444  002B10  8E94               	bsf	3988,7,c	;volatile
  3445  002B12  9C94               	bcf	3988,6,c	;volatile
  3446                           
  3447                           ;Serial.c: 22: SPBRG = (unsigned char) (48000000/(16*115200) - 1);
  3448  002B14  0E19               	movlw	25
  3449  002B16  6EAF               	movwf	4015,c	;volatile
  3450                           
  3451                           ;Serial.c: 23: SPBRGH = (unsigned char) (48000000/(16*115200) - 1);
  3452  002B18  0E19               	movlw	25
  3453  002B1A  6EB0               	movwf	4016,c	;volatile
  3454                           
  3455                           ;Serial.c: 25: CSRC = 0; TX9 = 0; TXEN = 1;
  3456  002B1C  9EAC               	bcf	4012,7,c	;volatile
  3457  002B1E  9CAC               	bcf	4012,6,c	;volatile
  3458  002B20  8AAC               	bsf	4012,5,c	;volatile
  3459                           
  3460                           ;Serial.c: 26: SYNC = 0; SENDB = 0; BRGH = 1;
  3461  002B22  98AC               	bcf	4012,4,c	;volatile
  3462  002B24  96AC               	bcf	4012,3,c	;volatile
  3463  002B26  84AC               	bsf	4012,2,c	;volatile
  3464                           
  3465                           ;Serial.c: 27: TRMT = 0; TX9D = 0; SPEN = 1;
  3466  002B28  92AC               	bcf	4012,1,c	;volatile
  3467  002B2A  90AC               	bcf	4012,0,c	;volatile
  3468  002B2C  8EAB               	bsf	4011,7,c	;volatile
  3469                           
  3470                           ;Serial.c: 28: RX9 = 0; SREN = 0; CREN = 1;
  3471  002B2E  9CAB               	bcf	4011,6,c	;volatile
  3472  002B30  9AAB               	bcf	4011,5,c	;volatile
  3473  002B32  88AB               	bsf	4011,4,c	;volatile
  3474                           
  3475                           ;Serial.c: 29: ADDEN = 0; FERR = 0; OERR = 0;
  3476  002B34  96AB               	bcf	4011,3,c	;volatile
  3477  002B36  94AB               	bcf	4011,2,c	;volatile
  3478  002B38  92AB               	bcf	4011,1,c	;volatile
  3479                           
  3480                           ;Serial.c: 30: RX9D = 0; TXIE = 0; RCIE = 1;
  3481  002B3A  90AB               	bcf	4011,0,c	;volatile
  3482  002B3C  989D               	bcf	3997,4,c	;volatile
  3483  002B3E  8A9D               	bsf	3997,5,c	;volatile
  3484  002B40  0012               	return	
  3485  002B42                     __end_of_initUART:
  3486                           	opt stack 0
  3487                           tblptru	equ	0xFF8
  3488                           tblptrh	equ	0xFF7
  3489                           tblptrl	equ	0xFF6
  3490                           tablat	equ	0xFF5
  3491                           postinc0	equ	0xFEE
  3492                           wreg	equ	0xFE8
  3493                           postdec1	equ	0xFE5
  3494                           fsr1l	equ	0xFE1
  3495                           status	equ	0xFD8
  3496                           
  3497 ;; *************** function _initI2C *****************
  3498 ;; Defined at:
  3499 ;;		line 3 in file "ADXL345.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;  Adress1         1    wreg     unsigned char 
  3502 ;;  Adress2         1   20[COMRAM] unsigned char 
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;  Adress1         1   21[COMRAM] unsigned char 
  3505 ;; Return value:  Size  Location     Type
  3506 ;;                  1    wreg      void 
  3507 ;; Registers used:
  3508 ;;		wreg, status,2, status,0, cstack
  3509 ;; Tracked objects:
  3510 ;;		On entry : 0/0
  3511 ;;		On exit  : 0/0
  3512 ;;		Unchanged: 0/0
  3513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3514 ;;      Params:         1       0       0       0       0       0       0       0       0
  3515 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3516 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3517 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3518 ;;Total ram usage:        2 bytes
  3519 ;; Hardware stack levels used:    1
  3520 ;; Hardware stack levels required when called:    6
  3521 ;; This function calls:
  3522 ;;		_IdleI2C
  3523 ;;		_WriteI2C
  3524 ;; This function is called by:
  3525 ;;		_main
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           	psect	text9
  3530  002528                     __ptext9:
  3531                           	opt stack 0
  3532  002528                     _initI2C:
  3533                           	opt stack 24
  3534                           
  3535                           ;incstack = 0
  3536                           ;initI2C@Adress1 stored from wreg
  3537  002528  6E16               	movwf	initI2C@Adress1,c
  3538                           
  3539                           ;ADXL345.c: 5: SSPSTAT = 0b10000000;
  3540  00252A  0E80               	movlw	128
  3541  00252C  6EC7               	movwf	4039,c	;volatile
  3542                           
  3543                           ;ADXL345.c: 6: SSPCON1 = 0b00101000;
  3544  00252E  0E28               	movlw	40
  3545  002530  6EC6               	movwf	4038,c	;volatile
  3546                           
  3547                           ;ADXL345.c: 7: SSPCON2 = 0x00;
  3548  002532  0E00               	movlw	0
  3549  002534  6EC5               	movwf	4037,c	;volatile
  3550                           
  3551                           ;ADXL345.c: 8: PIE1bits.SSPIE=0;
  3552  002536  969D               	bcf	3997,3,c	;volatile
  3553                           
  3554                           ;ADXL345.c: 9: PIR1bits.SSPIF=0;
  3555  002538  969E               	bcf	3998,3,c	;volatile
  3556                           
  3557                           ;ADXL345.c: 11: SSPADD = 119;
  3558  00253A  0E77               	movlw	119
  3559  00253C  6EC8               	movwf	4040,c	;volatile
  3560                           
  3561                           ;ADXL345.c: 14: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  3562  00253E  80C5               	bsf	4037,0,c	;volatile
  3563  002540                     l45:
  3564  002540  B0C5               	btfsc	4037,0,c	;volatile
  3565  002542  D7FE               	goto	l45
  3566                           
  3567                           ;ADXL345.c: 15: WriteI2C(Adress1);
  3568  002544  5016               	movf	initI2C@Adress1,w,c
  3569  002546  EC02  F015         	call	_WriteI2C
  3570                           
  3571                           ;ADXL345.c: 16: IdleI2C();
  3572  00254A  EC03  F016         	call	_IdleI2C	;wreg free
  3573                           
  3574                           ;ADXL345.c: 17: WriteI2C(Adress2);
  3575  00254E  5015               	movf	initI2C@Adress2,w,c
  3576  002550  EC02  F015         	call	_WriteI2C
  3577                           
  3578                           ;ADXL345.c: 18: IdleI2C();
  3579  002554  EC03  F016         	call	_IdleI2C	;wreg free
  3580                           
  3581                           ;ADXL345.c: 19: WriteI2C(8);
  3582  002558  0E08               	movlw	8
  3583  00255A  EC02  F015         	call	_WriteI2C
  3584                           
  3585                           ;ADXL345.c: 20: IdleI2C();
  3586  00255E  EC03  F016         	call	_IdleI2C	;wreg free
  3587                           
  3588                           ;ADXL345.c: 21: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  3589  002562  84C5               	bsf	4037,2,c	;volatile
  3590  002564                     l48:
  3591  002564  B4C5               	btfsc	4037,2,c	;volatile
  3592  002566  D7FE               	goto	l48
  3593                           
  3594                           ;ADXL345.c: 24: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  3595  002568  80C5               	bsf	4037,0,c	;volatile
  3596  00256A                     l51:
  3597  00256A  B0C5               	btfsc	4037,0,c	;volatile
  3598  00256C  D7FE               	goto	l51
  3599                           
  3600                           ;ADXL345.c: 25: WriteI2C(0xD2);
  3601  00256E  0ED2               	movlw	210
  3602  002570  EC02  F015         	call	_WriteI2C
  3603                           
  3604                           ;ADXL345.c: 26: IdleI2C();
  3605  002574  EC03  F016         	call	_IdleI2C	;wreg free
  3606                           
  3607                           ;ADXL345.c: 27: WriteI2C(0x20);
  3608  002578  0E20               	movlw	32
  3609  00257A  EC02  F015         	call	_WriteI2C
  3610                           
  3611                           ;ADXL345.c: 28: IdleI2C();
  3612  00257E  EC03  F016         	call	_IdleI2C	;wreg free
  3613                           
  3614                           ;ADXL345.c: 29: WriteI2C(0x0F);
  3615  002582  0E0F               	movlw	15
  3616  002584  EC02  F015         	call	_WriteI2C
  3617                           
  3618                           ;ADXL345.c: 30: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  3619  002588  8AC5               	bsf	4037,5,c	;volatile
  3620  00258A  88C5               	bsf	4037,4,c	;volatile
  3621  00258C                     l54:
  3622  00258C  B8C5               	btfsc	4037,4,c	;volatile
  3623  00258E  D7FE               	goto	l54
  3624                           
  3625                           ;ADXL345.c: 31: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  3626  002590  84C5               	bsf	4037,2,c	;volatile
  3627  002592                     l57:
  3628  002592  B4C5               	btfsc	4037,2,c	;volatile
  3629  002594  D7FE               	goto	l57
  3630                           
  3631                           ;ADXL345.c: 33: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  3632  002596  80C5               	bsf	4037,0,c	;volatile
  3633  002598                     l60:
  3634  002598  B0C5               	btfsc	4037,0,c	;volatile
  3635  00259A  D7FE               	goto	l60
  3636                           
  3637                           ;ADXL345.c: 34: WriteI2C(0xD2);
  3638  00259C  0ED2               	movlw	210
  3639  00259E  EC02  F015         	call	_WriteI2C
  3640                           
  3641                           ;ADXL345.c: 35: IdleI2C();
  3642  0025A2  EC03  F016         	call	_IdleI2C	;wreg free
  3643                           
  3644                           ;ADXL345.c: 36: WriteI2C(0x22);
  3645  0025A6  0E22               	movlw	34
  3646  0025A8  EC02  F015         	call	_WriteI2C
  3647                           
  3648                           ;ADXL345.c: 37: IdleI2C();
  3649  0025AC  EC03  F016         	call	_IdleI2C	;wreg free
  3650                           
  3651                           ;ADXL345.c: 38: WriteI2C(0x08);
  3652  0025B0  0E08               	movlw	8
  3653  0025B2  EC02  F015         	call	_WriteI2C
  3654                           
  3655                           ;ADXL345.c: 39: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  3656  0025B6  8AC5               	bsf	4037,5,c	;volatile
  3657  0025B8  88C5               	bsf	4037,4,c	;volatile
  3658  0025BA                     l63:
  3659  0025BA  B8C5               	btfsc	4037,4,c	;volatile
  3660  0025BC  D7FE               	goto	l63
  3661                           
  3662                           ;ADXL345.c: 40: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  3663  0025BE  84C5               	bsf	4037,2,c	;volatile
  3664  0025C0                     l66:
  3665  0025C0  B4C5               	btfsc	4037,2,c	;volatile
  3666  0025C2  D7FE               	goto	l66
  3667                           
  3668                           ;ADXL345.c: 42: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  3669  0025C4  80C5               	bsf	4037,0,c	;volatile
  3670  0025C6                     l69:
  3671  0025C6  B0C5               	btfsc	4037,0,c	;volatile
  3672  0025C8  D7FE               	goto	l69
  3673                           
  3674                           ;ADXL345.c: 43: WriteI2C(0xD2);
  3675  0025CA  0ED2               	movlw	210
  3676  0025CC  EC02  F015         	call	_WriteI2C
  3677                           
  3678                           ;ADXL345.c: 44: IdleI2C();
  3679  0025D0  EC03  F016         	call	_IdleI2C	;wreg free
  3680                           
  3681                           ;ADXL345.c: 45: WriteI2C(0x23);
  3682  0025D4  0E23               	movlw	35
  3683  0025D6  EC02  F015         	call	_WriteI2C
  3684                           
  3685                           ;ADXL345.c: 46: IdleI2C();
  3686  0025DA  EC03  F016         	call	_IdleI2C	;wreg free
  3687                           
  3688                           ;ADXL345.c: 47: WriteI2C(0x30);
  3689  0025DE  0E30               	movlw	48
  3690  0025E0  EC02  F015         	call	_WriteI2C
  3691                           
  3692                           ;ADXL345.c: 48: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  3693  0025E4  8AC5               	bsf	4037,5,c	;volatile
  3694  0025E6  88C5               	bsf	4037,4,c	;volatile
  3695  0025E8                     l72:
  3696  0025E8  B8C5               	btfsc	4037,4,c	;volatile
  3697  0025EA  D7FE               	goto	l72
  3698                           
  3699                           ;ADXL345.c: 49: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  3700  0025EC  84C5               	bsf	4037,2,c	;volatile
  3701  0025EE                     l75:
  3702  0025EE  A4C5               	btfss	4037,2,c	;volatile
  3703  0025F0  0012               	return	
  3704  0025F2  D7FD               	goto	l75
  3705  0025F4                     __end_of_initI2C:
  3706                           	opt stack 0
  3707                           tblptru	equ	0xFF8
  3708                           tblptrh	equ	0xFF7
  3709                           tblptrl	equ	0xFF6
  3710                           tablat	equ	0xFF5
  3711                           postinc0	equ	0xFEE
  3712                           wreg	equ	0xFE8
  3713                           postdec1	equ	0xFE5
  3714                           fsr1l	equ	0xFE1
  3715                           status	equ	0xFD8
  3716                           
  3717 ;; *************** function _WriteI2C *****************
  3718 ;; Defined at:
  3719 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\i2c\i2c_writ.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;  data_out        1    wreg     unsigned char 
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;  data_out        1   19[COMRAM] unsigned char 
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  1    wreg      char 
  3726 ;; Registers used:
  3727 ;;		wreg, status,2, status,0, cstack
  3728 ;; Tracked objects:
  3729 ;;		On entry : 0/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3733 ;;      Params:         0       0       0       0       0       0       0       0       0
  3734 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3735 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3736 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3737 ;;Total ram usage:        1 bytes
  3738 ;; Hardware stack levels used:    1
  3739 ;; Hardware stack levels required when called:    5
  3740 ;; This function calls:
  3741 ;;		_IdleI2C
  3742 ;; This function is called by:
  3743 ;;		_initI2C
  3744 ;;		_readACC
  3745 ;;		_readGIRO
  3746 ;; This function uses a non-reentrant model
  3747 ;;
  3748                           
  3749                           	psect	text10
  3750  002A04                     __ptext10:
  3751                           	opt stack 0
  3752  002A04                     _WriteI2C:
  3753                           	opt stack 22
  3754                           
  3755                           ;incstack = 0
  3756                           ;WriteI2C@data_out stored from wreg
  3757  002A04  6E14               	movwf	WriteI2C@data_out,c
  3758  002A06  C014  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  3759  002A0A  BEC6               	btfsc	4038,7,c	;volatile
  3760  002A0C  0012               	return	
  3761                           
  3762                           ;	Return value of _WriteI2C is never used
  3763  002A0E  50C6               	movf	4038,w,c	;volatile
  3764  002A10  0B0F               	andlw	15
  3765  002A12  0A08               	xorlw	8
  3766  002A14  B4D8               	btfsc	status,2,c
  3767  002A16  D00C               	goto	l3619
  3768  002A18  50C6               	movf	4038,w,c	;volatile
  3769  002A1A  0B0F               	andlw	15
  3770  002A1C  0A0B               	xorlw	11
  3771  002A1E  B4D8               	btfsc	status,2,c
  3772  002A20  D007               	goto	l3619
  3773  002A22  88C6               	bsf	4038,4,c	;volatile
  3774  002A24                     l716:
  3775  002A24  A69E               	btfss	3998,3,c	;volatile
  3776  002A26  D7FE               	goto	l716
  3777  002A28  B4C7               	btfsc	4039,2,c	;volatile
  3778  002A2A  0012               	return	
  3779  002A2C  50C7               	movf	4039,w,c	;volatile
  3780                           
  3781                           ;	Return value of _WriteI2C is never used
  3782                           
  3783                           ;	Return value of _WriteI2C is never used
  3784  002A2E  0012               	return	
  3785  002A30                     l3619:
  3786  002A30  50C6               	movf	4038,w,c	;volatile
  3787  002A32  0B0F               	andlw	15
  3788  002A34  0A08               	xorlw	8
  3789  002A36  B4D8               	btfsc	status,2,c
  3790  002A38  D005               	goto	l725
  3791  002A3A  50C6               	movf	4038,w,c	;volatile
  3792  002A3C  0B0F               	andlw	15
  3793  002A3E  0A0B               	xorlw	11
  3794  002A40  A4D8               	btfss	status,2,c
  3795  002A42  0012               	return	
  3796  002A44                     l725:
  3797  002A44  B0C7               	btfsc	4039,0,c	;volatile
  3798  002A46  D7FE               	goto	l725
  3799  002A48  EC03  F016         	call	_IdleI2C	;wreg free
  3800  002A4C  50C5               	movf	4037,w,c	;volatile
  3801                           
  3802                           ;	Return value of _WriteI2C is never used
  3803                           
  3804                           ;	Return value of _WriteI2C is never used
  3805  002A4E  0012               	return	
  3806  002A50                     __end_of_WriteI2C:
  3807                           	opt stack 0
  3808                           tblptru	equ	0xFF8
  3809                           tblptrh	equ	0xFF7
  3810                           tblptrl	equ	0xFF6
  3811                           tablat	equ	0xFF5
  3812                           postinc0	equ	0xFEE
  3813                           wreg	equ	0xFE8
  3814                           postdec1	equ	0xFE5
  3815                           fsr1l	equ	0xFE1
  3816                           status	equ	0xFD8
  3817                           
  3818 ;; *************** function _IdleI2C *****************
  3819 ;; Defined at:
  3820 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\i2c\i2c_idle.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;		None
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;		None
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  1    wreg      void 
  3827 ;; Registers used:
  3828 ;;		wreg, status,2, status,0
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3834 ;;      Params:         0       0       0       0       0       0       0       0       0
  3835 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3836 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3837 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3838 ;;Total ram usage:        1 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    4
  3841 ;; This function calls:
  3842 ;;		Nothing
  3843 ;; This function is called by:
  3844 ;;		_initI2C
  3845 ;;		_readACC
  3846 ;;		_readGIRO
  3847 ;;		_WriteI2C
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text11
  3852  002C06                     __ptext11:
  3853                           	opt stack 0
  3854  002C06                     _IdleI2C:
  3855                           	opt stack 22
  3856  002C06                     l3595:
  3857  002C06  CFC5 F013          	movff	4037,??_IdleI2C	;volatile
  3858  002C0A  0E1F               	movlw	31
  3859  002C0C  1613               	andwf	??_IdleI2C,f,c
  3860  002C0E  A4D8               	btfss	status,2,c
  3861  002C10  D7FA               	goto	l3595
  3862  002C12  A4C7               	btfss	4039,2,c	;volatile
  3863  002C14  0012               	return	
  3864  002C16  D7F7               	goto	l3595
  3865  002C18                     __end_of_IdleI2C:
  3866                           	opt stack 0
  3867                           tblptru	equ	0xFF8
  3868                           tblptrh	equ	0xFF7
  3869                           tblptrl	equ	0xFF6
  3870                           tablat	equ	0xFF5
  3871                           postinc0	equ	0xFEE
  3872                           wreg	equ	0xFE8
  3873                           postdec1	equ	0xFE5
  3874                           fsr1l	equ	0xFE1
  3875                           status	equ	0xFD8
  3876                           
  3877 ;; *************** function _delayMS *****************
  3878 ;; Defined at:
  3879 ;;		line 11 in file "Serial.c"
  3880 ;; Parameters:    Size  Location     Type
  3881 ;;  waitTime        2   18[COMRAM] unsigned int 
  3882 ;; Auto vars:     Size  Location     Type
  3883 ;;  j               2   21[COMRAM] unsigned int 
  3884 ;; Return value:  Size  Location     Type
  3885 ;;                  1    wreg      void 
  3886 ;; Registers used:
  3887 ;;		wreg, status,2, status,0
  3888 ;; Tracked objects:
  3889 ;;		On entry : 0/0
  3890 ;;		On exit  : 0/0
  3891 ;;		Unchanged: 0/0
  3892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3893 ;;      Params:         2       0       0       0       0       0       0       0       0
  3894 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3895 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3896 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3897 ;;Total ram usage:        5 bytes
  3898 ;; Hardware stack levels used:    1
  3899 ;; Hardware stack levels required when called:    4
  3900 ;; This function calls:
  3901 ;;		Nothing
  3902 ;; This function is called by:
  3903 ;;		_main
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907                           	psect	text12
  3908  002B72                     __ptext12:
  3909                           	opt stack 0
  3910  002B72                     _delayMS:
  3911                           	opt stack 26
  3912                           
  3913                           ;Serial.c: 13: for(unsigned j = 0; j < waitTime; ++j)
  3914                           
  3915                           ;incstack = 0
  3916  002B72  0E00               	movlw	0
  3917  002B74  6E17               	movwf	delayMS@j+1,c
  3918  002B76  0E00               	movlw	0
  3919  002B78  6E16               	movwf	delayMS@j,c
  3920  002B7A  D00A               	goto	l363
  3921  002B7C                     l3995:
  3922                           
  3923                           ;Serial.c: 14: _delay((unsigned long)((1)*(48000000/4000.0)));
  3924  002B7C  0E10               	movlw	16
  3925  002B7E  6E15               	movwf	??_delayMS& (0+255),c
  3926  002B80  0E94               	movlw	148
  3927  002B82                     u4557:
  3928  002B82  2EE8               	decfsz	wreg,f,c
  3929  002B84  D7FE               	goto	u4557
  3930  002B86  2E15               	decfsz	??_delayMS& (0+255),f,c
  3931  002B88  D7FC               	goto	u4557
  3932  002B8A  D000               	nop2	
  3933  002B8C  4A16               	infsnz	delayMS@j,f,c
  3934  002B8E  2A17               	incf	delayMS@j+1,f,c
  3935  002B90                     l363:
  3936  002B90  5013               	movf	delayMS@waitTime,w,c
  3937  002B92  5C16               	subwf	delayMS@j,w,c
  3938  002B94  5014               	movf	delayMS@waitTime+1,w,c
  3939  002B96  5817               	subwfb	delayMS@j+1,w,c
  3940  002B98  B0D8               	btfsc	status,0,c
  3941  002B9A  0012               	return	
  3942  002B9C  D7EF               	goto	l3995
  3943  002B9E                     __end_of_delayMS:
  3944                           	opt stack 0
  3945                           tblptru	equ	0xFF8
  3946                           tblptrh	equ	0xFF7
  3947                           tblptrl	equ	0xFF6
  3948                           tablat	equ	0xFF5
  3949                           postinc0	equ	0xFEE
  3950                           wreg	equ	0xFE8
  3951                           postdec1	equ	0xFE5
  3952                           fsr1l	equ	0xFE1
  3953                           status	equ	0xFD8
  3954                           
  3955 ;; *************** function ___fttol *****************
  3956 ;; Defined at:
  3957 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  3958 ;; Parameters:    Size  Location     Type
  3959 ;;  f1              3   18[COMRAM] float 
  3960 ;; Auto vars:     Size  Location     Type
  3961 ;;  lval            4   28[COMRAM] unsigned long 
  3962 ;;  exp1            1   32[COMRAM] unsigned char 
  3963 ;;  sign1           1   27[COMRAM] unsigned char 
  3964 ;; Return value:  Size  Location     Type
  3965 ;;                  4   18[COMRAM] long 
  3966 ;; Registers used:
  3967 ;;		wreg, status,2, status,0
  3968 ;; Tracked objects:
  3969 ;;		On entry : 0/0
  3970 ;;		On exit  : 0/0
  3971 ;;		Unchanged: 0/0
  3972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3973 ;;      Params:         4       0       0       0       0       0       0       0       0
  3974 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3975 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3976 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3977 ;;Total ram usage:       15 bytes
  3978 ;; Hardware stack levels used:    1
  3979 ;; Hardware stack levels required when called:    4
  3980 ;; This function calls:
  3981 ;;		Nothing
  3982 ;; This function is called by:
  3983 ;;		_main
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987                           	psect	text13
  3988  002340                     __ptext13:
  3989                           	opt stack 0
  3990  002340                     ___fttol:
  3991                           	opt stack 26
  3992                           
  3993                           ;incstack = 0
  3994  002340  C015  F017         	movff	___fttol@f1+2,??___fttol
  3995  002344  6A18               	clrf	(??___fttol+1)& (0+255),c
  3996  002346  6A19               	clrf	(??___fttol+2)& (0+255),c
  3997  002348  3414               	rlcf	___fttol@f1+1,w,c
  3998  00234A  3617               	rlcf	??___fttol& (0+255),f,c
  3999  00234C  E301               	bnc	u4291
  4000  00234E  8018               	bsf	(??___fttol+1)& (0+255),0,c
  4001  002350                     u4291:
  4002  002350  5017               	movf	??___fttol,w,c
  4003  002352  6E21               	movwf	___fttol@exp1,c
  4004  002354  5021               	movf	___fttol@exp1,w,c
  4005  002356  A4D8               	btfss	status,2,c
  4006  002358  D009               	goto	l4079
  4007  00235A  0E00               	movlw	0
  4008  00235C  6E13               	movwf	?___fttol,c
  4009  00235E  0E00               	movlw	0
  4010  002360  6E14               	movwf	?___fttol+1,c
  4011  002362  0E00               	movlw	0
  4012  002364  6E15               	movwf	?___fttol+2,c
  4013  002366  0E00               	movlw	0
  4014  002368  6E16               	movwf	?___fttol+3,c
  4015  00236A  0012               	return	
  4016  00236C                     l4079:
  4017  00236C  0E17               	movlw	23
  4018  00236E  6E17               	movwf	??___fttol& (0+255),c
  4019  002370  C013  F018         	movff	___fttol@f1,??___fttol+1
  4020  002374  C014  F019         	movff	___fttol@f1+1,??___fttol+2
  4021  002378  C015  F01A         	movff	___fttol@f1+2,??___fttol+3
  4022  00237C  2817               	incf	??___fttol,w,c
  4023  00237E  6E1B               	movwf	(??___fttol+4)& (0+255),c
  4024  002380  D004               	goto	u4310
  4025  002382                     u4315:
  4026  002382  90D8               	bcf	status,0,c
  4027  002384  321A               	rrcf	??___fttol+3,f,c
  4028  002386  3219               	rrcf	??___fttol+2,f,c
  4029  002388  3218               	rrcf	??___fttol+1,f,c
  4030  00238A                     u4310:
  4031  00238A  2E1B               	decfsz	(??___fttol+4)& (0+255),f,c
  4032  00238C  D7FA               	goto	u4315
  4033  00238E  5018               	movf	??___fttol+1,w,c
  4034  002390  6E1C               	movwf	___fttol@sign1,c
  4035  002392  8E14               	bsf	___fttol@f1+1,7,c
  4036  002394  0EFF               	movlw	255
  4037  002396  1613               	andwf	___fttol@f1,f,c
  4038  002398  0EFF               	movlw	255
  4039  00239A  1614               	andwf	___fttol@f1+1,f,c
  4040  00239C  0E00               	movlw	0
  4041  00239E  1615               	andwf	___fttol@f1+2,f,c
  4042  0023A0  5013               	movf	___fttol@f1,w,c
  4043  0023A2  6E1D               	movwf	___fttol@lval,c
  4044  0023A4  5014               	movf	___fttol@f1+1,w,c
  4045  0023A6  6E1E               	movwf	___fttol@lval+1,c
  4046  0023A8  5015               	movf	___fttol@f1+2,w,c
  4047  0023AA  6E1F               	movwf	___fttol@lval+2,c
  4048  0023AC  6A20               	clrf	___fttol@lval+3,c
  4049  0023AE  0E8E               	movlw	142
  4050  0023B0  5E21               	subwf	___fttol@exp1,f,c
  4051  0023B2  AE21               	btfss	___fttol@exp1,7,c
  4052  0023B4  D016               	goto	l4101
  4053  0023B6  5021               	movf	___fttol@exp1,w,c
  4054  0023B8  0A80               	xorlw	128
  4055  0023BA  0F8F               	addlw	143
  4056  0023BC  B0D8               	btfsc	status,0,c
  4057  0023BE  D009               	goto	l4097
  4058  0023C0  0E00               	movlw	0
  4059  0023C2  6E13               	movwf	?___fttol,c
  4060  0023C4  0E00               	movlw	0
  4061  0023C6  6E14               	movwf	?___fttol+1,c
  4062  0023C8  0E00               	movlw	0
  4063  0023CA  6E15               	movwf	?___fttol+2,c
  4064  0023CC  0E00               	movlw	0
  4065  0023CE  6E16               	movwf	?___fttol+3,c
  4066  0023D0  0012               	return	
  4067  0023D2                     l4097:
  4068  0023D2  90D8               	bcf	status,0,c
  4069  0023D4  3220               	rrcf	___fttol@lval+3,f,c
  4070  0023D6  321F               	rrcf	___fttol@lval+2,f,c
  4071  0023D8  321E               	rrcf	___fttol@lval+1,f,c
  4072  0023DA  321D               	rrcf	___fttol@lval,f,c
  4073  0023DC  3E21               	incfsz	___fttol@exp1,f,c
  4074  0023DE  D7F9               	goto	l4097
  4075  0023E0  D015               	goto	l4111
  4076  0023E2                     l4101:
  4077  0023E2  0E17               	movlw	23
  4078  0023E4  6421               	cpfsgt	___fttol@exp1,c
  4079  0023E6  D00F               	goto	l4109
  4080  0023E8  0E00               	movlw	0
  4081  0023EA  6E13               	movwf	?___fttol,c
  4082  0023EC  0E00               	movlw	0
  4083  0023EE  6E14               	movwf	?___fttol+1,c
  4084  0023F0  0E00               	movlw	0
  4085  0023F2  6E15               	movwf	?___fttol+2,c
  4086  0023F4  0E00               	movlw	0
  4087  0023F6  6E16               	movwf	?___fttol+3,c
  4088  0023F8  0012               	return	
  4089  0023FA                     l4107:
  4090  0023FA  90D8               	bcf	status,0,c
  4091  0023FC  361D               	rlcf	___fttol@lval,f,c
  4092  0023FE  361E               	rlcf	___fttol@lval+1,f,c
  4093  002400  361F               	rlcf	___fttol@lval+2,f,c
  4094  002402  3620               	rlcf	___fttol@lval+3,f,c
  4095  002404  0621               	decf	___fttol@exp1,f,c
  4096  002406                     l4109:
  4097  002406  5021               	movf	___fttol@exp1,w,c
  4098  002408  A4D8               	btfss	status,2,c
  4099  00240A  D7F7               	goto	l4107
  4100  00240C                     l4111:
  4101  00240C  501C               	movf	___fttol@sign1,w,c
  4102  00240E  B4D8               	btfsc	status,2,c
  4103  002410  D008               	goto	l4115
  4104  002412  1E20               	comf	___fttol@lval+3,f,c
  4105  002414  1E1F               	comf	___fttol@lval+2,f,c
  4106  002416  1E1E               	comf	___fttol@lval+1,f,c
  4107  002418  6C1D               	negf	___fttol@lval,c
  4108  00241A  0E00               	movlw	0
  4109  00241C  221E               	addwfc	___fttol@lval+1,f,c
  4110  00241E  221F               	addwfc	___fttol@lval+2,f,c
  4111  002420  2220               	addwfc	___fttol@lval+3,f,c
  4112  002422                     l4115:
  4113  002422  C01D  F013         	movff	___fttol@lval,?___fttol
  4114  002426  C01E  F014         	movff	___fttol@lval+1,?___fttol+1
  4115  00242A  C01F  F015         	movff	___fttol@lval+2,?___fttol+2
  4116  00242E  C020  F016         	movff	___fttol@lval+3,?___fttol+3
  4117  002432  0012               	return	
  4118  002434                     __end_of___fttol:
  4119                           	opt stack 0
  4120                           tblptru	equ	0xFF8
  4121                           tblptrh	equ	0xFF7
  4122                           tblptrl	equ	0xFF6
  4123                           tablat	equ	0xFF5
  4124                           postinc0	equ	0xFEE
  4125                           wreg	equ	0xFE8
  4126                           postdec1	equ	0xFE5
  4127                           fsr1l	equ	0xFE1
  4128                           status	equ	0xFD8
  4129                           
  4130 ;; *************** function _PWM_Init *****************
  4131 ;; Defined at:
  4132 ;;		line 4 in file "PWM.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;		None
  4135 ;; Auto vars:     Size  Location     Type
  4136 ;;		None
  4137 ;; Return value:  Size  Location     Type
  4138 ;;                  1    wreg      void 
  4139 ;; Registers used:
  4140 ;;		wreg, status,2
  4141 ;; Tracked objects:
  4142 ;;		On entry : 0/0
  4143 ;;		On exit  : 0/0
  4144 ;;		Unchanged: 0/0
  4145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4146 ;;      Params:         0       0       0       0       0       0       0       0       0
  4147 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4148 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4149 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4150 ;;Total ram usage:        0 bytes
  4151 ;; Hardware stack levels used:    1
  4152 ;; Hardware stack levels required when called:    4
  4153 ;; This function calls:
  4154 ;;		Nothing
  4155 ;; This function is called by:
  4156 ;;		_main
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           	psect	text14
  4161  002BDA                     __ptext14:
  4162                           	opt stack 0
  4163  002BDA                     _PWM_Init:
  4164                           	opt stack 26
  4165                           
  4166                           ;PWM.c: 5: INTCON = 0xA0;
  4167                           
  4168                           ;incstack = 0
  4169  002BDA  0EA0               	movlw	160
  4170  002BDC  6EF2               	movwf	intcon,c	;volatile
  4171                           
  4172                           ;PWM.c: 8: T0CON = 0xC1;
  4173  002BDE  0EC1               	movlw	193
  4174  002BE0  6ED5               	movwf	4053,c	;volatile
  4175                           
  4176                           ;PWM.c: 13: TRISB = 0x03;
  4177  002BE2  0E03               	movlw	3
  4178  002BE4  6E93               	movwf	3987,c	;volatile
  4179                           
  4180                           ;PWM.c: 14: LATB = 0x03;
  4181  002BE6  0E03               	movlw	3
  4182  002BE8  6E8A               	movwf	3978,c	;volatile
  4183                           
  4184                           ;PWM.c: 15: TMR0L = freq;
  4185  002BEA  C046  FFD6         	movff	_freq,4054	;volatile
  4186  002BEE  0012               	return	
  4187  002BF0                     __end_of_PWM_Init:
  4188                           	opt stack 0
  4189                           tblptru	equ	0xFF8
  4190                           tblptrh	equ	0xFF7
  4191                           tblptrl	equ	0xFF6
  4192                           tablat	equ	0xFF5
  4193                           intcon	equ	0xFF2
  4194                           postinc0	equ	0xFEE
  4195                           wreg	equ	0xFE8
  4196                           postdec1	equ	0xFE5
  4197                           fsr1l	equ	0xFE1
  4198                           status	equ	0xFD8
  4199                           
  4200 ;; *************** function _PID_outputControlCalc *****************
  4201 ;; Defined at:
  4202 ;;		line 3 in file "PID.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;  reference       3   21[BANK0 ] float 
  4205 ;;  systemOutput    3   24[BANK0 ] float 
  4206 ;;  whichPID        1   27[BANK0 ] unsigned char 
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;		None
  4209 ;; Return value:  Size  Location     Type
  4210 ;;                  1    wreg      void 
  4211 ;; Registers used:
  4212 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4218 ;;      Params:         0       7       0       0       0       0       0       0       0
  4219 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4220 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4221 ;;      Totals:         0      12       0       0       0       0       0       0       0
  4222 ;;Total ram usage:       12 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:    6
  4225 ;; This function calls:
  4226 ;;		___ftadd
  4227 ;;		___ftdiv
  4228 ;;		___ftge
  4229 ;;		___ftmul
  4230 ;;		___ftneg
  4231 ;; This function is called by:
  4232 ;;		_main
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           	psect	text15
  4237  00187A                     __ptext15:
  4238                           	opt stack 0
  4239  00187A                     _PID_outputControlCalc:
  4240                           	opt stack 24
  4241                           
  4242                           ;PID.c: 5: pid[whichPID].error = reference - systemOutput;
  4243                           
  4244                           ;incstack = 0
  4245  00187A  C0DA  F0C8         	movff	PID_outputControlCalc@systemOutput,___ftneg@f1
  4246  00187E  C0DB  F0C9         	movff	PID_outputControlCalc@systemOutput+1,___ftneg@f1+1
  4247  001882  C0DC  F0CA         	movff	PID_outputControlCalc@systemOutput+2,___ftneg@f1+2
  4248  001886  ECA1  F015         	call	___ftneg	;wreg free
  4249  00188A  C0C8  F0CB         	movff	?___ftneg,___ftadd@f1
  4250  00188E  C0C9  F0CC         	movff	?___ftneg+1,___ftadd@f1+1
  4251  001892  C0CA  F0CD         	movff	?___ftneg+2,___ftadd@f1+2
  4252  001896  C0D7  F0CE         	movff	PID_outputControlCalc@reference,___ftadd@f2
  4253  00189A  C0D8  F0CF         	movff	PID_outputControlCalc@reference+1,___ftadd@f2+1
  4254  00189E  C0D9  F0D0         	movff	PID_outputControlCalc@reference+2,___ftadd@f2+2
  4255  0018A2  ECE0  F00E         	call	___ftadd	;wreg free
  4256  0018A6  0100               	movlb	0	; () banked
  4257  0018A8  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4258  0018AA  0D25               	mullw	37
  4259  0018AC  0E09               	movlw	9
  4260  0018AE  26F3               	addwf	prodl,f,c
  4261  0018B0  0E00               	movlw	0
  4262  0018B2  22F4               	addwfc	prodh,f,c
  4263  0018B4  0E00               	movlw	low _pid
  4264  0018B6  24F3               	addwf	prodl,w,c
  4265  0018B8  6ED9               	movwf	fsr2l,c
  4266  0018BA  0E01               	movlw	high _pid
  4267  0018BC  20F4               	addwfc	prodh,w,c
  4268  0018BE  6EDA               	movwf	fsr2h,c
  4269  0018C0  C0CB  FFDE         	movff	?___ftadd,postinc2
  4270  0018C4  C0CC  FFDE         	movff	?___ftadd+1,postinc2
  4271  0018C8  C0CD  FFDE         	movff	?___ftadd+2,postinc2
  4272                           
  4273                           ;PID.c: 8: pid[whichPID].dError = ((pid[whichPID].error - pid[whichPID].aError)/pid[whic
      +                          hPID].step);
  4274  0018CC  0100               	movlb	0	; () banked
  4275  0018CE  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4276  0018D0  0D25               	mullw	37
  4277  0018D2  0E09               	movlw	9
  4278  0018D4  26F3               	addwf	prodl,f,c
  4279  0018D6  0E00               	movlw	0
  4280  0018D8  22F4               	addwfc	prodh,f,c
  4281  0018DA  0E00               	movlw	low _pid
  4282  0018DC  24F3               	addwf	prodl,w,c
  4283  0018DE  6ED9               	movwf	fsr2l,c
  4284  0018E0  0E01               	movlw	high _pid
  4285  0018E2  20F4               	addwfc	prodh,w,c
  4286  0018E4  6EDA               	movwf	fsr2h,c
  4287  0018E6  CFDE F0CE          	movff	postinc2,___ftadd@f2
  4288  0018EA  CFDE F0CF          	movff	postinc2,___ftadd@f2+1
  4289  0018EE  CFDD F0D0          	movff	postdec2,___ftadd@f2+2
  4290  0018F2  0100               	movlb	0	; () banked
  4291  0018F4  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4292  0018F6  0D25               	mullw	37
  4293  0018F8  0E12               	movlw	18
  4294  0018FA  26F3               	addwf	prodl,f,c
  4295  0018FC  0E00               	movlw	0
  4296  0018FE  22F4               	addwfc	prodh,f,c
  4297  001900  0E00               	movlw	low _pid
  4298  001902  24F3               	addwf	prodl,w,c
  4299  001904  6ED9               	movwf	fsr2l,c
  4300  001906  0E01               	movlw	high _pid
  4301  001908  20F4               	addwfc	prodh,w,c
  4302  00190A  6EDA               	movwf	fsr2h,c
  4303  00190C  CFDE F0C8          	movff	postinc2,___ftneg@f1
  4304  001910  CFDE F0C9          	movff	postinc2,___ftneg@f1+1
  4305  001914  CFDD F0CA          	movff	postdec2,___ftneg@f1+2
  4306  001918  ECA1  F015         	call	___ftneg	;wreg free
  4307  00191C  C0C8  F0CB         	movff	?___ftneg,___ftadd@f1
  4308  001920  C0C9  F0CC         	movff	?___ftneg+1,___ftadd@f1+1
  4309  001924  C0CA  F0CD         	movff	?___ftneg+2,___ftadd@f1+2
  4310  001928  ECE0  F00E         	call	___ftadd	;wreg free
  4311  00192C  C0CB  F032         	movff	?___ftadd,___ftdiv@f1
  4312  001930  C0CC  F033         	movff	?___ftadd+1,___ftdiv@f1+1
  4313  001934  C0CD  F034         	movff	?___ftadd+2,___ftdiv@f1+2
  4314  001938  0100               	movlb	0	; () banked
  4315  00193A  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4316  00193C  0D25               	mullw	37
  4317  00193E  0E15               	movlw	21
  4318  001940  26F3               	addwf	prodl,f,c
  4319  001942  0E00               	movlw	0
  4320  001944  22F4               	addwfc	prodh,f,c
  4321  001946  0E00               	movlw	low _pid
  4322  001948  24F3               	addwf	prodl,w,c
  4323  00194A  6ED9               	movwf	fsr2l,c
  4324  00194C  0E01               	movlw	high _pid
  4325  00194E  20F4               	addwfc	prodh,w,c
  4326  001950  6EDA               	movwf	fsr2h,c
  4327  001952  CFDE F035          	movff	postinc2,___ftdiv@f2
  4328  001956  CFDE F036          	movff	postinc2,___ftdiv@f2+1
  4329  00195A  CFDD F037          	movff	postdec2,___ftdiv@f2+2
  4330  00195E  EC1E  F011         	call	___ftdiv	;wreg free
  4331  001962  0100               	movlb	0	; () banked
  4332  001964  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4333  001966  0D25               	mullw	37
  4334  001968  0E0C               	movlw	12
  4335  00196A  26F3               	addwf	prodl,f,c
  4336  00196C  0E00               	movlw	0
  4337  00196E  22F4               	addwfc	prodh,f,c
  4338  001970  0E00               	movlw	low _pid
  4339  001972  24F3               	addwf	prodl,w,c
  4340  001974  6ED9               	movwf	fsr2l,c
  4341  001976  0E01               	movlw	high _pid
  4342  001978  20F4               	addwfc	prodh,w,c
  4343  00197A  6EDA               	movwf	fsr2h,c
  4344  00197C  C032  FFDE         	movff	?___ftdiv,postinc2
  4345  001980  C033  FFDE         	movff	?___ftdiv+1,postinc2
  4346  001984  C034  FFDE         	movff	?___ftdiv+2,postinc2
  4347                           
  4348                           ; BSR set to: 0
  4349                           ;PID.c: 9: pid[whichPID].aError = pid[whichPID].error;
  4350  001988  0100               	movlb	0	; () banked
  4351  00198A  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4352  00198C  0D25               	mullw	37
  4353  00198E  0E09               	movlw	9
  4354  001990  26F3               	addwf	prodl,f,c
  4355  001992  0E00               	movlw	0
  4356  001994  22F4               	addwfc	prodh,f,c
  4357  001996  0E00               	movlw	low _pid
  4358  001998  24F3               	addwf	prodl,w,c
  4359  00199A  6ED9               	movwf	fsr2l,c
  4360  00199C  0E01               	movlw	high _pid
  4361  00199E  20F4               	addwfc	prodh,w,c
  4362  0019A0  6EDA               	movwf	fsr2h,c
  4363  0019A2  0100               	movlb	0	; () banked
  4364  0019A4  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4365  0019A6  0D25               	mullw	37
  4366  0019A8  0E12               	movlw	18
  4367  0019AA  26F3               	addwf	prodl,f,c
  4368  0019AC  0E00               	movlw	0
  4369  0019AE  22F4               	addwfc	prodh,f,c
  4370  0019B0  0E00               	movlw	low _pid
  4371  0019B2  24F3               	addwf	prodl,w,c
  4372  0019B4  6EE1               	movwf	fsr1l,c
  4373  0019B6  0E01               	movlw	high _pid
  4374  0019B8  20F4               	addwfc	prodh,w,c
  4375  0019BA  6EE2               	movwf	fsr1h,c
  4376  0019BC  CFDE FFE6          	movff	postinc2,postinc1
  4377  0019C0  CFDE FFE6          	movff	postinc2,postinc1
  4378  0019C4  CFDE FFE6          	movff	postinc2,postinc1
  4379                           
  4380                           ; BSR set to: 0
  4381                           ;PID.c: 12: if(!pid[whichPID].checkUpLim && !pid[whichPID].checkLowLim)
  4382  0019C8  0100               	movlb	0	; () banked
  4383  0019CA  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4384  0019CC  0D25               	mullw	37
  4385  0019CE  0E21               	movlw	33
  4386  0019D0  26F3               	addwf	prodl,f,c
  4387  0019D2  0E00               	movlw	0
  4388  0019D4  22F4               	addwfc	prodh,f,c
  4389  0019D6  0E00               	movlw	low _pid
  4390  0019D8  24F3               	addwf	prodl,w,c
  4391  0019DA  6ED9               	movwf	fsr2l,c
  4392  0019DC  0E01               	movlw	high _pid
  4393  0019DE  20F4               	addwfc	prodh,w,c
  4394  0019E0  6EDA               	movwf	fsr2h,c
  4395  0019E2  50DE               	movf	postinc2,w,c
  4396  0019E4  10DE               	iorwf	postinc2,w,c
  4397  0019E6  A4D8               	btfss	status,2,c
  4398  0019E8  D067               	goto	l663
  4399                           
  4400                           ; BSR set to: 0
  4401  0019EA  0100               	movlb	0	; () banked
  4402  0019EC  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4403  0019EE  0D25               	mullw	37
  4404  0019F0  0E23               	movlw	35
  4405  0019F2  26F3               	addwf	prodl,f,c
  4406  0019F4  0E00               	movlw	0
  4407  0019F6  22F4               	addwfc	prodh,f,c
  4408  0019F8  0E00               	movlw	low _pid
  4409  0019FA  24F3               	addwf	prodl,w,c
  4410  0019FC  6ED9               	movwf	fsr2l,c
  4411  0019FE  0E01               	movlw	high _pid
  4412  001A00  20F4               	addwfc	prodh,w,c
  4413  001A02  6EDA               	movwf	fsr2h,c
  4414  001A04  50DE               	movf	postinc2,w,c
  4415  001A06  10DE               	iorwf	postinc2,w,c
  4416  001A08  A4D8               	btfss	status,2,c
  4417  001A0A  D056               	goto	l663
  4418                           
  4419                           ; BSR set to: 0
  4420                           ;PID.c: 13: pid[whichPID].iError += pid[whichPID].error*pid[whichPID].step;
  4421  001A0C  0100               	movlb	0	; () banked
  4422  001A0E  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4423  001A10  0D25               	mullw	37
  4424  001A12  0E0F               	movlw	15
  4425  001A14  26F3               	addwf	prodl,f,c
  4426  001A16  0E00               	movlw	0
  4427  001A18  22F4               	addwfc	prodh,f,c
  4428  001A1A  0E00               	movlw	low _pid
  4429  001A1C  24F3               	addwf	prodl,w,c
  4430  001A1E  6ED9               	movwf	fsr2l,c
  4431  001A20  0E01               	movlw	high _pid
  4432  001A22  20F4               	addwfc	prodh,w,c
  4433  001A24  6EDA               	movwf	fsr2h,c
  4434  001A26  CFDE F0CB          	movff	postinc2,___ftadd@f1
  4435  001A2A  CFDE F0CC          	movff	postinc2,___ftadd@f1+1
  4436  001A2E  CFDD F0CD          	movff	postdec2,___ftadd@f1+2
  4437  001A32  0100               	movlb	0	; () banked
  4438  001A34  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4439  001A36  0D25               	mullw	37
  4440  001A38  0E15               	movlw	21
  4441  001A3A  26F3               	addwf	prodl,f,c
  4442  001A3C  0E00               	movlw	0
  4443  001A3E  22F4               	addwfc	prodh,f,c
  4444  001A40  0E00               	movlw	low _pid
  4445  001A42  24F3               	addwf	prodl,w,c
  4446  001A44  6ED9               	movwf	fsr2l,c
  4447  001A46  0E01               	movlw	high _pid
  4448  001A48  20F4               	addwfc	prodh,w,c
  4449  001A4A  6EDA               	movwf	fsr2h,c
  4450  001A4C  CFDE F026          	movff	postinc2,___ftmul@f2
  4451  001A50  CFDE F027          	movff	postinc2,___ftmul@f2+1
  4452  001A54  CFDD F028          	movff	postdec2,___ftmul@f2+2
  4453  001A58  0100               	movlb	0	; () banked
  4454  001A5A  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4455  001A5C  0D25               	mullw	37
  4456  001A5E  0E09               	movlw	9
  4457  001A60  26F3               	addwf	prodl,f,c
  4458  001A62  0E00               	movlw	0
  4459  001A64  22F4               	addwfc	prodh,f,c
  4460  001A66  0E00               	movlw	low _pid
  4461  001A68  24F3               	addwf	prodl,w,c
  4462  001A6A  6ED9               	movwf	fsr2l,c
  4463  001A6C  0E01               	movlw	high _pid
  4464  001A6E  20F4               	addwfc	prodh,w,c
  4465  001A70  6EDA               	movwf	fsr2h,c
  4466  001A72  CFDE F023          	movff	postinc2,___ftmul@f1
  4467  001A76  CFDE F024          	movff	postinc2,___ftmul@f1+1
  4468  001A7A  CFDD F025          	movff	postdec2,___ftmul@f1+2
  4469  001A7E  EC1A  F012         	call	___ftmul	;wreg free
  4470  001A82  C023  F0CE         	movff	?___ftmul,___ftadd@f2
  4471  001A86  C024  F0CF         	movff	?___ftmul+1,___ftadd@f2+1
  4472  001A8A  C025  F0D0         	movff	?___ftmul+2,___ftadd@f2+2
  4473  001A8E  ECE0  F00E         	call	___ftadd	;wreg free
  4474  001A92  0100               	movlb	0	; () banked
  4475  001A94  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4476  001A96  0D25               	mullw	37
  4477  001A98  0E0F               	movlw	15
  4478  001A9A  26F3               	addwf	prodl,f,c
  4479  001A9C  0E00               	movlw	0
  4480  001A9E  22F4               	addwfc	prodh,f,c
  4481  001AA0  0E00               	movlw	low _pid
  4482  001AA2  24F3               	addwf	prodl,w,c
  4483  001AA4  6ED9               	movwf	fsr2l,c
  4484  001AA6  0E01               	movlw	high _pid
  4485  001AA8  20F4               	addwfc	prodh,w,c
  4486  001AAA  6EDA               	movwf	fsr2h,c
  4487  001AAC  C0CB  FFDE         	movff	?___ftadd,postinc2
  4488  001AB0  C0CC  FFDE         	movff	?___ftadd+1,postinc2
  4489  001AB4  C0CD  FFDE         	movff	?___ftadd+2,postinc2
  4490  001AB8                     l663:
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;PID.c: 15: pid[whichPID].controlSignal = (pid[whichPID].Kp*pid[whichPID].error + pid[wh
      +                          ichPID].Ki*pid[whichPID].iError + pid[whichPID].Kd*pid[whichPID].dError);
  4494  001AB8  0100               	movlb	0	; () banked
  4495  001ABA  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4496  001ABC  0D25               	mullw	37
  4497  001ABE  0E0F               	movlw	15
  4498  001AC0  26F3               	addwf	prodl,f,c
  4499  001AC2  0E00               	movlw	0
  4500  001AC4  22F4               	addwfc	prodh,f,c
  4501  001AC6  0E00               	movlw	low _pid
  4502  001AC8  24F3               	addwf	prodl,w,c
  4503  001ACA  6ED9               	movwf	fsr2l,c
  4504  001ACC  0E01               	movlw	high _pid
  4505  001ACE  20F4               	addwfc	prodh,w,c
  4506  001AD0  6EDA               	movwf	fsr2h,c
  4507  001AD2  CFDE F026          	movff	postinc2,___ftmul@f2
  4508  001AD6  CFDE F027          	movff	postinc2,___ftmul@f2+1
  4509  001ADA  CFDD F028          	movff	postdec2,___ftmul@f2+2
  4510  001ADE  0100               	movlb	0	; () banked
  4511  001AE0  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4512  001AE2  0D25               	mullw	37
  4513  001AE4  0E03               	movlw	3
  4514  001AE6  26F3               	addwf	prodl,f,c
  4515  001AE8  0E00               	movlw	0
  4516  001AEA  22F4               	addwfc	prodh,f,c
  4517  001AEC  0E00               	movlw	low _pid
  4518  001AEE  24F3               	addwf	prodl,w,c
  4519  001AF0  6ED9               	movwf	fsr2l,c
  4520  001AF2  0E01               	movlw	high _pid
  4521  001AF4  20F4               	addwfc	prodh,w,c
  4522  001AF6  6EDA               	movwf	fsr2h,c
  4523  001AF8  CFDE F023          	movff	postinc2,___ftmul@f1
  4524  001AFC  CFDE F024          	movff	postinc2,___ftmul@f1+1
  4525  001B00  CFDD F025          	movff	postdec2,___ftmul@f1+2
  4526  001B04  EC1A  F012         	call	___ftmul	;wreg free
  4527  001B08  C023  F0CE         	movff	?___ftmul,___ftadd@f2
  4528  001B0C  C024  F0CF         	movff	?___ftmul+1,___ftadd@f2+1
  4529  001B10  C025  F0D0         	movff	?___ftmul+2,___ftadd@f2+2
  4530  001B14  0100               	movlb	0	; () banked
  4531  001B16  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4532  001B18  0D25               	mullw	37
  4533  001B1A  0E09               	movlw	9
  4534  001B1C  26F3               	addwf	prodl,f,c
  4535  001B1E  0E00               	movlw	0
  4536  001B20  22F4               	addwfc	prodh,f,c
  4537  001B22  0E00               	movlw	low _pid
  4538  001B24  24F3               	addwf	prodl,w,c
  4539  001B26  6ED9               	movwf	fsr2l,c
  4540  001B28  0E01               	movlw	high _pid
  4541  001B2A  20F4               	addwfc	prodh,w,c
  4542  001B2C  6EDA               	movwf	fsr2h,c
  4543  001B2E  CFDE F026          	movff	postinc2,___ftmul@f2
  4544  001B32  CFDE F027          	movff	postinc2,___ftmul@f2+1
  4545  001B36  CFDD F028          	movff	postdec2,___ftmul@f2+2
  4546  001B3A  0100               	movlb	0	; () banked
  4547  001B3C  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4548  001B3E  0D25               	mullw	37
  4549  001B40  0E00               	movlw	low _pid
  4550  001B42  24F3               	addwf	prodl,w,c
  4551  001B44  6ED9               	movwf	fsr2l,c
  4552  001B46  0E01               	movlw	high _pid
  4553  001B48  20F4               	addwfc	prodh,w,c
  4554  001B4A  6EDA               	movwf	fsr2h,c
  4555  001B4C  CFDE F023          	movff	postinc2,___ftmul@f1
  4556  001B50  CFDE F024          	movff	postinc2,___ftmul@f1+1
  4557  001B54  CFDD F025          	movff	postdec2,___ftmul@f1+2
  4558  001B58  EC1A  F012         	call	___ftmul	;wreg free
  4559  001B5C  C023  F0CB         	movff	?___ftmul,___ftadd@f1
  4560  001B60  C024  F0CC         	movff	?___ftmul+1,___ftadd@f1+1
  4561  001B64  C025  F0CD         	movff	?___ftmul+2,___ftadd@f1+2
  4562  001B68  ECE0  F00E         	call	___ftadd	;wreg free
  4563  001B6C  C0CB  F0E0         	movff	?___ftadd,_PID_outputControlCalc$1984
  4564  001B70  C0CC  F0E1         	movff	?___ftadd+1,_PID_outputControlCalc$1984+1
  4565  001B74  C0CD  F0E2         	movff	?___ftadd+2,_PID_outputControlCalc$1984+2
  4566                           
  4567                           ;PID.c: 15: pid[whichPID].controlSignal = (pid[whichPID].Kp*pid[whichPID].error + pid[wh
      +                          ichPID].Ki*pid[whichPID].iError + pid[whichPID].Kd*pid[whichPID].dError);
  4568  001B78  C0E0  F0CB         	movff	_PID_outputControlCalc$1984,___ftadd@f1
  4569  001B7C  C0E1  F0CC         	movff	_PID_outputControlCalc$1984+1,___ftadd@f1+1
  4570  001B80  C0E2  F0CD         	movff	_PID_outputControlCalc$1984+2,___ftadd@f1+2
  4571  001B84  0100               	movlb	0	; () banked
  4572  001B86  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4573  001B88  0D25               	mullw	37
  4574  001B8A  0E0C               	movlw	12
  4575  001B8C  26F3               	addwf	prodl,f,c
  4576  001B8E  0E00               	movlw	0
  4577  001B90  22F4               	addwfc	prodh,f,c
  4578  001B92  0E00               	movlw	low _pid
  4579  001B94  24F3               	addwf	prodl,w,c
  4580  001B96  6ED9               	movwf	fsr2l,c
  4581  001B98  0E01               	movlw	high _pid
  4582  001B9A  20F4               	addwfc	prodh,w,c
  4583  001B9C  6EDA               	movwf	fsr2h,c
  4584  001B9E  CFDE F026          	movff	postinc2,___ftmul@f2
  4585  001BA2  CFDE F027          	movff	postinc2,___ftmul@f2+1
  4586  001BA6  CFDD F028          	movff	postdec2,___ftmul@f2+2
  4587  001BAA  0100               	movlb	0	; () banked
  4588  001BAC  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4589  001BAE  0D25               	mullw	37
  4590  001BB0  0E06               	movlw	6
  4591  001BB2  26F3               	addwf	prodl,f,c
  4592  001BB4  0E00               	movlw	0
  4593  001BB6  22F4               	addwfc	prodh,f,c
  4594  001BB8  0E00               	movlw	low _pid
  4595  001BBA  24F3               	addwf	prodl,w,c
  4596  001BBC  6ED9               	movwf	fsr2l,c
  4597  001BBE  0E01               	movlw	high _pid
  4598  001BC0  20F4               	addwfc	prodh,w,c
  4599  001BC2  6EDA               	movwf	fsr2h,c
  4600  001BC4  CFDE F023          	movff	postinc2,___ftmul@f1
  4601  001BC8  CFDE F024          	movff	postinc2,___ftmul@f1+1
  4602  001BCC  CFDD F025          	movff	postdec2,___ftmul@f1+2
  4603  001BD0  EC1A  F012         	call	___ftmul	;wreg free
  4604  001BD4  C023  F0CE         	movff	?___ftmul,___ftadd@f2
  4605  001BD8  C024  F0CF         	movff	?___ftmul+1,___ftadd@f2+1
  4606  001BDC  C025  F0D0         	movff	?___ftmul+2,___ftadd@f2+2
  4607  001BE0  ECE0  F00E         	call	___ftadd	;wreg free
  4608  001BE4  0100               	movlb	0	; () banked
  4609  001BE6  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4610  001BE8  0D25               	mullw	37
  4611  001BEA  0E1E               	movlw	30
  4612  001BEC  26F3               	addwf	prodl,f,c
  4613  001BEE  0E00               	movlw	0
  4614  001BF0  22F4               	addwfc	prodh,f,c
  4615  001BF2  0E00               	movlw	low _pid
  4616  001BF4  24F3               	addwf	prodl,w,c
  4617  001BF6  6ED9               	movwf	fsr2l,c
  4618  001BF8  0E01               	movlw	high _pid
  4619  001BFA  20F4               	addwfc	prodh,w,c
  4620  001BFC  6EDA               	movwf	fsr2h,c
  4621  001BFE  C0CB  FFDE         	movff	?___ftadd,postinc2
  4622  001C02  C0CC  FFDE         	movff	?___ftadd+1,postinc2
  4623  001C06  C0CD  FFDE         	movff	?___ftadd+2,postinc2
  4624                           
  4625                           ;PID.c: 18: if(pid[whichPID].controlSignal >= pid[whichPID].upperLimit)
  4626  001C0A  0100               	movlb	0	; () banked
  4627  001C0C  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4628  001C0E  0D25               	mullw	37
  4629  001C10  0E1E               	movlw	30
  4630  001C12  26F3               	addwf	prodl,f,c
  4631  001C14  0E00               	movlw	0
  4632  001C16  22F4               	addwfc	prodh,f,c
  4633  001C18  0E00               	movlw	low _pid
  4634  001C1A  24F3               	addwf	prodl,w,c
  4635  001C1C  6ED9               	movwf	fsr2l,c
  4636  001C1E  0E01               	movlw	high _pid
  4637  001C20  20F4               	addwfc	prodh,w,c
  4638  001C22  6EDA               	movwf	fsr2h,c
  4639  001C24  CFDE F013          	movff	postinc2,___ftge@ff1
  4640  001C28  CFDE F014          	movff	postinc2,___ftge@ff1+1
  4641  001C2C  CFDD F015          	movff	postdec2,___ftge@ff1+2
  4642  001C30  0100               	movlb	0	; () banked
  4643  001C32  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4644  001C34  0D25               	mullw	37
  4645  001C36  0E18               	movlw	24
  4646  001C38  26F3               	addwf	prodl,f,c
  4647  001C3A  0E00               	movlw	0
  4648  001C3C  22F4               	addwfc	prodh,f,c
  4649  001C3E  0E00               	movlw	low _pid
  4650  001C40  24F3               	addwf	prodl,w,c
  4651  001C42  6ED9               	movwf	fsr2l,c
  4652  001C44  0E01               	movlw	high _pid
  4653  001C46  20F4               	addwfc	prodh,w,c
  4654  001C48  6EDA               	movwf	fsr2h,c
  4655  001C4A  CFDE F016          	movff	postinc2,___ftge@ff2
  4656  001C4E  CFDE F017          	movff	postinc2,___ftge@ff2+1
  4657  001C52  CFDD F018          	movff	postdec2,___ftge@ff2+2
  4658  001C56  ECA8  F013         	call	___ftge	;wreg free
  4659  001C5A  A0D8               	btfss	status,0,c
  4660  001C5C  D032               	goto	l4061
  4661                           
  4662                           ;PID.c: 19: {
  4663                           ;PID.c: 20: pid[whichPID].checkUpLim = 1;
  4664  001C5E  0100               	movlb	0	; () banked
  4665  001C60  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4666  001C62  0D25               	mullw	37
  4667  001C64  0E21               	movlw	33
  4668  001C66  26F3               	addwf	prodl,f,c
  4669  001C68  0E00               	movlw	0
  4670  001C6A  22F4               	addwfc	prodh,f,c
  4671  001C6C  0E00               	movlw	low _pid
  4672  001C6E  24F3               	addwf	prodl,w,c
  4673  001C70  6ED9               	movwf	fsr2l,c
  4674  001C72  0E01               	movlw	high _pid
  4675  001C74  20F4               	addwfc	prodh,w,c
  4676  001C76  6EDA               	movwf	fsr2h,c
  4677  001C78  0E01               	movlw	1
  4678  001C7A  6EDE               	movwf	postinc2,c
  4679  001C7C  0E00               	movlw	0
  4680  001C7E  6EDD               	movwf	postdec2,c
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;PID.c: 21: pid[whichPID].controlSignal = pid[whichPID].upperLimit;
  4684  001C80  0100               	movlb	0	; () banked
  4685  001C82  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4686  001C84  0D25               	mullw	37
  4687  001C86  0E18               	movlw	24
  4688  001C88  26F3               	addwf	prodl,f,c
  4689  001C8A  0E00               	movlw	0
  4690  001C8C  22F4               	addwfc	prodh,f,c
  4691  001C8E  0E00               	movlw	low _pid
  4692  001C90  24F3               	addwf	prodl,w,c
  4693  001C92  6ED9               	movwf	fsr2l,c
  4694  001C94  0E01               	movlw	high _pid
  4695  001C96  20F4               	addwfc	prodh,w,c
  4696  001C98  6EDA               	movwf	fsr2h,c
  4697  001C9A  0100               	movlb	0	; () banked
  4698  001C9C  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4699  001C9E  0D25               	mullw	37
  4700  001CA0  0E1E               	movlw	30
  4701  001CA2  26F3               	addwf	prodl,f,c
  4702  001CA4  0E00               	movlw	0
  4703  001CA6  22F4               	addwfc	prodh,f,c
  4704  001CA8  0E00               	movlw	low _pid
  4705  001CAA  24F3               	addwf	prodl,w,c
  4706  001CAC  6EE1               	movwf	fsr1l,c
  4707  001CAE  0E01               	movlw	high _pid
  4708  001CB0  20F4               	addwfc	prodh,w,c
  4709  001CB2  6EE2               	movwf	fsr1h,c
  4710  001CB4  CFDE FFE6          	movff	postinc2,postinc1
  4711  001CB8  CFDE FFE6          	movff	postinc2,postinc1
  4712  001CBC  CFDE FFE6          	movff	postinc2,postinc1
  4713                           
  4714                           ;PID.c: 22: }
  4715  001CC0  D011               	goto	l4063
  4716  001CC2                     l4061:
  4717                           
  4718                           ;PID.c: 23: else
  4719                           ;PID.c: 24: pid[whichPID].checkUpLim = 0;
  4720  001CC2  0100               	movlb	0	; () banked
  4721  001CC4  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4722  001CC6  0D25               	mullw	37
  4723  001CC8  0E21               	movlw	33
  4724  001CCA  26F3               	addwf	prodl,f,c
  4725  001CCC  0E00               	movlw	0
  4726  001CCE  22F4               	addwfc	prodh,f,c
  4727  001CD0  0E00               	movlw	low _pid
  4728  001CD2  24F3               	addwf	prodl,w,c
  4729  001CD4  6ED9               	movwf	fsr2l,c
  4730  001CD6  0E01               	movlw	high _pid
  4731  001CD8  20F4               	addwfc	prodh,w,c
  4732  001CDA  6EDA               	movwf	fsr2h,c
  4733  001CDC  0E00               	movlw	0
  4734  001CDE  6EDE               	movwf	postinc2,c
  4735  001CE0  0E00               	movlw	0
  4736  001CE2  6EDD               	movwf	postdec2,c
  4737  001CE4                     l4063:
  4738                           
  4739                           ; BSR set to: 0
  4740                           ;PID.c: 26: if(pid[whichPID].controlSignal <= pid[whichPID].lowerLimit)
  4741  001CE4  0100               	movlb	0	; () banked
  4742  001CE6  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4743  001CE8  0D25               	mullw	37
  4744  001CEA  0E1B               	movlw	27
  4745  001CEC  26F3               	addwf	prodl,f,c
  4746  001CEE  0E00               	movlw	0
  4747  001CF0  22F4               	addwfc	prodh,f,c
  4748  001CF2  0E00               	movlw	low _pid
  4749  001CF4  24F3               	addwf	prodl,w,c
  4750  001CF6  6ED9               	movwf	fsr2l,c
  4751  001CF8  0E01               	movlw	high _pid
  4752  001CFA  20F4               	addwfc	prodh,w,c
  4753  001CFC  6EDA               	movwf	fsr2h,c
  4754  001CFE  CFDE F013          	movff	postinc2,___ftge@ff1
  4755  001D02  CFDE F014          	movff	postinc2,___ftge@ff1+1
  4756  001D06  CFDD F015          	movff	postdec2,___ftge@ff1+2
  4757  001D0A  0100               	movlb	0	; () banked
  4758  001D0C  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4759  001D0E  0D25               	mullw	37
  4760  001D10  0E1E               	movlw	30
  4761  001D12  26F3               	addwf	prodl,f,c
  4762  001D14  0E00               	movlw	0
  4763  001D16  22F4               	addwfc	prodh,f,c
  4764  001D18  0E00               	movlw	low _pid
  4765  001D1A  24F3               	addwf	prodl,w,c
  4766  001D1C  6ED9               	movwf	fsr2l,c
  4767  001D1E  0E01               	movlw	high _pid
  4768  001D20  20F4               	addwfc	prodh,w,c
  4769  001D22  6EDA               	movwf	fsr2h,c
  4770  001D24  CFDE F016          	movff	postinc2,___ftge@ff2
  4771  001D28  CFDE F017          	movff	postinc2,___ftge@ff2+1
  4772  001D2C  CFDD F018          	movff	postdec2,___ftge@ff2+2
  4773  001D30  ECA8  F013         	call	___ftge	;wreg free
  4774  001D34  A0D8               	btfss	status,0,c
  4775  001D36  D032               	goto	l4069
  4776                           
  4777                           ;PID.c: 27: {
  4778                           ;PID.c: 28: pid[whichPID].checkLowLim = 1;
  4779  001D38  0100               	movlb	0	; () banked
  4780  001D3A  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4781  001D3C  0D25               	mullw	37
  4782  001D3E  0E23               	movlw	35
  4783  001D40  26F3               	addwf	prodl,f,c
  4784  001D42  0E00               	movlw	0
  4785  001D44  22F4               	addwfc	prodh,f,c
  4786  001D46  0E00               	movlw	low _pid
  4787  001D48  24F3               	addwf	prodl,w,c
  4788  001D4A  6ED9               	movwf	fsr2l,c
  4789  001D4C  0E01               	movlw	high _pid
  4790  001D4E  20F4               	addwfc	prodh,w,c
  4791  001D50  6EDA               	movwf	fsr2h,c
  4792  001D52  0E01               	movlw	1
  4793  001D54  6EDE               	movwf	postinc2,c
  4794  001D56  0E00               	movlw	0
  4795  001D58  6EDD               	movwf	postdec2,c
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;PID.c: 29: pid[whichPID].controlSignal = pid[whichPID].lowerLimit;
  4799  001D5A  0100               	movlb	0	; () banked
  4800  001D5C  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4801  001D5E  0D25               	mullw	37
  4802  001D60  0E1B               	movlw	27
  4803  001D62  26F3               	addwf	prodl,f,c
  4804  001D64  0E00               	movlw	0
  4805  001D66  22F4               	addwfc	prodh,f,c
  4806  001D68  0E00               	movlw	low _pid
  4807  001D6A  24F3               	addwf	prodl,w,c
  4808  001D6C  6ED9               	movwf	fsr2l,c
  4809  001D6E  0E01               	movlw	high _pid
  4810  001D70  20F4               	addwfc	prodh,w,c
  4811  001D72  6EDA               	movwf	fsr2h,c
  4812  001D74  0100               	movlb	0	; () banked
  4813  001D76  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4814  001D78  0D25               	mullw	37
  4815  001D7A  0E1E               	movlw	30
  4816  001D7C  26F3               	addwf	prodl,f,c
  4817  001D7E  0E00               	movlw	0
  4818  001D80  22F4               	addwfc	prodh,f,c
  4819  001D82  0E00               	movlw	low _pid
  4820  001D84  24F3               	addwf	prodl,w,c
  4821  001D86  6EE1               	movwf	fsr1l,c
  4822  001D88  0E01               	movlw	high _pid
  4823  001D8A  20F4               	addwfc	prodh,w,c
  4824  001D8C  6EE2               	movwf	fsr1h,c
  4825  001D8E  CFDE FFE6          	movff	postinc2,postinc1
  4826  001D92  CFDE FFE6          	movff	postinc2,postinc1
  4827  001D96  CFDE FFE6          	movff	postinc2,postinc1
  4828                           
  4829                           ;PID.c: 30: }
  4830  001D9A  0012               	return	
  4831  001D9C                     l4069:
  4832                           
  4833                           ;PID.c: 31: else
  4834                           ;PID.c: 32: pid[whichPID].checkLowLim = 0;
  4835  001D9C  0100               	movlb	0	; () banked
  4836  001D9E  51DD               	movf	PID_outputControlCalc@whichPID& (0+255),w,b
  4837  001DA0  0D25               	mullw	37
  4838  001DA2  0E23               	movlw	35
  4839  001DA4  26F3               	addwf	prodl,f,c
  4840  001DA6  0E00               	movlw	0
  4841  001DA8  22F4               	addwfc	prodh,f,c
  4842  001DAA  0E00               	movlw	low _pid
  4843  001DAC  24F3               	addwf	prodl,w,c
  4844  001DAE  6ED9               	movwf	fsr2l,c
  4845  001DB0  0E01               	movlw	high _pid
  4846  001DB2  20F4               	addwfc	prodh,w,c
  4847  001DB4  6EDA               	movwf	fsr2h,c
  4848  001DB6  0E00               	movlw	0
  4849  001DB8  6EDE               	movwf	postinc2,c
  4850  001DBA  0E00               	movlw	0
  4851  001DBC  6EDD               	movwf	postdec2,c
  4852                           
  4853                           ; BSR set to: 0
  4854  001DBE  0012               	return	
  4855  001DC0                     __end_of_PID_outputControlCalc:
  4856                           	opt stack 0
  4857                           tblptru	equ	0xFF8
  4858                           tblptrh	equ	0xFF7
  4859                           tblptrl	equ	0xFF6
  4860                           tablat	equ	0xFF5
  4861                           prodh	equ	0xFF4
  4862                           prodl	equ	0xFF3
  4863                           intcon	equ	0xFF2
  4864                           postinc0	equ	0xFEE
  4865                           wreg	equ	0xFE8
  4866                           postinc1	equ	0xFE6
  4867                           postdec1	equ	0xFE5
  4868                           fsr1h	equ	0xFE2
  4869                           fsr1l	equ	0xFE1
  4870                           postinc2	equ	0xFDE
  4871                           postdec2	equ	0xFDD
  4872                           fsr2h	equ	0xFDA
  4873                           fsr2l	equ	0xFD9
  4874                           status	equ	0xFD8
  4875                           
  4876 ;; *************** function ___ftneg *****************
  4877 ;; Defined at:
  4878 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
  4879 ;; Parameters:    Size  Location     Type
  4880 ;;  f1              3    6[BANK0 ] float 
  4881 ;; Auto vars:     Size  Location     Type
  4882 ;;		None
  4883 ;; Return value:  Size  Location     Type
  4884 ;;                  3    6[BANK0 ] float 
  4885 ;; Registers used:
  4886 ;;		wreg, status,2, status,0
  4887 ;; Tracked objects:
  4888 ;;		On entry : 0/0
  4889 ;;		On exit  : 0/0
  4890 ;;		Unchanged: 0/0
  4891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4892 ;;      Params:         0       3       0       0       0       0       0       0       0
  4893 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4894 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4895 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4896 ;;Total ram usage:        3 bytes
  4897 ;; Hardware stack levels used:    1
  4898 ;; Hardware stack levels required when called:    4
  4899 ;; This function calls:
  4900 ;;		Nothing
  4901 ;; This function is called by:
  4902 ;;		_readAccelGiroValues
  4903 ;;		_main
  4904 ;;		_PID_outputControlCalc
  4905 ;; This function uses a non-reentrant model
  4906 ;;
  4907                           
  4908                           	psect	text16
  4909  002B42                     __ptext16:
  4910                           	opt stack 0
  4911  002B42                     ___ftneg:
  4912                           	opt stack 24
  4913                           
  4914                           ; BSR set to: 0
  4915                           ;incstack = 0
  4916  002B42  0100               	movlb	0	; () banked
  4917  002B44  51C8               	movf	___ftneg@f1& (0+255),w,b
  4918  002B46  0100               	movlb	0	; () banked
  4919  002B48  11C9               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  4920  002B4A  0100               	movlb	0	; () banked
  4921  002B4C  11CA               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  4922  002B4E  B4D8               	btfsc	status,2,c
  4923  002B50  D009               	goto	l1034
  4924                           
  4925                           ; BSR set to: 0
  4926  002B52  0E00               	movlw	0
  4927  002B54  0100               	movlb	0	; () banked
  4928  002B56  1BC8               	xorwf	___ftneg@f1& (0+255),f,b
  4929  002B58  0E00               	movlw	0
  4930  002B5A  0100               	movlb	0	; () banked
  4931  002B5C  1BC9               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  4932  002B5E  0E80               	movlw	128
  4933  002B60  0100               	movlb	0	; () banked
  4934  002B62  1BCA               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  4935  002B64                     l1034:
  4936                           
  4937                           ; BSR set to: 0
  4938  002B64  C0C8  F0C8         	movff	___ftneg@f1,?___ftneg
  4939  002B68  C0C9  F0C9         	movff	___ftneg@f1+1,?___ftneg+1
  4940  002B6C  C0CA  F0CA         	movff	___ftneg@f1+2,?___ftneg+2
  4941                           
  4942                           ; BSR set to: 0
  4943  002B70  0012               	return		;funcret
  4944  002B72                     __end_of___ftneg:
  4945                           	opt stack 0
  4946                           tblptru	equ	0xFF8
  4947                           tblptrh	equ	0xFF7
  4948                           tblptrl	equ	0xFF6
  4949                           tablat	equ	0xFF5
  4950                           prodh	equ	0xFF4
  4951                           prodl	equ	0xFF3
  4952                           intcon	equ	0xFF2
  4953                           postinc0	equ	0xFEE
  4954                           wreg	equ	0xFE8
  4955                           postinc1	equ	0xFE6
  4956                           postdec1	equ	0xFE5
  4957                           fsr1h	equ	0xFE2
  4958                           fsr1l	equ	0xFE1
  4959                           postinc2	equ	0xFDE
  4960                           postdec2	equ	0xFDD
  4961                           fsr2h	equ	0xFDA
  4962                           fsr2l	equ	0xFD9
  4963                           status	equ	0xFD8
  4964                           
  4965 ;; *************** function ___ftmul *****************
  4966 ;; Defined at:
  4967 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;  f1              3   34[COMRAM] float 
  4970 ;;  f2              3   37[COMRAM] float 
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;  f3_as_produc    3   44[COMRAM] unsigned um
  4973 ;;  sign            1   48[COMRAM] unsigned char 
  4974 ;;  cntr            1   47[COMRAM] unsigned char 
  4975 ;;  exp             1   43[COMRAM] unsigned char 
  4976 ;; Return value:  Size  Location     Type
  4977 ;;                  3   34[COMRAM] float 
  4978 ;; Registers used:
  4979 ;;		wreg, status,2, status,0, cstack
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/0
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4985 ;;      Params:         6       0       0       0       0       0       0       0       0
  4986 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4987 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4988 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4989 ;;Total ram usage:       15 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; Hardware stack levels required when called:    5
  4992 ;; This function calls:
  4993 ;;		___ftpack
  4994 ;; This function is called by:
  4995 ;;		_readAccelGiroValues
  4996 ;;		_main
  4997 ;;		_PID_outputControlCalc
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           	psect	text17
  5002  002434                     __ptext17:
  5003                           	opt stack 0
  5004  002434                     ___ftmul:
  5005                           	opt stack 23
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;incstack = 0
  5009  002434  C025  F029         	movff	___ftmul@f1+2,??___ftmul
  5010  002438  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  5011  00243A  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  5012  00243C  3424               	rlcf	___ftmul@f1+1,w,c
  5013  00243E  3629               	rlcf	??___ftmul& (0+255),f,c
  5014  002440  E301               	bnc	u3891
  5015  002442  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  5016  002444                     u3891:
  5017  002444  5029               	movf	??___ftmul,w,c
  5018  002446  6E2C               	movwf	___ftmul@exp,c
  5019  002448  502C               	movf	___ftmul@exp,w,c
  5020  00244A  A4D8               	btfss	status,2,c
  5021  00244C  D007               	goto	l3783
  5022  00244E  0E00               	movlw	0
  5023  002450  6E23               	movwf	?___ftmul,c
  5024  002452  0E00               	movlw	0
  5025  002454  6E24               	movwf	?___ftmul+1,c
  5026  002456  0E00               	movlw	0
  5027  002458  6E25               	movwf	?___ftmul+2,c
  5028  00245A  0012               	return	
  5029  00245C                     l3783:
  5030  00245C  C028  F029         	movff	___ftmul@f2+2,??___ftmul
  5031  002460  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  5032  002462  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  5033  002464  3427               	rlcf	___ftmul@f2+1,w,c
  5034  002466  3629               	rlcf	??___ftmul& (0+255),f,c
  5035  002468  E301               	bnc	u3911
  5036  00246A  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  5037  00246C                     u3911:
  5038  00246C  5029               	movf	??___ftmul,w,c
  5039  00246E  6E31               	movwf	___ftmul@sign,c
  5040  002470  5031               	movf	___ftmul@sign,w,c
  5041  002472  A4D8               	btfss	status,2,c
  5042  002474  D007               	goto	l3789
  5043  002476  0E00               	movlw	0
  5044  002478  6E23               	movwf	?___ftmul,c
  5045  00247A  0E00               	movlw	0
  5046  00247C  6E24               	movwf	?___ftmul+1,c
  5047  00247E  0E00               	movlw	0
  5048  002480  6E25               	movwf	?___ftmul+2,c
  5049  002482  0012               	return	
  5050  002484                     l3789:
  5051  002484  5031               	movf	___ftmul@sign,w,c
  5052  002486  0F7B               	addlw	123
  5053  002488  262C               	addwf	___ftmul@exp,f,c
  5054  00248A  C025  F031         	movff	___ftmul@f1+2,___ftmul@sign
  5055  00248E  5028               	movf	___ftmul@f2+2,w,c
  5056  002490  1A31               	xorwf	___ftmul@sign,f,c
  5057  002492  0E80               	movlw	128
  5058  002494  1631               	andwf	___ftmul@sign,f,c
  5059  002496  8E24               	bsf	___ftmul@f1+1,7,c
  5060  002498  8E27               	bsf	___ftmul@f2+1,7,c
  5061  00249A  0EFF               	movlw	255
  5062  00249C  1626               	andwf	___ftmul@f2,f,c
  5063  00249E  0EFF               	movlw	255
  5064  0024A0  1627               	andwf	___ftmul@f2+1,f,c
  5065  0024A2  0E00               	movlw	0
  5066  0024A4  1628               	andwf	___ftmul@f2+2,f,c
  5067  0024A6  0E00               	movlw	0
  5068  0024A8  6E2D               	movwf	___ftmul@f3_as_product,c
  5069  0024AA  0E00               	movlw	0
  5070  0024AC  6E2E               	movwf	___ftmul@f3_as_product+1,c
  5071  0024AE  0E00               	movlw	0
  5072  0024B0  6E2F               	movwf	___ftmul@f3_as_product+2,c
  5073  0024B2  0E07               	movlw	7
  5074  0024B4  6E30               	movwf	___ftmul@cntr,c
  5075  0024B6                     l3803:
  5076  0024B6  A023               	btfss	___ftmul@f1,0,c
  5077  0024B8  D006               	goto	l3807
  5078  0024BA  5026               	movf	___ftmul@f2,w,c
  5079  0024BC  262D               	addwf	___ftmul@f3_as_product,f,c
  5080  0024BE  5027               	movf	___ftmul@f2+1,w,c
  5081  0024C0  222E               	addwfc	___ftmul@f3_as_product+1,f,c
  5082  0024C2  5028               	movf	___ftmul@f2+2,w,c
  5083  0024C4  222F               	addwfc	___ftmul@f3_as_product+2,f,c
  5084  0024C6                     l3807:
  5085  0024C6  90D8               	bcf	status,0,c
  5086  0024C8  3225               	rrcf	___ftmul@f1+2,f,c
  5087  0024CA  3224               	rrcf	___ftmul@f1+1,f,c
  5088  0024CC  3223               	rrcf	___ftmul@f1,f,c
  5089  0024CE  90D8               	bcf	status,0,c
  5090  0024D0  3626               	rlcf	___ftmul@f2,f,c
  5091  0024D2  3627               	rlcf	___ftmul@f2+1,f,c
  5092  0024D4  3628               	rlcf	___ftmul@f2+2,f,c
  5093  0024D6  2E30               	decfsz	___ftmul@cntr,f,c
  5094  0024D8  D7EE               	goto	l3803
  5095  0024DA  0E09               	movlw	9
  5096  0024DC  6E30               	movwf	___ftmul@cntr,c
  5097  0024DE                     l3813:
  5098  0024DE  A023               	btfss	___ftmul@f1,0,c
  5099  0024E0  D006               	goto	l3817
  5100  0024E2  5026               	movf	___ftmul@f2,w,c
  5101  0024E4  262D               	addwf	___ftmul@f3_as_product,f,c
  5102  0024E6  5027               	movf	___ftmul@f2+1,w,c
  5103  0024E8  222E               	addwfc	___ftmul@f3_as_product+1,f,c
  5104  0024EA  5028               	movf	___ftmul@f2+2,w,c
  5105  0024EC  222F               	addwfc	___ftmul@f3_as_product+2,f,c
  5106  0024EE                     l3817:
  5107  0024EE  90D8               	bcf	status,0,c
  5108  0024F0  3225               	rrcf	___ftmul@f1+2,f,c
  5109  0024F2  3224               	rrcf	___ftmul@f1+1,f,c
  5110  0024F4  3223               	rrcf	___ftmul@f1,f,c
  5111  0024F6  90D8               	bcf	status,0,c
  5112  0024F8  322F               	rrcf	___ftmul@f3_as_product+2,f,c
  5113  0024FA  322E               	rrcf	___ftmul@f3_as_product+1,f,c
  5114  0024FC  322D               	rrcf	___ftmul@f3_as_product,f,c
  5115  0024FE  2E30               	decfsz	___ftmul@cntr,f,c
  5116  002500  D7EE               	goto	l3813
  5117  002502  C02D  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  5118  002506  C02E  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5119  00250A  C02F  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5120  00250E  C02C  F016         	movff	___ftmul@exp,___ftpack@exp
  5121  002512  C031  F017         	movff	___ftmul@sign,___ftpack@sign
  5122  002516  ECFA  F012         	call	___ftpack	;wreg free
  5123  00251A  C013  F023         	movff	?___ftpack,?___ftmul
  5124  00251E  C014  F024         	movff	?___ftpack+1,?___ftmul+1
  5125  002522  C015  F025         	movff	?___ftpack+2,?___ftmul+2
  5126  002526  0012               	return	
  5127  002528                     __end_of___ftmul:
  5128                           	opt stack 0
  5129                           tblptru	equ	0xFF8
  5130                           tblptrh	equ	0xFF7
  5131                           tblptrl	equ	0xFF6
  5132                           tablat	equ	0xFF5
  5133                           prodh	equ	0xFF4
  5134                           prodl	equ	0xFF3
  5135                           intcon	equ	0xFF2
  5136                           postinc0	equ	0xFEE
  5137                           wreg	equ	0xFE8
  5138                           postinc1	equ	0xFE6
  5139                           postdec1	equ	0xFE5
  5140                           fsr1h	equ	0xFE2
  5141                           fsr1l	equ	0xFE1
  5142                           postinc2	equ	0xFDE
  5143                           postdec2	equ	0xFDD
  5144                           fsr2h	equ	0xFDA
  5145                           fsr2l	equ	0xFD9
  5146                           status	equ	0xFD8
  5147                           
  5148 ;; *************** function ___ftge *****************
  5149 ;; Defined at:
  5150 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;  ff1             3   18[COMRAM] float 
  5153 ;;  ff2             3   21[COMRAM] float 
  5154 ;; Auto vars:     Size  Location     Type
  5155 ;;		None
  5156 ;; Return value:  Size  Location     Type
  5157 ;;		None               void
  5158 ;; Registers used:
  5159 ;;		wreg, status,2, status,0
  5160 ;; Tracked objects:
  5161 ;;		On entry : 0/0
  5162 ;;		On exit  : 0/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5165 ;;      Params:         6       0       0       0       0       0       0       0       0
  5166 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5167 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5168 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5169 ;;Total ram usage:        9 bytes
  5170 ;; Hardware stack levels used:    1
  5171 ;; Hardware stack levels required when called:    4
  5172 ;; This function calls:
  5173 ;;		Nothing
  5174 ;; This function is called by:
  5175 ;;		_PID_outputControlCalc
  5176 ;; This function uses a non-reentrant model
  5177 ;;
  5178                           
  5179                           	psect	text18
  5180  002750                     __ptext18:
  5181                           	opt stack 0
  5182  002750                     ___ftge:
  5183                           	opt stack 25
  5184                           
  5185                           ;incstack = 0
  5186  002750  AE15               	btfss	___ftge@ff1+2,7,c
  5187  002752  D016               	goto	l3937
  5188  002754  C013  F019         	movff	___ftge@ff1,??___ftge
  5189  002758  C014  F01A         	movff	___ftge@ff1+1,??___ftge+1
  5190  00275C  C015  F01B         	movff	___ftge@ff1+2,??___ftge+2
  5191  002760  1E19               	comf	??___ftge,f,c
  5192  002762  1E1A               	comf	??___ftge+1,f,c
  5193  002764  1E1B               	comf	??___ftge+2,f,c
  5194  002766  2A19               	incf	??___ftge,f,c
  5195  002768  0E00               	movlw	0
  5196  00276A  221A               	addwfc	??___ftge+1,f,c
  5197  00276C  221B               	addwfc	??___ftge+2,f,c
  5198  00276E  0E00               	movlw	0
  5199  002770  2419               	addwf	??___ftge,w,c
  5200  002772  6E13               	movwf	___ftge@ff1,c
  5201  002774  0E00               	movlw	0
  5202  002776  201A               	addwfc	??___ftge+1,w,c
  5203  002778  6E14               	movwf	___ftge@ff1+1,c
  5204  00277A  0E80               	movlw	128
  5205  00277C  201B               	addwfc	??___ftge+2,w,c
  5206  00277E  6E15               	movwf	___ftge@ff1+2,c
  5207  002780                     l3937:
  5208  002780  AE18               	btfss	___ftge@ff2+2,7,c
  5209  002782  D016               	goto	l3941
  5210  002784  C016  F019         	movff	___ftge@ff2,??___ftge
  5211  002788  C017  F01A         	movff	___ftge@ff2+1,??___ftge+1
  5212  00278C  C018  F01B         	movff	___ftge@ff2+2,??___ftge+2
  5213  002790  1E19               	comf	??___ftge,f,c
  5214  002792  1E1A               	comf	??___ftge+1,f,c
  5215  002794  1E1B               	comf	??___ftge+2,f,c
  5216  002796  2A19               	incf	??___ftge,f,c
  5217  002798  0E00               	movlw	0
  5218  00279A  221A               	addwfc	??___ftge+1,f,c
  5219  00279C  221B               	addwfc	??___ftge+2,f,c
  5220  00279E  0E00               	movlw	0
  5221  0027A0  2419               	addwf	??___ftge,w,c
  5222  0027A2  6E16               	movwf	___ftge@ff2,c
  5223  0027A4  0E00               	movlw	0
  5224  0027A6  201A               	addwfc	??___ftge+1,w,c
  5225  0027A8  6E17               	movwf	___ftge@ff2+1,c
  5226  0027AA  0E80               	movlw	128
  5227  0027AC  201B               	addwfc	??___ftge+2,w,c
  5228  0027AE  6E18               	movwf	___ftge@ff2+2,c
  5229  0027B0                     l3941:
  5230  0027B0  0E00               	movlw	0
  5231  0027B2  1A13               	xorwf	___ftge@ff1,f,c
  5232  0027B4  0E00               	movlw	0
  5233  0027B6  1A14               	xorwf	___ftge@ff1+1,f,c
  5234  0027B8  0E80               	movlw	128
  5235  0027BA  1A15               	xorwf	___ftge@ff1+2,f,c
  5236  0027BC  0E00               	movlw	0
  5237  0027BE  1A16               	xorwf	___ftge@ff2,f,c
  5238  0027C0  0E00               	movlw	0
  5239  0027C2  1A17               	xorwf	___ftge@ff2+1,f,c
  5240  0027C4  0E80               	movlw	128
  5241  0027C6  1A18               	xorwf	___ftge@ff2+2,f,c
  5242  0027C8  5016               	movf	___ftge@ff2,w,c
  5243  0027CA  5C13               	subwf	___ftge@ff1,w,c
  5244  0027CC  5017               	movf	___ftge@ff2+1,w,c
  5245  0027CE  5814               	subwfb	___ftge@ff1+1,w,c
  5246  0027D0  5018               	movf	___ftge@ff2+2,w,c
  5247  0027D2  5815               	subwfb	___ftge@ff1+2,w,c
  5248  0027D4  B0D8               	btfsc	status,0,c
  5249  0027D6  D002               	goto	l3947
  5250  0027D8  90D8               	bcf	status,0,c
  5251  0027DA  0012               	return	
  5252  0027DC                     l3947:
  5253  0027DC  80D8               	bsf	status,0,c
  5254  0027DE  0012               	return	
  5255  0027E0                     __end_of___ftge:
  5256                           	opt stack 0
  5257                           tblptru	equ	0xFF8
  5258                           tblptrh	equ	0xFF7
  5259                           tblptrl	equ	0xFF6
  5260                           tablat	equ	0xFF5
  5261                           prodh	equ	0xFF4
  5262                           prodl	equ	0xFF3
  5263                           intcon	equ	0xFF2
  5264                           postinc0	equ	0xFEE
  5265                           wreg	equ	0xFE8
  5266                           postinc1	equ	0xFE6
  5267                           postdec1	equ	0xFE5
  5268                           fsr1h	equ	0xFE2
  5269                           fsr1l	equ	0xFE1
  5270                           postinc2	equ	0xFDE
  5271                           postdec2	equ	0xFDD
  5272                           fsr2h	equ	0xFDA
  5273                           fsr2l	equ	0xFD9
  5274                           status	equ	0xFD8
  5275                           
  5276 ;; *************** function ___ftdiv *****************
  5277 ;; Defined at:
  5278 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  5279 ;; Parameters:    Size  Location     Type
  5280 ;;  f1              3   49[COMRAM] float 
  5281 ;;  f2              3   52[COMRAM] float 
  5282 ;; Auto vars:     Size  Location     Type
  5283 ;;  f3              3    1[BANK0 ] float 
  5284 ;;  sign            1    5[BANK0 ] unsigned char 
  5285 ;;  exp             1    4[BANK0 ] unsigned char 
  5286 ;;  cntr            1    0[BANK0 ] unsigned char 
  5287 ;; Return value:  Size  Location     Type
  5288 ;;                  3   49[COMRAM] float 
  5289 ;; Registers used:
  5290 ;;		wreg, status,2, status,0, cstack
  5291 ;; Tracked objects:
  5292 ;;		On entry : 0/0
  5293 ;;		On exit  : 0/0
  5294 ;;		Unchanged: 0/0
  5295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5296 ;;      Params:         6       0       0       0       0       0       0       0       0
  5297 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5298 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5299 ;;      Totals:         9       6       0       0       0       0       0       0       0
  5300 ;;Total ram usage:       15 bytes
  5301 ;; Hardware stack levels used:    1
  5302 ;; Hardware stack levels required when called:    5
  5303 ;; This function calls:
  5304 ;;		___ftpack
  5305 ;; This function is called by:
  5306 ;;		_main
  5307 ;;		_PID_outputControlCalc
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           	psect	text19
  5312  00223C                     __ptext19:
  5313                           	opt stack 0
  5314  00223C                     ___ftdiv:
  5315                           	opt stack 25
  5316                           
  5317                           ;incstack = 0
  5318  00223C  C034  F038         	movff	___ftdiv@f1+2,??___ftdiv
  5319  002240  6A39               	clrf	(??___ftdiv+1)& (0+255),c
  5320  002242  6A3A               	clrf	(??___ftdiv+2)& (0+255),c
  5321  002244  3433               	rlcf	___ftdiv@f1+1,w,c
  5322  002246  3638               	rlcf	??___ftdiv& (0+255),f,c
  5323  002248  E301               	bnc	u4031
  5324  00224A  8039               	bsf	(??___ftdiv+1)& (0+255),0,c
  5325  00224C                     u4031:
  5326  00224C  5038               	movf	??___ftdiv,w,c
  5327  00224E  0100               	movlb	0	; () banked
  5328  002250  6FC6               	movwf	___ftdiv@exp& (0+255),b
  5329  002252  0100               	movlb	0	; () banked
  5330  002254  51C6               	movf	___ftdiv@exp& (0+255),w,b
  5331  002256  A4D8               	btfss	status,2,c
  5332  002258  D007               	goto	l3893
  5333                           
  5334                           ; BSR set to: 0
  5335  00225A  0E00               	movlw	0
  5336  00225C  6E32               	movwf	?___ftdiv,c
  5337  00225E  0E00               	movlw	0
  5338  002260  6E33               	movwf	?___ftdiv+1,c
  5339  002262  0E00               	movlw	0
  5340  002264  6E34               	movwf	?___ftdiv+2,c
  5341                           
  5342                           ; BSR set to: 0
  5343  002266  0012               	return	
  5344  002268                     l3893:
  5345                           
  5346                           ; BSR set to: 0
  5347  002268  C037  F038         	movff	___ftdiv@f2+2,??___ftdiv
  5348  00226C  6A39               	clrf	(??___ftdiv+1)& (0+255),c
  5349  00226E  6A3A               	clrf	(??___ftdiv+2)& (0+255),c
  5350  002270  3436               	rlcf	___ftdiv@f2+1,w,c
  5351  002272  3638               	rlcf	??___ftdiv& (0+255),f,c
  5352  002274  E301               	bnc	u4051
  5353  002276  8039               	bsf	(??___ftdiv+1)& (0+255),0,c
  5354  002278                     u4051:
  5355  002278  5038               	movf	??___ftdiv,w,c
  5356  00227A  0100               	movlb	0	; () banked
  5357  00227C  6FC7               	movwf	___ftdiv@sign& (0+255),b
  5358  00227E  0100               	movlb	0	; () banked
  5359  002280  51C7               	movf	___ftdiv@sign& (0+255),w,b
  5360  002282  A4D8               	btfss	status,2,c
  5361  002284  D007               	goto	l3899
  5362                           
  5363                           ; BSR set to: 0
  5364  002286  0E00               	movlw	0
  5365  002288  6E32               	movwf	?___ftdiv,c
  5366  00228A  0E00               	movlw	0
  5367  00228C  6E33               	movwf	?___ftdiv+1,c
  5368  00228E  0E00               	movlw	0
  5369  002290  6E34               	movwf	?___ftdiv+2,c
  5370                           
  5371                           ; BSR set to: 0
  5372  002292  0012               	return	
  5373  002294                     l3899:
  5374                           
  5375                           ; BSR set to: 0
  5376  002294  0E00               	movlw	0
  5377  002296  0100               	movlb	0	; () banked
  5378  002298  6FC3               	movwf	___ftdiv@f3& (0+255),b
  5379  00229A  0E00               	movlw	0
  5380  00229C  0100               	movlb	0	; () banked
  5381  00229E  6FC4               	movwf	(___ftdiv@f3+1)& (0+255),b
  5382  0022A0  0E00               	movlw	0
  5383  0022A2  0100               	movlb	0	; () banked
  5384  0022A4  6FC5               	movwf	(___ftdiv@f3+2)& (0+255),b
  5385                           
  5386                           ; BSR set to: 0
  5387  0022A6  0100               	movlb	0	; () banked
  5388  0022A8  51C7               	movf	___ftdiv@sign& (0+255),w,b
  5389  0022AA  0F89               	addlw	137
  5390  0022AC  0100               	movlb	0	; () banked
  5391  0022AE  5FC6               	subwf	___ftdiv@exp& (0+255),f,b
  5392                           
  5393                           ; BSR set to: 0
  5394  0022B0  C034  F0C7         	movff	___ftdiv@f1+2,___ftdiv@sign
  5395                           
  5396                           ; BSR set to: 0
  5397  0022B4  5037               	movf	___ftdiv@f2+2,w,c
  5398  0022B6  0100               	movlb	0	; () banked
  5399  0022B8  1BC7               	xorwf	___ftdiv@sign& (0+255),f,b
  5400                           
  5401                           ; BSR set to: 0
  5402  0022BA  0E80               	movlw	128
  5403  0022BC  0100               	movlb	0	; () banked
  5404  0022BE  17C7               	andwf	___ftdiv@sign& (0+255),f,b
  5405                           
  5406                           ; BSR set to: 0
  5407  0022C0  8E33               	bsf	___ftdiv@f1+1,7,c
  5408                           
  5409                           ; BSR set to: 0
  5410  0022C2  0EFF               	movlw	255
  5411  0022C4  1632               	andwf	___ftdiv@f1,f,c
  5412  0022C6  0EFF               	movlw	255
  5413  0022C8  1633               	andwf	___ftdiv@f1+1,f,c
  5414  0022CA  0E00               	movlw	0
  5415  0022CC  1634               	andwf	___ftdiv@f1+2,f,c
  5416                           
  5417                           ; BSR set to: 0
  5418  0022CE  8E36               	bsf	___ftdiv@f2+1,7,c
  5419                           
  5420                           ; BSR set to: 0
  5421  0022D0  0EFF               	movlw	255
  5422  0022D2  1635               	andwf	___ftdiv@f2,f,c
  5423  0022D4  0EFF               	movlw	255
  5424  0022D6  1636               	andwf	___ftdiv@f2+1,f,c
  5425  0022D8  0E00               	movlw	0
  5426  0022DA  1637               	andwf	___ftdiv@f2+2,f,c
  5427                           
  5428                           ; BSR set to: 0
  5429  0022DC  0E18               	movlw	24
  5430  0022DE  0100               	movlb	0	; () banked
  5431  0022E0  6FC2               	movwf	___ftdiv@cntr& (0+255),b
  5432  0022E2                     l3919:
  5433                           
  5434                           ; BSR set to: 0
  5435  0022E2  0100               	movlb	0	; () banked
  5436  0022E4  90D8               	bcf	status,0,c
  5437  0022E6  37C3               	rlcf	___ftdiv@f3& (0+255),f,b
  5438  0022E8  37C4               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  5439  0022EA  37C5               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  5440                           
  5441                           ; BSR set to: 0
  5442  0022EC  5035               	movf	___ftdiv@f2,w,c
  5443  0022EE  5C32               	subwf	___ftdiv@f1,w,c
  5444  0022F0  5036               	movf	___ftdiv@f2+1,w,c
  5445  0022F2  5833               	subwfb	___ftdiv@f1+1,w,c
  5446  0022F4  5037               	movf	___ftdiv@f2+2,w,c
  5447  0022F6  5834               	subwfb	___ftdiv@f1+2,w,c
  5448  0022F8  A0D8               	btfss	status,0,c
  5449  0022FA  D008               	goto	l1012
  5450                           
  5451                           ; BSR set to: 0
  5452  0022FC  5035               	movf	___ftdiv@f2,w,c
  5453  0022FE  5E32               	subwf	___ftdiv@f1,f,c
  5454  002300  5036               	movf	___ftdiv@f2+1,w,c
  5455  002302  5A33               	subwfb	___ftdiv@f1+1,f,c
  5456  002304  5037               	movf	___ftdiv@f2+2,w,c
  5457  002306  5A34               	subwfb	___ftdiv@f1+2,f,c
  5458                           
  5459                           ; BSR set to: 0
  5460  002308  0100               	movlb	0	; () banked
  5461  00230A  81C3               	bsf	___ftdiv@f3& (0+255),0,b
  5462  00230C                     l1012:
  5463                           
  5464                           ; BSR set to: 0
  5465  00230C  90D8               	bcf	status,0,c
  5466  00230E  3632               	rlcf	___ftdiv@f1,f,c
  5467  002310  3633               	rlcf	___ftdiv@f1+1,f,c
  5468  002312  3634               	rlcf	___ftdiv@f1+2,f,c
  5469                           
  5470                           ; BSR set to: 0
  5471  002314  0100               	movlb	0	; () banked
  5472  002316  2FC2               	decfsz	___ftdiv@cntr& (0+255),f,b
  5473  002318  D7E4               	goto	l3919
  5474                           
  5475                           ; BSR set to: 0
  5476                           
  5477                           ; BSR set to: 0
  5478  00231A  C0C3  F013         	movff	___ftdiv@f3,___ftpack@arg
  5479  00231E  C0C4  F014         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5480  002322  C0C5  F015         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5481  002326  C0C6  F016         	movff	___ftdiv@exp,___ftpack@exp
  5482  00232A  C0C7  F017         	movff	___ftdiv@sign,___ftpack@sign
  5483  00232E  ECFA  F012         	call	___ftpack	;wreg free
  5484  002332  C013  F032         	movff	?___ftpack,?___ftdiv
  5485  002336  C014  F033         	movff	?___ftpack+1,?___ftdiv+1
  5486  00233A  C015  F034         	movff	?___ftpack+2,?___ftdiv+2
  5487  00233E  0012               	return	
  5488  002340                     __end_of___ftdiv:
  5489                           	opt stack 0
  5490                           tblptru	equ	0xFF8
  5491                           tblptrh	equ	0xFF7
  5492                           tblptrl	equ	0xFF6
  5493                           tablat	equ	0xFF5
  5494                           prodh	equ	0xFF4
  5495                           prodl	equ	0xFF3
  5496                           intcon	equ	0xFF2
  5497                           postinc0	equ	0xFEE
  5498                           wreg	equ	0xFE8
  5499                           postinc1	equ	0xFE6
  5500                           postdec1	equ	0xFE5
  5501                           fsr1h	equ	0xFE2
  5502                           fsr1l	equ	0xFE1
  5503                           postinc2	equ	0xFDE
  5504                           postdec2	equ	0xFDD
  5505                           fsr2h	equ	0xFDA
  5506                           fsr2l	equ	0xFD9
  5507                           status	equ	0xFD8
  5508                           
  5509 ;; *************** function ___ftadd *****************
  5510 ;; Defined at:
  5511 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  5512 ;; Parameters:    Size  Location     Type
  5513 ;;  f1              3    9[BANK0 ] float 
  5514 ;;  f2              3   12[BANK0 ] float 
  5515 ;; Auto vars:     Size  Location     Type
  5516 ;;  exp1            1   20[BANK0 ] unsigned char 
  5517 ;;  exp2            1   19[BANK0 ] unsigned char 
  5518 ;;  sign            1   18[BANK0 ] unsigned char 
  5519 ;; Return value:  Size  Location     Type
  5520 ;;                  3    9[BANK0 ] float 
  5521 ;; Registers used:
  5522 ;;		wreg, status,2, status,0, cstack
  5523 ;; Tracked objects:
  5524 ;;		On entry : 0/0
  5525 ;;		On exit  : 0/0
  5526 ;;		Unchanged: 0/0
  5527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5528 ;;      Params:         0       6       0       0       0       0       0       0       0
  5529 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5530 ;;      Temps:          0       3       0       0       0       0       0       0       0
  5531 ;;      Totals:         0      12       0       0       0       0       0       0       0
  5532 ;;Total ram usage:       12 bytes
  5533 ;; Hardware stack levels used:    1
  5534 ;; Hardware stack levels required when called:    5
  5535 ;; This function calls:
  5536 ;;		___ftpack
  5537 ;; This function is called by:
  5538 ;;		_readAccelGiroValues
  5539 ;;		_main
  5540 ;;		_PID_outputControlCalc
  5541 ;; This function uses a non-reentrant model
  5542 ;;
  5543                           
  5544                           	psect	text20
  5545  001DC0                     __ptext20:
  5546                           	opt stack 0
  5547  001DC0                     ___ftadd:
  5548                           	opt stack 23
  5549                           
  5550                           ;incstack = 0
  5551  001DC0  C0CD  F0D1         	movff	___ftadd@f1+2,??___ftadd
  5552  001DC4  0100               	movlb	0	; () banked
  5553  001DC6  6BD2               	clrf	(??___ftadd+1)& (0+255),b
  5554  001DC8  6BD3               	clrf	(??___ftadd+2)& (0+255),b
  5555  001DCA  0100               	movlb	0	; () banked
  5556  001DCC  35CC               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  5557  001DCE  0100               	movlb	0	; () banked
  5558  001DD0  37D1               	rlcf	??___ftadd& (0+255),f,b
  5559  001DD2  E301               	bnc	u3681
  5560  001DD4  81D2               	bsf	(??___ftadd+1)& (0+255),0,b
  5561  001DD6                     u3681:
  5562  001DD6  0100               	movlb	0	; () banked
  5563  001DD8  51D1               	movf	??___ftadd& (0+255),w,b
  5564  001DDA  0100               	movlb	0	; () banked
  5565  001DDC  6FD6               	movwf	___ftadd@exp1& (0+255),b
  5566  001DDE  C0D0  F0D1         	movff	___ftadd@f2+2,??___ftadd
  5567  001DE2  0100               	movlb	0	; () banked
  5568  001DE4  6BD2               	clrf	(??___ftadd+1)& (0+255),b
  5569  001DE6  6BD3               	clrf	(??___ftadd+2)& (0+255),b
  5570  001DE8  0100               	movlb	0	; () banked
  5571  001DEA  35CF               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  5572  001DEC  0100               	movlb	0	; () banked
  5573  001DEE  37D1               	rlcf	??___ftadd& (0+255),f,b
  5574  001DF0  E301               	bnc	u3691
  5575  001DF2  81D2               	bsf	(??___ftadd+1)& (0+255),0,b
  5576  001DF4                     u3691:
  5577  001DF4  0100               	movlb	0	; () banked
  5578  001DF6  51D1               	movf	??___ftadd& (0+255),w,b
  5579  001DF8  0100               	movlb	0	; () banked
  5580  001DFA  6FD5               	movwf	___ftadd@exp2& (0+255),b
  5581                           
  5582                           ; BSR set to: 0
  5583  001DFC  0100               	movlb	0	; () banked
  5584  001DFE  51D6               	movf	___ftadd@exp1& (0+255),w,b
  5585  001E00  0100               	movlb	0	; () banked
  5586  001E02  B4D8               	btfsc	status,2,c
  5587  001E04  D011               	goto	l977
  5588                           
  5589                           ; BSR set to: 0
  5590  001E06  0100               	movlb	0	; () banked
  5591  001E08  51D5               	movf	___ftadd@exp2& (0+255),w,b
  5592  001E0A  0100               	movlb	0	; () banked
  5593  001E0C  5DD6               	subwf	___ftadd@exp1& (0+255),w,b
  5594  001E0E  B0D8               	btfsc	status,0,c
  5595  001E10  D012               	goto	l3715
  5596                           
  5597                           ; BSR set to: 0
  5598  001E12  0100               	movlb	0	; () banked
  5599  001E14  51D6               	movf	___ftadd@exp1& (0+255),w,b
  5600  001E16  0800               	sublw	0
  5601  001E18  0100               	movlb	0	; () banked
  5602  001E1A  25D5               	addwf	___ftadd@exp2& (0+255),w,b
  5603  001E1C  0100               	movlb	0	; () banked
  5604  001E1E  6FD1               	movwf	??___ftadd& (0+255),b
  5605  001E20  0E18               	movlw	24
  5606  001E22  0100               	movlb	0	; () banked
  5607  001E24  65D1               	cpfsgt	??___ftadd& (0+255),b
  5608  001E26  D007               	goto	l3715
  5609  001E28                     l977:
  5610                           
  5611                           ; BSR set to: 0
  5612  001E28  C0CE  F0CB         	movff	___ftadd@f2,?___ftadd
  5613  001E2C  C0CF  F0CC         	movff	___ftadd@f2+1,?___ftadd+1
  5614  001E30  C0D0  F0CD         	movff	___ftadd@f2+2,?___ftadd+2
  5615  001E34  0012               	return	
  5616  001E36                     l3715:
  5617                           
  5618                           ; BSR set to: 0
  5619  001E36  0100               	movlb	0	; () banked
  5620  001E38  51D5               	movf	___ftadd@exp2& (0+255),w,b
  5621  001E3A  0100               	movlb	0	; () banked
  5622  001E3C  B4D8               	btfsc	status,2,c
  5623  001E3E  D011               	goto	l981
  5624                           
  5625                           ; BSR set to: 0
  5626  001E40  0100               	movlb	0	; () banked
  5627  001E42  51D6               	movf	___ftadd@exp1& (0+255),w,b
  5628  001E44  0100               	movlb	0	; () banked
  5629  001E46  5DD5               	subwf	___ftadd@exp2& (0+255),w,b
  5630  001E48  B0D8               	btfsc	status,0,c
  5631  001E4A  D012               	goto	l3721
  5632                           
  5633                           ; BSR set to: 0
  5634  001E4C  0100               	movlb	0	; () banked
  5635  001E4E  51D5               	movf	___ftadd@exp2& (0+255),w,b
  5636  001E50  0800               	sublw	0
  5637  001E52  0100               	movlb	0	; () banked
  5638  001E54  25D6               	addwf	___ftadd@exp1& (0+255),w,b
  5639  001E56  0100               	movlb	0	; () banked
  5640  001E58  6FD1               	movwf	??___ftadd& (0+255),b
  5641  001E5A  0E18               	movlw	24
  5642  001E5C  0100               	movlb	0	; () banked
  5643  001E5E  65D1               	cpfsgt	??___ftadd& (0+255),b
  5644  001E60  D007               	goto	l3721
  5645  001E62                     l981:
  5646                           
  5647                           ; BSR set to: 0
  5648  001E62  C0CB  F0CB         	movff	___ftadd@f1,?___ftadd
  5649  001E66  C0CC  F0CC         	movff	___ftadd@f1+1,?___ftadd+1
  5650  001E6A  C0CD  F0CD         	movff	___ftadd@f1+2,?___ftadd+2
  5651  001E6E  0012               	return	
  5652  001E70                     l3721:
  5653                           
  5654                           ; BSR set to: 0
  5655  001E70  0E06               	movlw	6
  5656  001E72  0100               	movlb	0	; () banked
  5657  001E74  6FD4               	movwf	___ftadd@sign& (0+255),b
  5658                           
  5659                           ; BSR set to: 0
  5660  001E76  0100               	movlb	0	; () banked
  5661  001E78  AFCD               	btfss	(___ftadd@f1+2)& (0+255),7,b
  5662  001E7A  D002               	goto	l3727
  5663                           
  5664                           ; BSR set to: 0
  5665  001E7C  0100               	movlb	0	; () banked
  5666  001E7E  8FD4               	bsf	___ftadd@sign& (0+255),7,b
  5667  001E80                     l3727:
  5668                           
  5669                           ; BSR set to: 0
  5670  001E80  0100               	movlb	0	; () banked
  5671  001E82  AFD0               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5672  001E84  D002               	goto	l983
  5673                           
  5674                           ; BSR set to: 0
  5675  001E86  0100               	movlb	0	; () banked
  5676  001E88  8DD4               	bsf	___ftadd@sign& (0+255),6,b
  5677  001E8A                     l983:
  5678                           
  5679                           ; BSR set to: 0
  5680  001E8A  0100               	movlb	0	; () banked
  5681  001E8C  8FCC               	bsf	(___ftadd@f1+1)& (0+255),7,b
  5682                           
  5683                           ; BSR set to: 0
  5684  001E8E  0EFF               	movlw	255
  5685  001E90  0100               	movlb	0	; () banked
  5686  001E92  17CB               	andwf	___ftadd@f1& (0+255),f,b
  5687  001E94  0EFF               	movlw	255
  5688  001E96  0100               	movlb	0	; () banked
  5689  001E98  17CC               	andwf	(___ftadd@f1+1)& (0+255),f,b
  5690  001E9A  0E00               	movlw	0
  5691  001E9C  0100               	movlb	0	; () banked
  5692  001E9E  17CD               	andwf	(___ftadd@f1+2)& (0+255),f,b
  5693  001EA0  0100               	movlb	0	; () banked
  5694  001EA2  8FCF               	bsf	(___ftadd@f2+1)& (0+255),7,b
  5695                           
  5696                           ; BSR set to: 0
  5697  001EA4  0EFF               	movlw	255
  5698  001EA6  0100               	movlb	0	; () banked
  5699  001EA8  17CE               	andwf	___ftadd@f2& (0+255),f,b
  5700  001EAA  0EFF               	movlw	255
  5701  001EAC  0100               	movlb	0	; () banked
  5702  001EAE  17CF               	andwf	(___ftadd@f2+1)& (0+255),f,b
  5703  001EB0  0E00               	movlw	0
  5704  001EB2  0100               	movlb	0	; () banked
  5705  001EB4  17D0               	andwf	(___ftadd@f2+2)& (0+255),f,b
  5706                           
  5707                           ; BSR set to: 0
  5708  001EB6  0100               	movlb	0	; () banked
  5709  001EB8  51D5               	movf	___ftadd@exp2& (0+255),w,b
  5710  001EBA  0100               	movlb	0	; () banked
  5711  001EBC  5DD6               	subwf	___ftadd@exp1& (0+255),w,b
  5712  001EBE  B0D8               	btfsc	status,0,c
  5713  001EC0  D025               	goto	l3747
  5714  001EC2                     l3737:
  5715                           
  5716                           ; BSR set to: 0
  5717  001EC2  0100               	movlb	0	; () banked
  5718  001EC4  90D8               	bcf	status,0,c
  5719  001EC6  37CE               	rlcf	___ftadd@f2& (0+255),f,b
  5720  001EC8  37CF               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  5721  001ECA  37D0               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  5722  001ECC  0100               	movlb	0	; () banked
  5723  001ECE  07D5               	decf	___ftadd@exp2& (0+255),f,b
  5724                           
  5725                           ; BSR set to: 0
  5726  001ED0  0100               	movlb	0	; () banked
  5727  001ED2  51D6               	movf	___ftadd@exp1& (0+255),w,b
  5728  001ED4  0100               	movlb	0	; () banked
  5729  001ED6  19D5               	xorwf	___ftadd@exp2& (0+255),w,b
  5730  001ED8  B4D8               	btfsc	status,2,c
  5731  001EDA  D011               	goto	l3745
  5732                           
  5733                           ; BSR set to: 0
  5734  001EDC  0100               	movlb	0	; () banked
  5735  001EDE  07D4               	decf	___ftadd@sign& (0+255),f,b
  5736  001EE0  C0D4  F0D1         	movff	___ftadd@sign,??___ftadd
  5737  001EE4  0E07               	movlw	7
  5738  001EE6  0100               	movlb	0	; () banked
  5739  001EE8  17D1               	andwf	??___ftadd& (0+255),f,b
  5740  001EEA  B4D8               	btfsc	status,2,c
  5741  001EEC  D008               	goto	l3745
  5742  001EEE  D7E9               	goto	l3737
  5743  001EF0                     l3743:
  5744                           
  5745                           ; BSR set to: 0
  5746  001EF0  0100               	movlb	0	; () banked
  5747  001EF2  90D8               	bcf	status,0,c
  5748  001EF4  33CD               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  5749  001EF6  33CC               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  5750  001EF8  33CB               	rrcf	___ftadd@f1& (0+255),f,b
  5751  001EFA  0100               	movlb	0	; () banked
  5752  001EFC  2BD6               	incf	___ftadd@exp1& (0+255),f,b
  5753  001EFE                     l3745:
  5754                           
  5755                           ; BSR set to: 0
  5756  001EFE  0100               	movlb	0	; () banked
  5757  001F00  51D5               	movf	___ftadd@exp2& (0+255),w,b
  5758  001F02  0100               	movlb	0	; () banked
  5759  001F04  19D6               	xorwf	___ftadd@exp1& (0+255),w,b
  5760  001F06  B4D8               	btfsc	status,2,c
  5761  001F08  D02B               	goto	l992
  5762  001F0A  D7F2               	goto	l3743
  5763  001F0C                     l3747:
  5764                           
  5765                           ; BSR set to: 0
  5766  001F0C  0100               	movlb	0	; () banked
  5767  001F0E  51D6               	movf	___ftadd@exp1& (0+255),w,b
  5768  001F10  0100               	movlb	0	; () banked
  5769  001F12  5DD5               	subwf	___ftadd@exp2& (0+255),w,b
  5770  001F14  B0D8               	btfsc	status,0,c
  5771  001F16  D024               	goto	l992
  5772  001F18                     l3749:
  5773                           
  5774                           ; BSR set to: 0
  5775  001F18  0100               	movlb	0	; () banked
  5776  001F1A  90D8               	bcf	status,0,c
  5777  001F1C  37CB               	rlcf	___ftadd@f1& (0+255),f,b
  5778  001F1E  37CC               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  5779  001F20  37CD               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  5780  001F22  0100               	movlb	0	; () banked
  5781  001F24  07D6               	decf	___ftadd@exp1& (0+255),f,b
  5782                           
  5783                           ; BSR set to: 0
  5784  001F26  0100               	movlb	0	; () banked
  5785  001F28  51D6               	movf	___ftadd@exp1& (0+255),w,b
  5786  001F2A  0100               	movlb	0	; () banked
  5787  001F2C  19D5               	xorwf	___ftadd@exp2& (0+255),w,b
  5788  001F2E  B4D8               	btfsc	status,2,c
  5789  001F30  D011               	goto	l3757
  5790                           
  5791                           ; BSR set to: 0
  5792  001F32  0100               	movlb	0	; () banked
  5793  001F34  07D4               	decf	___ftadd@sign& (0+255),f,b
  5794  001F36  C0D4  F0D1         	movff	___ftadd@sign,??___ftadd
  5795  001F3A  0E07               	movlw	7
  5796  001F3C  0100               	movlb	0	; () banked
  5797  001F3E  17D1               	andwf	??___ftadd& (0+255),f,b
  5798  001F40  B4D8               	btfsc	status,2,c
  5799  001F42  D008               	goto	l3757
  5800  001F44  D7E9               	goto	l3749
  5801  001F46                     l3755:
  5802                           
  5803                           ; BSR set to: 0
  5804  001F46  0100               	movlb	0	; () banked
  5805  001F48  90D8               	bcf	status,0,c
  5806  001F4A  33D0               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  5807  001F4C  33CF               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  5808  001F4E  33CE               	rrcf	___ftadd@f2& (0+255),f,b
  5809  001F50  0100               	movlb	0	; () banked
  5810  001F52  2BD5               	incf	___ftadd@exp2& (0+255),f,b
  5811  001F54                     l3757:
  5812                           
  5813                           ; BSR set to: 0
  5814  001F54  0100               	movlb	0	; () banked
  5815  001F56  51D5               	movf	___ftadd@exp2& (0+255),w,b
  5816  001F58  0100               	movlb	0	; () banked
  5817  001F5A  19D6               	xorwf	___ftadd@exp1& (0+255),w,b
  5818  001F5C  A4D8               	btfss	status,2,c
  5819  001F5E  D7F3               	goto	l3755
  5820  001F60                     l992:
  5821                           
  5822                           ; BSR set to: 0
  5823  001F60  0100               	movlb	0	; () banked
  5824  001F62  AFD4               	btfss	___ftadd@sign& (0+255),7,b
  5825  001F64  D012               	goto	l1001
  5826                           
  5827                           ; BSR set to: 0
  5828  001F66  0EFF               	movlw	255
  5829  001F68  0100               	movlb	0	; () banked
  5830  001F6A  1BCB               	xorwf	___ftadd@f1& (0+255),f,b
  5831  001F6C  0EFF               	movlw	255
  5832  001F6E  0100               	movlb	0	; () banked
  5833  001F70  1BCC               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  5834  001F72  0EFF               	movlw	255
  5835  001F74  0100               	movlb	0	; () banked
  5836  001F76  1BCD               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  5837  001F78  0E01               	movlw	1
  5838  001F7A  0100               	movlb	0	; () banked
  5839  001F7C  27CB               	addwf	___ftadd@f1& (0+255),f,b
  5840  001F7E  0E00               	movlw	0
  5841  001F80  0100               	movlb	0	; () banked
  5842  001F82  23CC               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  5843  001F84  0E00               	movlw	0
  5844  001F86  0100               	movlb	0	; () banked
  5845  001F88  23CD               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  5846  001F8A                     l1001:
  5847                           
  5848                           ; BSR set to: 0
  5849  001F8A  0100               	movlb	0	; () banked
  5850  001F8C  ADD4               	btfss	___ftadd@sign& (0+255),6,b
  5851  001F8E  D012               	goto	l3763
  5852                           
  5853                           ; BSR set to: 0
  5854  001F90  0EFF               	movlw	255
  5855  001F92  0100               	movlb	0	; () banked
  5856  001F94  1BCE               	xorwf	___ftadd@f2& (0+255),f,b
  5857  001F96  0EFF               	movlw	255
  5858  001F98  0100               	movlb	0	; () banked
  5859  001F9A  1BCF               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5860  001F9C  0EFF               	movlw	255
  5861  001F9E  0100               	movlb	0	; () banked
  5862  001FA0  1BD0               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5863  001FA2  0E01               	movlw	1
  5864  001FA4  0100               	movlb	0	; () banked
  5865  001FA6  27CE               	addwf	___ftadd@f2& (0+255),f,b
  5866  001FA8  0E00               	movlw	0
  5867  001FAA  0100               	movlb	0	; () banked
  5868  001FAC  23CF               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5869  001FAE  0E00               	movlw	0
  5870  001FB0  0100               	movlb	0	; () banked
  5871  001FB2  23D0               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5872  001FB4                     l3763:
  5873                           
  5874                           ; BSR set to: 0
  5875  001FB4  0E00               	movlw	0
  5876  001FB6  0100               	movlb	0	; () banked
  5877  001FB8  6FD4               	movwf	___ftadd@sign& (0+255),b
  5878                           
  5879                           ; BSR set to: 0
  5880  001FBA  0100               	movlb	0	; () banked
  5881  001FBC  51CB               	movf	___ftadd@f1& (0+255),w,b
  5882  001FBE  0100               	movlb	0	; () banked
  5883  001FC0  27CE               	addwf	___ftadd@f2& (0+255),f,b
  5884  001FC2  0100               	movlb	0	; () banked
  5885  001FC4  51CC               	movf	(___ftadd@f1+1)& (0+255),w,b
  5886  001FC6  0100               	movlb	0	; () banked
  5887  001FC8  23CF               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5888  001FCA  0100               	movlb	0	; () banked
  5889  001FCC  51CD               	movf	(___ftadd@f1+2)& (0+255),w,b
  5890  001FCE  0100               	movlb	0	; () banked
  5891  001FD0  23D0               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5892                           
  5893                           ; BSR set to: 0
  5894  001FD2  0100               	movlb	0	; () banked
  5895  001FD4  AFD0               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5896  001FD6  D015               	goto	l3773
  5897                           
  5898                           ; BSR set to: 0
  5899  001FD8  0EFF               	movlw	255
  5900  001FDA  0100               	movlb	0	; () banked
  5901  001FDC  1BCE               	xorwf	___ftadd@f2& (0+255),f,b
  5902  001FDE  0EFF               	movlw	255
  5903  001FE0  0100               	movlb	0	; () banked
  5904  001FE2  1BCF               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5905  001FE4  0EFF               	movlw	255
  5906  001FE6  0100               	movlb	0	; () banked
  5907  001FE8  1BD0               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5908  001FEA  0E01               	movlw	1
  5909  001FEC  0100               	movlb	0	; () banked
  5910  001FEE  27CE               	addwf	___ftadd@f2& (0+255),f,b
  5911  001FF0  0E00               	movlw	0
  5912  001FF2  0100               	movlb	0	; () banked
  5913  001FF4  23CF               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5914  001FF6  0E00               	movlw	0
  5915  001FF8  0100               	movlb	0	; () banked
  5916  001FFA  23D0               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5917                           
  5918                           ; BSR set to: 0
  5919  001FFC  0E01               	movlw	1
  5920  001FFE  0100               	movlb	0	; () banked
  5921  002000  6FD4               	movwf	___ftadd@sign& (0+255),b
  5922  002002                     l3773:
  5923                           
  5924                           ; BSR set to: 0
  5925  002002  C0CE  F013         	movff	___ftadd@f2,___ftpack@arg
  5926  002006  C0CF  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
  5927  00200A  C0D0  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
  5928  00200E  C0D6  F016         	movff	___ftadd@exp1,___ftpack@exp
  5929  002012  C0D4  F017         	movff	___ftadd@sign,___ftpack@sign
  5930  002016  ECFA  F012         	call	___ftpack	;wreg free
  5931  00201A  C013  F0CB         	movff	?___ftpack,?___ftadd
  5932  00201E  C014  F0CC         	movff	?___ftpack+1,?___ftadd+1
  5933  002022  C015  F0CD         	movff	?___ftpack+2,?___ftadd+2
  5934  002026  0012               	return	
  5935  002028                     __end_of___ftadd:
  5936                           	opt stack 0
  5937                           tblptru	equ	0xFF8
  5938                           tblptrh	equ	0xFF7
  5939                           tblptrl	equ	0xFF6
  5940                           tablat	equ	0xFF5
  5941                           prodh	equ	0xFF4
  5942                           prodl	equ	0xFF3
  5943                           intcon	equ	0xFF2
  5944                           postinc0	equ	0xFEE
  5945                           wreg	equ	0xFE8
  5946                           postinc1	equ	0xFE6
  5947                           postdec1	equ	0xFE5
  5948                           fsr1h	equ	0xFE2
  5949                           fsr1l	equ	0xFE1
  5950                           postinc2	equ	0xFDE
  5951                           postdec2	equ	0xFDD
  5952                           fsr2h	equ	0xFDA
  5953                           fsr2l	equ	0xFD9
  5954                           status	equ	0xFD8
  5955                           
  5956 ;; *************** function ___ftpack *****************
  5957 ;; Defined at:
  5958 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  5959 ;; Parameters:    Size  Location     Type
  5960 ;;  arg             3   18[COMRAM] unsigned um
  5961 ;;  exp             1   21[COMRAM] unsigned char 
  5962 ;;  sign            1   22[COMRAM] unsigned char 
  5963 ;; Auto vars:     Size  Location     Type
  5964 ;;		None
  5965 ;; Return value:  Size  Location     Type
  5966 ;;                  3   18[COMRAM] float 
  5967 ;; Registers used:
  5968 ;;		wreg, status,2, status,0
  5969 ;; Tracked objects:
  5970 ;;		On entry : 0/0
  5971 ;;		On exit  : 0/0
  5972 ;;		Unchanged: 0/0
  5973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5974 ;;      Params:         5       0       0       0       0       0       0       0       0
  5975 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5976 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5977 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5978 ;;Total ram usage:        8 bytes
  5979 ;; Hardware stack levels used:    1
  5980 ;; Hardware stack levels required when called:    4
  5981 ;; This function calls:
  5982 ;;		Nothing
  5983 ;; This function is called by:
  5984 ;;		___awtoft
  5985 ;;		___ftadd
  5986 ;;		___ftdiv
  5987 ;;		___ftmul
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           	psect	text21
  5992  0025F4                     __ptext21:
  5993                           	opt stack 0
  5994  0025F4                     ___ftpack:
  5995                           	opt stack 23
  5996                           
  5997                           ;incstack = 0
  5998  0025F4  5016               	movf	___ftpack@exp,w,c
  5999  0025F6  B4D8               	btfsc	status,2,c
  6000  0025F8  D005               	goto	l3643
  6001  0025FA  5013               	movf	___ftpack@arg,w,c
  6002  0025FC  1014               	iorwf	___ftpack@arg+1,w,c
  6003  0025FE  1015               	iorwf	___ftpack@arg+2,w,c
  6004  002600  A4D8               	btfss	status,2,c
  6005  002602  D00C               	goto	l3649
  6006  002604                     l3643:
  6007  002604  0E00               	movlw	0
  6008  002606  6E13               	movwf	?___ftpack,c
  6009  002608  0E00               	movlw	0
  6010  00260A  6E14               	movwf	?___ftpack+1,c
  6011  00260C  0E00               	movlw	0
  6012  00260E  6E15               	movwf	?___ftpack+2,c
  6013  002610  0012               	return	
  6014  002612                     l3647:
  6015  002612  2A16               	incf	___ftpack@exp,f,c
  6016  002614  90D8               	bcf	status,0,c
  6017  002616  3215               	rrcf	___ftpack@arg+2,f,c
  6018  002618  3214               	rrcf	___ftpack@arg+1,f,c
  6019  00261A  3213               	rrcf	___ftpack@arg,f,c
  6020  00261C                     l3649:
  6021  00261C  0E00               	movlw	0
  6022  00261E  1413               	andwf	___ftpack@arg,w,c
  6023  002620  6E18               	movwf	??___ftpack& (0+255),c
  6024  002622  0E00               	movlw	0
  6025  002624  1414               	andwf	___ftpack@arg+1,w,c
  6026  002626  6E19               	movwf	(??___ftpack+1)& (0+255),c
  6027  002628  0EFE               	movlw	254
  6028  00262A  1415               	andwf	___ftpack@arg+2,w,c
  6029  00262C  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  6030  00262E  5018               	movf	??___ftpack,w,c
  6031  002630  1019               	iorwf	??___ftpack+1,w,c
  6032  002632  101A               	iorwf	??___ftpack+2,w,c
  6033  002634  B4D8               	btfsc	status,2,c
  6034  002636  D00C               	goto	l3655
  6035  002638  D7EC               	goto	l3647
  6036  00263A                     l3651:
  6037  00263A  2A16               	incf	___ftpack@exp,f,c
  6038  00263C  0E01               	movlw	1
  6039  00263E  2613               	addwf	___ftpack@arg,f,c
  6040  002640  0E00               	movlw	0
  6041  002642  2214               	addwfc	___ftpack@arg+1,f,c
  6042  002644  0E00               	movlw	0
  6043  002646  2215               	addwfc	___ftpack@arg+2,f,c
  6044  002648  90D8               	bcf	status,0,c
  6045  00264A  3215               	rrcf	___ftpack@arg+2,f,c
  6046  00264C  3214               	rrcf	___ftpack@arg+1,f,c
  6047  00264E  3213               	rrcf	___ftpack@arg,f,c
  6048  002650                     l3655:
  6049  002650  0E00               	movlw	0
  6050  002652  1413               	andwf	___ftpack@arg,w,c
  6051  002654  6E18               	movwf	??___ftpack& (0+255),c
  6052  002656  0E00               	movlw	0
  6053  002658  1414               	andwf	___ftpack@arg+1,w,c
  6054  00265A  6E19               	movwf	(??___ftpack+1)& (0+255),c
  6055  00265C  0EFF               	movlw	255
  6056  00265E  1415               	andwf	___ftpack@arg+2,w,c
  6057  002660  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  6058  002662  5018               	movf	??___ftpack,w,c
  6059  002664  1019               	iorwf	??___ftpack+1,w,c
  6060  002666  101A               	iorwf	??___ftpack+2,w,c
  6061  002668  B4D8               	btfsc	status,2,c
  6062  00266A  D006               	goto	l3659
  6063  00266C  D7E6               	goto	l3651
  6064  00266E                     l3657:
  6065  00266E  0616               	decf	___ftpack@exp,f,c
  6066  002670  90D8               	bcf	status,0,c
  6067  002672  3613               	rlcf	___ftpack@arg,f,c
  6068  002674  3614               	rlcf	___ftpack@arg+1,f,c
  6069  002676  3615               	rlcf	___ftpack@arg+2,f,c
  6070  002678                     l3659:
  6071  002678  BE14               	btfsc	___ftpack@arg+1,7,c
  6072  00267A  D003               	goto	l954
  6073  00267C  0E02               	movlw	2
  6074  00267E  6016               	cpfslt	___ftpack@exp,c
  6075  002680  D7F6               	goto	l3657
  6076  002682                     l954:
  6077  002682  A016               	btfss	___ftpack@exp,0,c
  6078  002684  9E14               	bcf	___ftpack@arg+1,7,c
  6079  002686  90D8               	bcf	status,0,c
  6080  002688  3216               	rrcf	___ftpack@exp,f,c
  6081  00268A  5016               	movf	___ftpack@exp,w,c
  6082  00268C  1215               	iorwf	___ftpack@arg+2,f,c
  6083  00268E  5017               	movf	___ftpack@sign,w,c
  6084  002690  A4D8               	btfss	status,2,c
  6085  002692  8E15               	bsf	___ftpack@arg+2,7,c
  6086  002694  C013  F013         	movff	___ftpack@arg,?___ftpack
  6087  002698  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  6088  00269C  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  6089  0026A0  0012               	return	
  6090  0026A2                     __end_of___ftpack:
  6091                           	opt stack 0
  6092                           tblptru	equ	0xFF8
  6093                           tblptrh	equ	0xFF7
  6094                           tblptrl	equ	0xFF6
  6095                           tablat	equ	0xFF5
  6096                           prodh	equ	0xFF4
  6097                           prodl	equ	0xFF3
  6098                           intcon	equ	0xFF2
  6099                           postinc0	equ	0xFEE
  6100                           wreg	equ	0xFE8
  6101                           postinc1	equ	0xFE6
  6102                           postdec1	equ	0xFE5
  6103                           fsr1h	equ	0xFE2
  6104                           fsr1l	equ	0xFE1
  6105                           postinc2	equ	0xFDE
  6106                           postdec2	equ	0xFDD
  6107                           fsr2h	equ	0xFDA
  6108                           fsr2l	equ	0xFD9
  6109                           status	equ	0xFD8
  6110                           
  6111 ;; *************** function _INTERRUPTION *****************
  6112 ;; Defined at:
  6113 ;;		line 4 in file "Interrup.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;		None
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;		None
  6118 ;; Return value:  Size  Location     Type
  6119 ;;                  1    wreg      void 
  6120 ;; Registers used:
  6121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6122 ;; Tracked objects:
  6123 ;;		On entry : 0/0
  6124 ;;		On exit  : 0/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6127 ;;      Params:         0       0       0       0       0       0       0       0       0
  6128 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6129 ;;      Temps:         14       0       0       0       0       0       0       0       0
  6130 ;;      Totals:        14       0       0       0       0       0       0       0       0
  6131 ;;Total ram usage:       14 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    3
  6134 ;; This function calls:
  6135 ;;		_INTERRUPTION_Serial
  6136 ;;		_INTERRUPTION_Timer0
  6137 ;; This function is called by:
  6138 ;;		Interrupt level 2
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142                           	psect	intcode
  6143  000808                     __pintcode:
  6144                           	opt stack 0
  6145  000808                     _INTERRUPTION:
  6146                           	opt stack 22
  6147                           
  6148                           ;incstack = 0
  6149  000808  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6150  00080A  CFFA F005          	movff	pclath,??_INTERRUPTION
  6151  00080E  CFFB F006          	movff	pclatu,??_INTERRUPTION+1
  6152  000812  ED71  F014         	call	int_func,f	;refresh shadow registers
  6153                           pclatu	equ	0xFFB
  6154                           pclath	equ	0xFFA
  6155                           tblptru	equ	0xFF8
  6156                           tblptrh	equ	0xFF7
  6157                           tblptrl	equ	0xFF6
  6158                           tablat	equ	0xFF5
  6159                           prodh	equ	0xFF4
  6160                           prodl	equ	0xFF3
  6161                           intcon	equ	0xFF2
  6162                           postinc0	equ	0xFEE
  6163                           wreg	equ	0xFE8
  6164                           postinc1	equ	0xFE6
  6165                           postdec1	equ	0xFE5
  6166                           fsr1h	equ	0xFE2
  6167                           fsr1l	equ	0xFE1
  6168                           postinc2	equ	0xFDE
  6169                           postdec2	equ	0xFDD
  6170                           fsr2h	equ	0xFDA
  6171                           fsr2l	equ	0xFD9
  6172                           status	equ	0xFD8
  6173                           
  6174                           	psect	intcode_body
  6175  0028E2                     __pintcode_body:
  6176                           	opt stack 22
  6177  0028E2                     int_func:
  6178                           	opt stack 22
  6179  0028E2  0006               	pop		; remove dummy address from shadow register refresh
  6180  0028E4  CFE9 F007          	movff	fsr0l,??_INTERRUPTION+2
  6181  0028E8  CFEA F008          	movff	fsr0h,??_INTERRUPTION+3
  6182  0028EC  CFE1 F009          	movff	fsr1l,??_INTERRUPTION+4
  6183  0028F0  CFE2 F00A          	movff	fsr1h,??_INTERRUPTION+5
  6184  0028F4  CFD9 F00B          	movff	fsr2l,??_INTERRUPTION+6
  6185  0028F8  CFDA F00C          	movff	fsr2h,??_INTERRUPTION+7
  6186  0028FC  CFF3 F00D          	movff	prodl,??_INTERRUPTION+8
  6187  002900  CFF4 F00E          	movff	prodh,??_INTERRUPTION+9
  6188  002904  CFF6 F00F          	movff	tblptrl,??_INTERRUPTION+10
  6189  002908  CFF7 F010          	movff	tblptrh,??_INTERRUPTION+11
  6190  00290C  CFF8 F011          	movff	tblptru,??_INTERRUPTION+12
  6191  002910  CFF5 F012          	movff	tablat,??_INTERRUPTION+13
  6192                           
  6193                           ;Interrup.c: 7: INTERRUPTION_Timer0();
  6194  002914  EC0C  F016         	call	_INTERRUPTION_Timer0	;wreg free
  6195                           
  6196                           ;Interrup.c: 13: INTERRUPTION_Serial();
  6197  002918  EC51  F013         	call	_INTERRUPTION_Serial	;wreg free
  6198                           
  6199                           ;Interrup.c: 16: return;
  6200  00291C  C012  FFF5         	movff	??_INTERRUPTION+13,tablat
  6201  002920  C011  FFF8         	movff	??_INTERRUPTION+12,tblptru
  6202  002924  C010  FFF7         	movff	??_INTERRUPTION+11,tblptrh
  6203  002928  C00F  FFF6         	movff	??_INTERRUPTION+10,tblptrl
  6204  00292C  C00E  FFF4         	movff	??_INTERRUPTION+9,prodh
  6205  002930  C00D  FFF3         	movff	??_INTERRUPTION+8,prodl
  6206  002934  C00C  FFDA         	movff	??_INTERRUPTION+7,fsr2h
  6207  002938  C00B  FFD9         	movff	??_INTERRUPTION+6,fsr2l
  6208  00293C  C00A  FFE2         	movff	??_INTERRUPTION+5,fsr1h
  6209  002940  C009  FFE1         	movff	??_INTERRUPTION+4,fsr1l
  6210  002944  C008  FFEA         	movff	??_INTERRUPTION+3,fsr0h
  6211  002948  C007  FFE9         	movff	??_INTERRUPTION+2,fsr0l
  6212  00294C  C006  FFFB         	movff	??_INTERRUPTION+1,pclatu
  6213  002950  C005  FFFA         	movff	??_INTERRUPTION,pclath
  6214  002954  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6215  002956  0011               	retfie		f
  6216  002958                     __end_of_INTERRUPTION:
  6217                           	opt stack 0
  6218                           pclatu	equ	0xFFB
  6219                           pclath	equ	0xFFA
  6220                           tblptru	equ	0xFF8
  6221                           tblptrh	equ	0xFF7
  6222                           tblptrl	equ	0xFF6
  6223                           tablat	equ	0xFF5
  6224                           prodh	equ	0xFF4
  6225                           prodl	equ	0xFF3
  6226                           intcon	equ	0xFF2
  6227                           postinc0	equ	0xFEE
  6228                           fsr0h	equ	0xFEA
  6229                           fsr0l	equ	0xFE9
  6230                           wreg	equ	0xFE8
  6231                           postinc1	equ	0xFE6
  6232                           postdec1	equ	0xFE5
  6233                           fsr1h	equ	0xFE2
  6234                           fsr1l	equ	0xFE1
  6235                           postinc2	equ	0xFDE
  6236                           postdec2	equ	0xFDD
  6237                           fsr2h	equ	0xFDA
  6238                           fsr2l	equ	0xFD9
  6239                           status	equ	0xFD8
  6240                           
  6241 ;; *************** function _INTERRUPTION_Timer0 *****************
  6242 ;; Defined at:
  6243 ;;		line 20 in file "Interrup.c"
  6244 ;; Parameters:    Size  Location     Type
  6245 ;;		None
  6246 ;; Auto vars:     Size  Location     Type
  6247 ;;		None
  6248 ;; Return value:  Size  Location     Type
  6249 ;;                  1    wreg      void 
  6250 ;; Registers used:
  6251 ;;		wreg, status,2, status,0, cstack
  6252 ;; Tracked objects:
  6253 ;;		On entry : 0/0
  6254 ;;		On exit  : 0/0
  6255 ;;		Unchanged: 0/0
  6256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6257 ;;      Params:         0       0       0       0       0       0       0       0       0
  6258 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6259 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6260 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6261 ;;Total ram usage:        0 bytes
  6262 ;; Hardware stack levels used:    1
  6263 ;; Hardware stack levels required when called:    1
  6264 ;; This function calls:
  6265 ;;		_PWM_Execute
  6266 ;; This function is called by:
  6267 ;;		_INTERRUPTION
  6268 ;; This function uses a non-reentrant model
  6269 ;;
  6270                           
  6271                           	psect	text23
  6272  002C18                     __ptext23:
  6273                           	opt stack 0
  6274  002C18                     _INTERRUPTION_Timer0:
  6275                           	opt stack 23
  6276                           
  6277                           ;Interrup.c: 21: if(INTCONbits.TMR0IF) {
  6278                           
  6279                           ;incstack = 0
  6280  002C18  A4F2               	btfss	intcon,2,c	;volatile
  6281  002C1A  0012               	return	
  6282                           
  6283                           ;Interrup.c: 22: INTCONbits.TMR0IF = 0;
  6284  002C1C  94F2               	bcf	intcon,2,c	;volatile
  6285                           
  6286                           ;Interrup.c: 23: PWM_Execute();
  6287  002C1E  ECAC  F014         	call	_PWM_Execute	;wreg free
  6288                           
  6289                           ;Interrup.c: 24: TMR0L = freq;
  6290  002C22  C046  FFD6         	movff	_freq,4054	;volatile
  6291  002C26  0012               	return	
  6292  002C28                     __end_of_INTERRUPTION_Timer0:
  6293                           	opt stack 0
  6294                           pclatu	equ	0xFFB
  6295                           pclath	equ	0xFFA
  6296                           tblptru	equ	0xFF8
  6297                           tblptrh	equ	0xFF7
  6298                           tblptrl	equ	0xFF6
  6299                           tablat	equ	0xFF5
  6300                           prodh	equ	0xFF4
  6301                           prodl	equ	0xFF3
  6302                           intcon	equ	0xFF2
  6303                           postinc0	equ	0xFEE
  6304                           fsr0h	equ	0xFEA
  6305                           fsr0l	equ	0xFE9
  6306                           wreg	equ	0xFE8
  6307                           postinc1	equ	0xFE6
  6308                           postdec1	equ	0xFE5
  6309                           fsr1h	equ	0xFE2
  6310                           fsr1l	equ	0xFE1
  6311                           postinc2	equ	0xFDE
  6312                           postdec2	equ	0xFDD
  6313                           fsr2h	equ	0xFDA
  6314                           fsr2l	equ	0xFD9
  6315                           status	equ	0xFD8
  6316                           
  6317 ;; *************** function _PWM_Execute *****************
  6318 ;; Defined at:
  6319 ;;		line 19 in file "PWM.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;		None
  6322 ;; Auto vars:     Size  Location     Type
  6323 ;;		None
  6324 ;; Return value:  Size  Location     Type
  6325 ;;                  1    wreg      void 
  6326 ;; Registers used:
  6327 ;;		wreg, status,2, status,0
  6328 ;; Tracked objects:
  6329 ;;		On entry : 0/0
  6330 ;;		On exit  : 0/0
  6331 ;;		Unchanged: 0/0
  6332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6333 ;;      Params:         0       0       0       0       0       0       0       0       0
  6334 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6335 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6336 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6337 ;;Total ram usage:        0 bytes
  6338 ;; Hardware stack levels used:    1
  6339 ;; This function calls:
  6340 ;;		Nothing
  6341 ;; This function is called by:
  6342 ;;		_INTERRUPTION_Timer0
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           	psect	text24
  6347  002958                     __ptext24:
  6348                           	opt stack 0
  6349  002958                     _PWM_Execute:
  6350                           	opt stack 23
  6351                           
  6352                           ;PWM.c: 21: PWM_Counter++;
  6353                           
  6354                           ;incstack = 0
  6355  002958  2A49               	incf	_PWM_Counter,f,c
  6356                           
  6357                           ;PWM.c: 22: if(PWM_Counter == _pwm[0])
  6358  00295A  5049               	movf	_PWM_Counter,w,c
  6359  00295C  183B               	xorwf	__pwm,w,c
  6360  00295E  B4D8               	btfsc	status,2,c
  6361                           
  6362                           ;PWM.c: 23: PORTB &= 0b11111011;
  6363  002960  9481               	bcf	3969,2,c	;volatile
  6364                           
  6365                           ;PWM.c: 24: if(PWM_Counter == _pwm[1])
  6366  002962  5049               	movf	_PWM_Counter,w,c
  6367  002964  183C               	xorwf	__pwm+1,w,c
  6368  002966  B4D8               	btfsc	status,2,c
  6369                           
  6370                           ;PWM.c: 25: PORTB &= 0b11110111;
  6371  002968  9681               	bcf	3969,3,c	;volatile
  6372                           
  6373                           ;PWM.c: 26: if(PWM_Counter == _pwm[2])
  6374  00296A  5049               	movf	_PWM_Counter,w,c
  6375  00296C  183D               	xorwf	__pwm+2,w,c
  6376  00296E  B4D8               	btfsc	status,2,c
  6377                           
  6378                           ;PWM.c: 27: PORTB &= 0b11101111;
  6379  002970  9881               	bcf	3969,4,c	;volatile
  6380                           
  6381                           ;PWM.c: 28: if(PWM_Counter == _pwm[3])
  6382  002972  5049               	movf	_PWM_Counter,w,c
  6383  002974  183E               	xorwf	__pwm+3,w,c
  6384  002976  B4D8               	btfsc	status,2,c
  6385                           
  6386                           ;PWM.c: 29: PORTB &= 0b11011111;
  6387  002978  9A81               	bcf	3969,5,c	;volatile
  6388                           
  6389                           ;PWM.c: 30: if(PWM_Counter == _pwm[4])
  6390  00297A  5049               	movf	_PWM_Counter,w,c
  6391  00297C  183F               	xorwf	__pwm+4,w,c
  6392  00297E  A4D8               	btfss	status,2,c
  6393  002980  D002               	goto	i2l1715
  6394                           
  6395                           ;PWM.c: 31: PORTB &= 0b10111111;
  6396  002982  9C81               	bcf	3969,6,c	;volatile
  6397  002984  D005               	goto	i2l1721
  6398  002986                     i2l1715:
  6399                           
  6400                           ;PWM.c: 32: else if(PWM_Counter == 0)
  6401  002986  5049               	movf	_PWM_Counter,w,c
  6402  002988  A4D8               	btfss	status,2,c
  6403  00298A  D002               	goto	i2l1721
  6404                           
  6405                           ;PWM.c: 33: PORTB |= 0b11111100;
  6406  00298C  0EFC               	movlw	252
  6407  00298E  1281               	iorwf	3969,f,c	;volatile
  6408  002990                     i2l1721:
  6409                           
  6410                           ;PWM.c: 36: if(_pwm[0] == 0)
  6411  002990  503B               	movf	__pwm,w,c
  6412  002992  B4D8               	btfsc	status,2,c
  6413                           
  6414                           ;PWM.c: 37: PORTB &= 0b11111011;
  6415  002994  9481               	bcf	3969,2,c	;volatile
  6416                           
  6417                           ;PWM.c: 38: if(_pwm[1] == 0)
  6418  002996  503C               	movf	__pwm+1,w,c
  6419  002998  B4D8               	btfsc	status,2,c
  6420                           
  6421                           ;PWM.c: 39: PORTB &= 0b11110111;
  6422  00299A  9681               	bcf	3969,3,c	;volatile
  6423                           
  6424                           ;PWM.c: 40: if(_pwm[2] == 0)
  6425  00299C  503D               	movf	__pwm+2,w,c
  6426  00299E  B4D8               	btfsc	status,2,c
  6427                           
  6428                           ;PWM.c: 41: PORTB &= 0b11101111;
  6429  0029A0  9881               	bcf	3969,4,c	;volatile
  6430                           
  6431                           ;PWM.c: 42: if(_pwm[3] == 0)
  6432  0029A2  503E               	movf	__pwm+3,w,c
  6433  0029A4  B4D8               	btfsc	status,2,c
  6434                           
  6435                           ;PWM.c: 43: PORTB &= 0b11011111;
  6436  0029A6  9A81               	bcf	3969,5,c	;volatile
  6437                           
  6438                           ;PWM.c: 44: if(_pwm[4] == 0)
  6439  0029A8  503F               	movf	__pwm+4,w,c
  6440  0029AA  A4D8               	btfss	status,2,c
  6441  0029AC  0012               	return	
  6442                           
  6443                           ;PWM.c: 45: PORTB &= 0b10111111;
  6444  0029AE  9C81               	bcf	3969,6,c	;volatile
  6445  0029B0  0012               	return	
  6446  0029B2                     __end_of_PWM_Execute:
  6447                           	opt stack 0
  6448                           pclatu	equ	0xFFB
  6449                           pclath	equ	0xFFA
  6450                           tblptru	equ	0xFF8
  6451                           tblptrh	equ	0xFF7
  6452                           tblptrl	equ	0xFF6
  6453                           tablat	equ	0xFF5
  6454                           prodh	equ	0xFF4
  6455                           prodl	equ	0xFF3
  6456                           intcon	equ	0xFF2
  6457                           postinc0	equ	0xFEE
  6458                           fsr0h	equ	0xFEA
  6459                           fsr0l	equ	0xFE9
  6460                           wreg	equ	0xFE8
  6461                           postinc1	equ	0xFE6
  6462                           postdec1	equ	0xFE5
  6463                           fsr1h	equ	0xFE2
  6464                           fsr1l	equ	0xFE1
  6465                           postinc2	equ	0xFDE
  6466                           postdec2	equ	0xFDD
  6467                           fsr2h	equ	0xFDA
  6468                           fsr2l	equ	0xFD9
  6469                           status	equ	0xFD8
  6470                           
  6471 ;; *************** function _INTERRUPTION_Serial *****************
  6472 ;; Defined at:
  6473 ;;		line 32 in file "Interrup.c"
  6474 ;; Parameters:    Size  Location     Type
  6475 ;;		None
  6476 ;; Auto vars:     Size  Location     Type
  6477 ;;		None
  6478 ;; Return value:  Size  Location     Type
  6479 ;;                  1    wreg      void 
  6480 ;; Registers used:
  6481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6482 ;; Tracked objects:
  6483 ;;		On entry : 0/0
  6484 ;;		On exit  : 0/0
  6485 ;;		Unchanged: 0/0
  6486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6487 ;;      Params:         0       0       0       0       0       0       0       0       0
  6488 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6489 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6490 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6491 ;;Total ram usage:        0 bytes
  6492 ;; Hardware stack levels used:    1
  6493 ;; Hardware stack levels required when called:    2
  6494 ;; This function calls:
  6495 ;;		_SerialReadUntilToken
  6496 ;;		_waitToken
  6497 ;; This function is called by:
  6498 ;;		_INTERRUPTION
  6499 ;; This function uses a non-reentrant model
  6500 ;;
  6501                           
  6502                           	psect	text25
  6503  0026A2                     __ptext25:
  6504                           	opt stack 0
  6505  0026A2                     _INTERRUPTION_Serial:
  6506                           	opt stack 22
  6507                           
  6508                           ;Interrup.c: 33: if(PIR1bits.RCIF){
  6509                           
  6510                           ;incstack = 0
  6511  0026A2  AA9E               	btfss	3998,5,c	;volatile
  6512  0026A4  0012               	return	
  6513                           
  6514                           ;Interrup.c: 35: PIR1bits.RCIF = 0;
  6515  0026A6  9A9E               	bcf	3998,5,c	;volatile
  6516                           
  6517                           ;Interrup.c: 36: if(waitToken('_'))
  6518  0026A8  0E5F               	movlw	95
  6519  0026AA  ECCF  F015         	call	_waitToken
  6520  0026AE  A0D8               	btfss	status,0,c
  6521  0026B0  0012               	return	
  6522                           
  6523                           ;Interrup.c: 37: {
  6524                           ;Interrup.c: 38: SerialReadUntilToken('_');
  6525  0026B2  0E5F               	movlw	95
  6526  0026B4  ECD9  F014         	call	_SerialReadUntilToken
  6527                           
  6528                           ;Interrup.c: 41: if(SerialReceivedString[0] == '1'){
  6529  0026B8  0E31               	movlw	49
  6530  0026BA  0101               	movlb	1	; () banked
  6531  0026BC  19C7               	xorwf	_SerialReceivedString& (0+255),w,b
  6532  0026BE  B4D8               	btfsc	status,2,c
  6533                           
  6534                           ; BSR set to: 1
  6535                           ;Interrup.c: 42: _pwm[0]+=1;
  6536  0026C0  2A3B               	incf	__pwm,f,c
  6537                           
  6538                           ; BSR set to: 1
  6539                           ;Interrup.c: 43: }
  6540                           ;Interrup.c: 44: if(SerialReceivedString[0] == '0'){
  6541                           
  6542                           ; BSR set to: 1
  6543  0026C2  0E30               	movlw	48
  6544  0026C4  0101               	movlb	1	; () banked
  6545  0026C6  19C7               	xorwf	_SerialReceivedString& (0+255),w,b
  6546  0026C8  B4D8               	btfsc	status,2,c
  6547                           
  6548                           ; BSR set to: 1
  6549                           ;Interrup.c: 45: _pwm[0]-=1;
  6550  0026CA  063B               	decf	__pwm,f,c
  6551                           
  6552                           ; BSR set to: 1
  6553                           ;Interrup.c: 46: }
  6554                           ;Interrup.c: 47: if(SerialReceivedString[0] == '3'){
  6555                           
  6556                           ; BSR set to: 1
  6557  0026CC  0E33               	movlw	51
  6558  0026CE  0101               	movlb	1	; () banked
  6559  0026D0  19C7               	xorwf	_SerialReceivedString& (0+255),w,b
  6560  0026D2  B4D8               	btfsc	status,2,c
  6561                           
  6562                           ; BSR set to: 1
  6563                           ;Interrup.c: 48: _pwm[1]+=1;
  6564  0026D4  2A3C               	incf	__pwm+1,f,c
  6565                           
  6566                           ; BSR set to: 1
  6567                           ;Interrup.c: 49: }
  6568                           ;Interrup.c: 50: if(SerialReceivedString[0] == '2'){
  6569                           
  6570                           ; BSR set to: 1
  6571  0026D6  0E32               	movlw	50
  6572  0026D8  0101               	movlb	1	; () banked
  6573  0026DA  19C7               	xorwf	_SerialReceivedString& (0+255),w,b
  6574  0026DC  B4D8               	btfsc	status,2,c
  6575                           
  6576                           ; BSR set to: 1
  6577                           ;Interrup.c: 51: _pwm[1]-=1;
  6578  0026DE  063C               	decf	__pwm+1,f,c
  6579                           
  6580                           ; BSR set to: 1
  6581                           ;Interrup.c: 52: }
  6582                           ;Interrup.c: 53: if(SerialReceivedString[0] == '5'){
  6583                           
  6584                           ; BSR set to: 1
  6585  0026E0  0E35               	movlw	53
  6586  0026E2  0101               	movlb	1	; () banked
  6587  0026E4  19C7               	xorwf	_SerialReceivedString& (0+255),w,b
  6588  0026E6  B4D8               	btfsc	status,2,c
  6589                           
  6590                           ; BSR set to: 1
  6591                           ;Interrup.c: 54: _pwm[2]+=1;
  6592  0026E8  2A3D               	incf	__pwm+2,f,c
  6593                           
  6594                           ; BSR set to: 1
  6595                           ;Interrup.c: 55: }
  6596                           ;Interrup.c: 56: if(SerialReceivedString[0] == '4'){
  6597                           
  6598                           ; BSR set to: 1
  6599  0026EA  0E34               	movlw	52
  6600  0026EC  0101               	movlb	1	; () banked
  6601  0026EE  19C7               	xorwf	_SerialReceivedString& (0+255),w,b
  6602  0026F0  B4D8               	btfsc	status,2,c
  6603                           
  6604                           ; BSR set to: 1
  6605                           ;Interrup.c: 57: _pwm[2]-=1;
  6606  0026F2  063D               	decf	__pwm+2,f,c
  6607                           
  6608                           ; BSR set to: 1
  6609                           ;Interrup.c: 58: }
  6610                           ;Interrup.c: 59: if(SerialReceivedString[0] == '7'){
  6611                           
  6612                           ; BSR set to: 1
  6613  0026F4  0E37               	movlw	55
  6614  0026F6  0101               	movlb	1	; () banked
  6615  0026F8  19C7               	xorwf	_SerialReceivedString& (0+255),w,b
  6616  0026FA  B4D8               	btfsc	status,2,c
  6617                           
  6618                           ; BSR set to: 1
  6619                           ;Interrup.c: 60: _pwm[3]+=1;
  6620  0026FC  2A3E               	incf	__pwm+3,f,c
  6621                           
  6622                           ; BSR set to: 1
  6623                           ;Interrup.c: 61: }
  6624                           ;Interrup.c: 62: if(SerialReceivedString[0] == '6'){
  6625                           
  6626                           ; BSR set to: 1
  6627  0026FE  0E36               	movlw	54
  6628  002700  0101               	movlb	1	; () banked
  6629  002702  19C7               	xorwf	_SerialReceivedString& (0+255),w,b
  6630  002704  B4D8               	btfsc	status,2,c
  6631                           
  6632                           ; BSR set to: 1
  6633                           ;Interrup.c: 63: _pwm[3]-=1;
  6634  002706  063E               	decf	__pwm+3,f,c
  6635                           
  6636                           ; BSR set to: 1
  6637                           ;Interrup.c: 64: }
  6638                           ;Interrup.c: 65: if(SerialReceivedString[0] == 't'){
  6639                           
  6640                           ; BSR set to: 1
  6641  002708  0E74               	movlw	116
  6642  00270A  0101               	movlb	1	; () banked
  6643  00270C  19C7               	xorwf	_SerialReceivedString& (0+255),w,b
  6644  00270E  A4D8               	btfss	status,2,c
  6645  002710  D004               	goto	i2l3015
  6646                           
  6647                           ; BSR set to: 1
  6648                           ;Interrup.c: 66: _pwm[0]=255;
  6649  002712  683B               	setf	__pwm,c
  6650                           
  6651                           ;Interrup.c: 67: _pwm[1]=255;
  6652  002714  683C               	setf	__pwm+1,c
  6653                           
  6654                           ;Interrup.c: 68: _pwm[2]=255;
  6655  002716  683D               	setf	__pwm+2,c
  6656                           
  6657                           ;Interrup.c: 69: _pwm[3]=255;
  6658  002718  683E               	setf	__pwm+3,c
  6659  00271A                     i2l3015:
  6660                           
  6661                           ; BSR set to: 1
  6662                           ;Interrup.c: 70: }
  6663                           ;Interrup.c: 71: if(SerialReceivedString[0] == 'g'){
  6664  00271A  0E67               	movlw	103
  6665  00271C  0101               	movlb	1	; () banked
  6666  00271E  19C7               	xorwf	_SerialReceivedString& (0+255),w,b
  6667  002720  A4D8               	btfss	status,2,c
  6668  002722  D008               	goto	i2l3019
  6669                           
  6670                           ; BSR set to: 1
  6671                           ;Interrup.c: 72: _pwm[0]=127;
  6672  002724  0E7F               	movlw	127
  6673  002726  6E3B               	movwf	__pwm,c
  6674                           
  6675                           ;Interrup.c: 73: _pwm[1]=127;
  6676  002728  0E7F               	movlw	127
  6677  00272A  6E3C               	movwf	__pwm+1,c
  6678                           
  6679                           ;Interrup.c: 74: _pwm[2]=127;
  6680  00272C  0E7F               	movlw	127
  6681  00272E  6E3D               	movwf	__pwm+2,c
  6682                           
  6683                           ;Interrup.c: 75: _pwm[3]=127;
  6684  002730  0E7F               	movlw	127
  6685  002732  6E3E               	movwf	__pwm+3,c
  6686  002734                     i2l3019:
  6687                           
  6688                           ; BSR set to: 1
  6689                           ;Interrup.c: 76: }
  6690                           ;Interrup.c: 77: if(SerialReceivedString[0] == 'b'){
  6691  002734  0E62               	movlw	98
  6692  002736  0101               	movlb	1	; () banked
  6693  002738  19C7               	xorwf	_SerialReceivedString& (0+255),w,b
  6694  00273A  A4D8               	btfss	status,2,c
  6695  00273C  0012               	return	
  6696                           
  6697                           ; BSR set to: 1
  6698                           ;Interrup.c: 78: _pwm[0]=1;
  6699  00273E  0E01               	movlw	1
  6700  002740  6E3B               	movwf	__pwm,c
  6701                           
  6702                           ;Interrup.c: 79: _pwm[1]=1;
  6703  002742  0E01               	movlw	1
  6704  002744  6E3C               	movwf	__pwm+1,c
  6705                           
  6706                           ;Interrup.c: 80: _pwm[2]=1;
  6707  002746  0E01               	movlw	1
  6708  002748  6E3D               	movwf	__pwm+2,c
  6709                           
  6710                           ;Interrup.c: 81: _pwm[3]=1;
  6711  00274A  0E01               	movlw	1
  6712  00274C  6E3E               	movwf	__pwm+3,c
  6713                           
  6714                           ; BSR set to: 1
  6715                           
  6716                           ; BSR set to: 1
  6717                           
  6718                           ; BSR set to: 1
  6719  00274E  0012               	return	
  6720  002750                     __end_of_INTERRUPTION_Serial:
  6721                           	opt stack 0
  6722                           pclatu	equ	0xFFB
  6723                           pclath	equ	0xFFA
  6724                           tblptru	equ	0xFF8
  6725                           tblptrh	equ	0xFF7
  6726                           tblptrl	equ	0xFF6
  6727                           tablat	equ	0xFF5
  6728                           prodh	equ	0xFF4
  6729                           prodl	equ	0xFF3
  6730                           intcon	equ	0xFF2
  6731                           postinc0	equ	0xFEE
  6732                           fsr0h	equ	0xFEA
  6733                           fsr0l	equ	0xFE9
  6734                           wreg	equ	0xFE8
  6735                           postinc1	equ	0xFE6
  6736                           postdec1	equ	0xFE5
  6737                           fsr1h	equ	0xFE2
  6738                           fsr1l	equ	0xFE1
  6739                           postinc2	equ	0xFDE
  6740                           postdec2	equ	0xFDD
  6741                           fsr2h	equ	0xFDA
  6742                           fsr2l	equ	0xFD9
  6743                           status	equ	0xFD8
  6744                           
  6745 ;; *************** function _waitToken *****************
  6746 ;; Defined at:
  6747 ;;		line 115 in file "Serial.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;  value           1    wreg     unsigned char 
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;  value           1    0[COMRAM] unsigned char 
  6752 ;; Return value:  Size  Location     Type
  6753 ;;		None               void
  6754 ;; Registers used:
  6755 ;;		wreg, status,2, status,0, cstack
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6761 ;;      Params:         0       0       0       0       0       0       0       0       0
  6762 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6763 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6764 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6765 ;;Total ram usage:        1 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; Hardware stack levels required when called:    1
  6768 ;; This function calls:
  6769 ;;		_SerialRead
  6770 ;; This function is called by:
  6771 ;;		_INTERRUPTION_Serial
  6772 ;;		_WifiTCPRead
  6773 ;; This function uses a non-reentrant model
  6774 ;;
  6775                           
  6776                           	psect	text26
  6777  002B9E                     __ptext26:
  6778                           	opt stack 0
  6779  002B9E                     _waitToken:
  6780                           	opt stack 22
  6781                           
  6782                           ;incstack = 0
  6783                           ;waitToken@value stored from wreg
  6784  002B9E  6E01               	movwf	waitToken@value,c
  6785                           
  6786                           ;Serial.c: 117: if(!RCIF)
  6787  002BA0  BA9E               	btfsc	3998,5,c	;volatile
  6788  002BA2  D002               	goto	i2l2841
  6789                           
  6790                           ;Serial.c: 118: return 0;
  6791  002BA4  90D8               	bcf	status,0,c
  6792  002BA6  0012               	return	
  6793  002BA8                     i2l2841:
  6794                           
  6795                           ;Serial.c: 120: if((SerialRead() == value)){
  6796  002BA8  ECF8  F015         	call	_SerialRead	;wreg free
  6797  002BAC  1801               	xorwf	waitToken@value,w,c
  6798  002BAE  A4D8               	btfss	status,2,c
  6799  002BB0  D004               	goto	i2l2851
  6800                           
  6801                           ;Serial.c: 121: RCREG = value+1;
  6802  002BB2  2801               	incf	waitToken@value,w,c
  6803  002BB4  6EAE               	movwf	4014,c	;volatile
  6804                           
  6805                           ;Serial.c: 122: return 1;
  6806  002BB6  80D8               	bsf	status,0,c
  6807                           
  6808                           ;Serial.c: 123: }
  6809  002BB8  0012               	return	
  6810  002BBA                     i2l2851:
  6811                           
  6812                           ;Serial.c: 124: else
  6813                           ;Serial.c: 125: return 0;
  6814  002BBA  90D8               	bcf	status,0,c
  6815  002BBC  0012               	return	
  6816  002BBE                     __end_of_waitToken:
  6817                           	opt stack 0
  6818                           pclatu	equ	0xFFB
  6819                           pclath	equ	0xFFA
  6820                           tblptru	equ	0xFF8
  6821                           tblptrh	equ	0xFF7
  6822                           tblptrl	equ	0xFF6
  6823                           tablat	equ	0xFF5
  6824                           prodh	equ	0xFF4
  6825                           prodl	equ	0xFF3
  6826                           intcon	equ	0xFF2
  6827                           postinc0	equ	0xFEE
  6828                           fsr0h	equ	0xFEA
  6829                           fsr0l	equ	0xFE9
  6830                           wreg	equ	0xFE8
  6831                           postinc1	equ	0xFE6
  6832                           postdec1	equ	0xFE5
  6833                           fsr1h	equ	0xFE2
  6834                           fsr1l	equ	0xFE1
  6835                           postinc2	equ	0xFDE
  6836                           postdec2	equ	0xFDD
  6837                           fsr2h	equ	0xFDA
  6838                           fsr2l	equ	0xFD9
  6839                           status	equ	0xFD8
  6840                           
  6841 ;; *************** function _SerialReadUntilToken *****************
  6842 ;; Defined at:
  6843 ;;		line 136 in file "Serial.c"
  6844 ;; Parameters:    Size  Location     Type
  6845 ;;  charToCompar    1    wreg     const unsigned char 
  6846 ;; Auto vars:     Size  Location     Type
  6847 ;;  charToCompar    1    1[COMRAM] const unsigned char 
  6848 ;;  i               2    2[COMRAM] unsigned int 
  6849 ;; Return value:  Size  Location     Type
  6850 ;;                  1    wreg      void 
  6851 ;; Registers used:
  6852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6853 ;; Tracked objects:
  6854 ;;		On entry : 0/0
  6855 ;;		On exit  : 0/0
  6856 ;;		Unchanged: 0/0
  6857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6858 ;;      Params:         0       0       0       0       0       0       0       0       0
  6859 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6860 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6861 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6862 ;;Total ram usage:        4 bytes
  6863 ;; Hardware stack levels used:    1
  6864 ;; Hardware stack levels required when called:    1
  6865 ;; This function calls:
  6866 ;;		_SerialRead
  6867 ;; This function is called by:
  6868 ;;		_INTERRUPTION_Serial
  6869 ;;		_WifiTCPRead
  6870 ;; This function uses a non-reentrant model
  6871 ;;
  6872                           
  6873                           	psect	text27
  6874  0029B2                     __ptext27:
  6875                           	opt stack 0
  6876  0029B2                     _SerialReadUntilToken:
  6877                           	opt stack 22
  6878                           
  6879                           ;incstack = 0
  6880                           ;SerialReadUntilToken@charToCompare stored from wreg
  6881  0029B2  6E02               	movwf	SerialReadUntilToken@charToCompare,c
  6882                           
  6883                           ;Serial.c: 138: unsigned i = 0;
  6884  0029B4  0E00               	movlw	0
  6885  0029B6  6E04               	movwf	SerialReadUntilToken@i+1,c
  6886  0029B8  0E00               	movlw	0
  6887  0029BA  6E03               	movwf	SerialReadUntilToken@i,c
  6888  0029BC                     i2l2857:
  6889                           
  6890                           ;Serial.c: 140: {
  6891                           ;Serial.c: 141: SerialReceivedString[i] = SerialRead();
  6892  0029BC  0EC7               	movlw	low _SerialReceivedString
  6893  0029BE  2403               	addwf	SerialReadUntilToken@i,w,c
  6894  0029C0  6ED9               	movwf	fsr2l,c
  6895  0029C2  0E01               	movlw	high _SerialReceivedString
  6896  0029C4  2004               	addwfc	SerialReadUntilToken@i+1,w,c
  6897  0029C6  6EDA               	movwf	fsr2h,c
  6898  0029C8  ECF8  F015         	call	_SerialRead	;wreg free
  6899  0029CC  6EDF               	movwf	indf2,c
  6900                           
  6901                           ;Serial.c: 142: if( charToCompare == SerialReceivedString[i])
  6902  0029CE  0EC7               	movlw	low _SerialReceivedString
  6903  0029D0  2403               	addwf	SerialReadUntilToken@i,w,c
  6904  0029D2  6ED9               	movwf	fsr2l,c
  6905  0029D4  0E01               	movlw	high _SerialReceivedString
  6906  0029D6  2004               	addwfc	SerialReadUntilToken@i+1,w,c
  6907  0029D8  6EDA               	movwf	fsr2h,c
  6908  0029DA  5002               	movf	SerialReadUntilToken@charToCompare,w,c
  6909  0029DC  18DE               	xorwf	postinc2,w,c
  6910  0029DE  A4D8               	btfss	status,2,c
  6911  0029E0  D009               	goto	i2l2863
  6912                           
  6913                           ;Serial.c: 143: {
  6914                           ;Serial.c: 144: SerialReceivedString[i] = '\0';
  6915  0029E2  0EC7               	movlw	low _SerialReceivedString
  6916  0029E4  2403               	addwf	SerialReadUntilToken@i,w,c
  6917  0029E6  6ED9               	movwf	fsr2l,c
  6918  0029E8  0E01               	movlw	high _SerialReceivedString
  6919  0029EA  2004               	addwfc	SerialReadUntilToken@i+1,w,c
  6920  0029EC  6EDA               	movwf	fsr2h,c
  6921  0029EE  0E00               	movlw	0
  6922  0029F0  6EDF               	movwf	indf2,c
  6923                           
  6924                           ;Serial.c: 145: break;
  6925  0029F2  D003               	goto	i2l426
  6926  0029F4                     i2l2863:
  6927                           
  6928                           ;Serial.c: 146: }
  6929                           ;Serial.c: 147: ++i;
  6930  0029F4  4A03               	infsnz	SerialReadUntilToken@i,f,c
  6931  0029F6  2A04               	incf	SerialReadUntilToken@i+1,f,c
  6932  0029F8  D7E1               	goto	i2l2857
  6933  0029FA                     i2l426:
  6934                           
  6935                           ;Serial.c: 148: }
  6936                           ;Serial.c: 149: SerialLen = i;
  6937  0029FA  C003  F042         	movff	SerialReadUntilToken@i,_SerialLen
  6938  0029FE  C004  F043         	movff	SerialReadUntilToken@i+1,_SerialLen+1
  6939                           
  6940                           ;Serial.c: 150: return;
  6941  002A02  0012               	return		;funcret
  6942  002A04                     __end_of_SerialReadUntilToken:
  6943                           	opt stack 0
  6944                           pclatu	equ	0xFFB
  6945                           pclath	equ	0xFFA
  6946                           tblptru	equ	0xFF8
  6947                           tblptrh	equ	0xFF7
  6948                           tblptrl	equ	0xFF6
  6949                           tablat	equ	0xFF5
  6950                           prodh	equ	0xFF4
  6951                           prodl	equ	0xFF3
  6952                           intcon	equ	0xFF2
  6953                           postinc0	equ	0xFEE
  6954                           fsr0h	equ	0xFEA
  6955                           fsr0l	equ	0xFE9
  6956                           wreg	equ	0xFE8
  6957                           postinc1	equ	0xFE6
  6958                           postdec1	equ	0xFE5
  6959                           fsr1h	equ	0xFE2
  6960                           fsr1l	equ	0xFE1
  6961                           indf2	equ	0xFDF
  6962                           postinc2	equ	0xFDE
  6963                           postdec2	equ	0xFDD
  6964                           fsr2h	equ	0xFDA
  6965                           fsr2l	equ	0xFD9
  6966                           status	equ	0xFD8
  6967                           
  6968 ;; *************** function _SerialRead *****************
  6969 ;; Defined at:
  6970 ;;		line 75 in file "Serial.c"
  6971 ;; Parameters:    Size  Location     Type
  6972 ;;		None
  6973 ;; Auto vars:     Size  Location     Type
  6974 ;;		None
  6975 ;; Return value:  Size  Location     Type
  6976 ;;                  1    wreg      unsigned char 
  6977 ;; Registers used:
  6978 ;;		wreg, status,2
  6979 ;; Tracked objects:
  6980 ;;		On entry : 0/0
  6981 ;;		On exit  : 0/0
  6982 ;;		Unchanged: 0/0
  6983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6984 ;;      Params:         0       0       0       0       0       0       0       0       0
  6985 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6986 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6987 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6988 ;;Total ram usage:        0 bytes
  6989 ;; Hardware stack levels used:    1
  6990 ;; This function calls:
  6991 ;;		Nothing
  6992 ;; This function is called by:
  6993 ;;		_waitToken
  6994 ;;		_SerialReadUntilToken
  6995 ;;		_SerialReadString
  6996 ;;		_SerialReceiveNChar
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           	psect	text28
  7001  002BF0                     __ptext28:
  7002                           	opt stack 0
  7003  002BF0                     _SerialRead:
  7004                           	opt stack 22
  7005                           
  7006                           ;Serial.c: 77: if(OERR)
  7007                           
  7008                           ;incstack = 0
  7009  002BF0  A2AB               	btfss	4011,1,c	;volatile
  7010  002BF2  D002               	goto	i2l393
  7011                           
  7012                           ;Serial.c: 78: {
  7013                           ;Serial.c: 79: CREN = 0;
  7014  002BF4  98AB               	bcf	4011,4,c	;volatile
  7015                           
  7016                           ;Serial.c: 80: CREN = 1;
  7017  002BF6  88AB               	bsf	4011,4,c	;volatile
  7018  002BF8                     i2l393:
  7019  002BF8  AA9E               	btfss	3998,5,c	;volatile
  7020  002BFA  D7FE               	goto	i2l393
  7021                           
  7022                           ;Serial.c: 83: SerialReceivedData = RCREG;
  7023  002BFC  CFAE F04A          	movff	4014,_SerialReceivedData	;volatile
  7024                           
  7025                           ;Serial.c: 84: RCIF = 0;
  7026  002C00  9A9E               	bcf	3998,5,c	;volatile
  7027                           
  7028                           ;Serial.c: 85: return RCREG;
  7029  002C02  50AE               	movf	4014,w,c	;volatile
  7030  002C04  0012               	return	
  7031  002C06                     __end_of_SerialRead:
  7032                           	opt stack 0
  7033                           pclatu	equ	0xFFB
  7034                           pclath	equ	0xFFA
  7035                           tblptru	equ	0xFF8
  7036                           tblptrh	equ	0xFF7
  7037                           tblptrl	equ	0xFF6
  7038                           tablat	equ	0xFF5
  7039                           prodh	equ	0xFF4
  7040                           prodl	equ	0xFF3
  7041                           intcon	equ	0xFF2
  7042                           postinc0	equ	0xFEE
  7043                           fsr0h	equ	0xFEA
  7044                           fsr0l	equ	0xFE9
  7045                           wreg	equ	0xFE8
  7046                           postinc1	equ	0xFE6
  7047                           postdec1	equ	0xFE5
  7048                           fsr1h	equ	0xFE2
  7049                           fsr1l	equ	0xFE1
  7050                           indf2	equ	0xFDF
  7051                           postinc2	equ	0xFDE
  7052                           postdec2	equ	0xFDD
  7053                           fsr2h	equ	0xFDA
  7054                           fsr2l	equ	0xFD9
  7055                           status	equ	0xFD8
  7056                           pclatu	equ	0xFFB
  7057                           pclath	equ	0xFFA
  7058                           tblptru	equ	0xFF8
  7059                           tblptrh	equ	0xFF7
  7060                           tblptrl	equ	0xFF6
  7061                           tablat	equ	0xFF5
  7062                           prodh	equ	0xFF4
  7063                           prodl	equ	0xFF3
  7064                           intcon	equ	0xFF2
  7065                           postinc0	equ	0xFEE
  7066                           fsr0h	equ	0xFEA
  7067                           fsr0l	equ	0xFE9
  7068                           wreg	equ	0xFE8
  7069                           postinc1	equ	0xFE6
  7070                           postdec1	equ	0xFE5
  7071                           fsr1h	equ	0xFE2
  7072                           fsr1l	equ	0xFE1
  7073                           indf2	equ	0xFDF
  7074                           postinc2	equ	0xFDE
  7075                           postdec2	equ	0xFDD
  7076                           fsr2h	equ	0xFDA
  7077                           fsr2l	equ	0xFD9
  7078                           status	equ	0xFD8
  7079                           
  7080                           	psect	rparam
  7081  0000                     pclatu	equ	0xFFB
  7082                           pclath	equ	0xFFA
  7083                           tblptru	equ	0xFF8
  7084                           tblptrh	equ	0xFF7
  7085                           tblptrl	equ	0xFF6
  7086                           tablat	equ	0xFF5
  7087                           prodh	equ	0xFF4
  7088                           prodl	equ	0xFF3
  7089                           intcon	equ	0xFF2
  7090                           postinc0	equ	0xFEE
  7091                           fsr0h	equ	0xFEA
  7092                           fsr0l	equ	0xFE9
  7093                           wreg	equ	0xFE8
  7094                           postinc1	equ	0xFE6
  7095                           postdec1	equ	0xFE5
  7096                           fsr1h	equ	0xFE2
  7097                           fsr1l	equ	0xFE1
  7098                           indf2	equ	0xFDF
  7099                           postinc2	equ	0xFDE
  7100                           postdec2	equ	0xFDD
  7101                           fsr2h	equ	0xFDA
  7102                           fsr2l	equ	0xFD9
  7103                           status	equ	0xFD8
  7104                           
  7105                           	psect	temp
  7106  00004D                     btemp:
  7107                           	opt stack 0
  7108  00004D                     	ds	1
  7109  0000                     int$flags	set	btemp
  7110                           pclatu	equ	0xFFB
  7111                           pclath	equ	0xFFA
  7112                           tblptru	equ	0xFF8
  7113                           tblptrh	equ	0xFF7
  7114                           tblptrl	equ	0xFF6
  7115                           tablat	equ	0xFF5
  7116                           prodh	equ	0xFF4
  7117                           prodl	equ	0xFF3
  7118                           intcon	equ	0xFF2
  7119                           postinc0	equ	0xFEE
  7120                           fsr0h	equ	0xFEA
  7121                           fsr0l	equ	0xFE9
  7122                           wreg	equ	0xFE8
  7123                           postinc1	equ	0xFE6
  7124                           postdec1	equ	0xFE5
  7125                           fsr1h	equ	0xFE2
  7126                           fsr1l	equ	0xFE1
  7127                           indf2	equ	0xFDF
  7128                           postinc2	equ	0xFDE
  7129                           postdec2	equ	0xFDD
  7130                           fsr2h	equ	0xFDA
  7131                           fsr2l	equ	0xFD9
  7132                           status	equ	0xFD8


Data Sizes:
    Strings     125
    Constant    0
    Data        21
    BSS         402
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     58      76
    BANK0           160     34     141
    BANK1           256      0     249
    BANK2           256     26      76
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sp__strchr	PTR unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), SerialReceivedString(BANK1[50]), 

    sp__ADC_Read	PTR unsigned int  size(2) Largest target is 20
		 -> ADC(BANK0[20]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), SerialReceivedString(BANK1[50]), 


Critical Paths under _main in COMRAM

    _main->___ftdiv
    _readGIRO->_WriteI2C
    _readACC->_WriteI2C
    ___awtoft->___awdiv
    ___awdiv->_readACC
    ___awdiv->_readGIRO
    _initI2C->_WriteI2C
    _WriteI2C->_IdleI2C
    _PID_outputControlCalc->___ftdiv
    ___ftneg->___ftdiv
    ___ftmul->___awtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftdiv

Critical Paths under _INTERRUPTION in COMRAM

    _INTERRUPTION_Serial->_SerialReadUntilToken

Critical Paths under _main in BANK0

    _main->_PID_outputControlCalc
    _sensorInit->_readAccelGiroValues
    _readAccelGiroValues->___ftadd
    _PID_outputControlCalc->___ftadd
    ___ftneg->___ftdiv
    ___ftadd->___ftneg

Critical Paths under _INTERRUPTION in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPTION in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPTION in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPTION in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPTION in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPTION in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPTION in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPTION in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0   99153
                                             33 BANK0      1     1      0
                                              0 BANK2     26    26      0
              _PID_outputControlCalc
                           _PWM_Init
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                            _delayMS
                            _initI2C
                           _initUART
                _readAccelGiroValues
                         _sensorInit
 ---------------------------------------------------------------------------------
 (1) _sensorInit                                           1     1      0   24048
                                             27 BANK0      1     1      0
                _readAccelGiroValues
 ---------------------------------------------------------------------------------
 (2) _readAccelGiroValues                                 21    21      0   23980
                                             21 BANK0      6     6      0
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            _readACC
                           _readGIRO
 ---------------------------------------------------------------------------------
 (3) _readGIRO                                             2     2      0      96
                                             20 COMRAM     2     2      0
                            _IdleI2C
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (3) _readACC                                              2     2      0      96
                                             20 COMRAM     2     2      0
                            _IdleI2C
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (4) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3059
                                             30 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
                            _readACC (ARG)
                           _readGIRO (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1523
                                             22 COMRAM     8     4      4
                            _readACC (ARG)
                           _readGIRO (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initI2C                                              2     1      1     170
                                             20 COMRAM     2     1      1
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (4) _WriteI2C                                             1     1      0      31
                                             19 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (5) _IdleI2C                                              1     1      0       0
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delayMS                                              5     3      2     145
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     679
                                             18 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (1) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PID_outputControlCalc                               12     5      7   25500
                                             21 BANK0     12     5      7
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    1451
                                              6 BANK0      3     0      3
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6762
                                             34 COMRAM    15     9      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            _readACC (ARG)
                           _readGIRO (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     506
                                             18 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    5000
                                             49 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    9769
                                              9 BANK0     12     6      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            _readACC (ARG)
                           _readGIRO (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2464
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPTION                                        14    14      0     156
                                              4 COMRAM    14    14      0
                _INTERRUPTION_Serial
                _INTERRUPTION_Timer0
 ---------------------------------------------------------------------------------
 (7) _INTERRUPTION_Timer0                                  0     0      0       0
                        _PWM_Execute
 ---------------------------------------------------------------------------------
 (8) _PWM_Execute                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _INTERRUPTION_Serial                                  0     0      0     156
               _SerialReadUntilToken
                          _waitToken
 ---------------------------------------------------------------------------------
 (8) _waitToken                                            1     1      0      44
                                              0 COMRAM     1     1      0
                         _SerialRead
 ---------------------------------------------------------------------------------
 (8) _SerialReadUntilToken                                 4     4      0     112
                                              0 COMRAM     4     4      0
                         _SerialRead
 ---------------------------------------------------------------------------------
 (9) _SerialRead                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PID_outputControlCalc
     ___ftadd
       ___awdiv (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___awtoft (ARG)
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftdiv (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___awtoft (ARG)
             ___awdiv (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___ftpack (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___awtoft (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___awtoft (ARG)
               ___awdiv (ARG)
                 _readACC (ARG)
                   _IdleI2C
                   _ReadI2C
                   _WriteI2C
                     _IdleI2C
                 _readGIRO (ARG)
                   _IdleI2C
                   _ReadI2C
                   _WriteI2C
                     _IdleI2C
               ___ftpack (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___ftpack (ARG)
             ___ftpack (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___awtoft (ARG)
             ___awdiv (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___ftpack (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
       ___ftpack (ARG)
       _readACC (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _readGIRO (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___awtoft (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___awtoft (ARG)
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftpack (ARG)
       ___ftpack (ARG)
       _readACC (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _readGIRO (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     ___ftneg
       ___ftdiv (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___awtoft (ARG)
             ___awdiv (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___ftpack (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___awtoft (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
   _PWM_Init
   ___ftadd
     ___awdiv (ARG)
       _readACC (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _readGIRO (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     ___awtoft (ARG)
       ___awdiv (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftpack (ARG)
       _readACC (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _readGIRO (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     ___ftdiv (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___awtoft (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___awtoft (ARG)
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftpack (ARG)
       ___ftpack (ARG)
       _readACC (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _readGIRO (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     ___ftneg (ARG)
       ___ftdiv (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___awtoft (ARG)
             ___awdiv (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___ftpack (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___awtoft (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
     ___ftpack (ARG)
     _readACC (ARG)
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
     _readGIRO (ARG)
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
   ___ftdiv
     ___ftmul (ARG)
       ___awdiv (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___awtoft (ARG)
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftpack (ARG)
       ___ftpack (ARG)
       _readACC (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _readGIRO (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awdiv (ARG)
       _readACC (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _readGIRO (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     ___awtoft (ARG)
       ___awdiv (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftpack (ARG)
       _readACC (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _readGIRO (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     ___ftpack (ARG)
     ___ftpack (ARG)
     _readACC (ARG)
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
     _readGIRO (ARG)
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
   ___ftneg
     ___ftdiv (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___awtoft (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___awtoft (ARG)
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftpack (ARG)
       ___ftpack (ARG)
       _readACC (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _readGIRO (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
   ___fttol
   _delayMS
   _initI2C
     _IdleI2C
     _WriteI2C
       _IdleI2C
   _initUART
   _readAccelGiroValues
     ___awdiv
       _readACC (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _readGIRO (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     ___awtoft
       ___awdiv (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftpack (ARG)
       _readACC (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _readGIRO (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     ___ftadd
       ___awdiv (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___awtoft (ARG)
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftdiv (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___awtoft (ARG)
             ___awdiv (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___ftpack (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___awtoft (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___awtoft (ARG)
               ___awdiv (ARG)
                 _readACC (ARG)
                   _IdleI2C
                   _ReadI2C
                   _WriteI2C
                     _IdleI2C
                 _readGIRO (ARG)
                   _IdleI2C
                   _ReadI2C
                   _WriteI2C
                     _IdleI2C
               ___ftpack (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___ftpack (ARG)
             ___ftpack (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___awtoft (ARG)
             ___awdiv (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___ftpack (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
       ___ftpack (ARG)
       _readACC (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _readGIRO (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     ___ftmul
       ___awdiv (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___awtoft (ARG)
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftpack (ARG)
       ___ftpack (ARG)
       _readACC (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _readGIRO (ARG)
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     ___ftneg
       ___ftdiv (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___awtoft (ARG)
             ___awdiv (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___ftpack (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___awtoft (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
     _readACC
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
     _readGIRO
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
   _sensorInit
     _readAccelGiroValues
       ___awdiv
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___awtoft
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftadd
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___awtoft (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___awtoft (ARG)
               ___awdiv (ARG)
                 _readACC (ARG)
                   _IdleI2C
                   _ReadI2C
                   _WriteI2C
                     _IdleI2C
                 _readGIRO (ARG)
                   _IdleI2C
                   _ReadI2C
                   _WriteI2C
                     _IdleI2C
               ___ftpack (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___ftpack (ARG)
             ___ftpack (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___awtoft (ARG)
             ___awdiv (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___ftpack (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 _readACC (ARG)
                   _IdleI2C
                   _ReadI2C
                   _WriteI2C
                     _IdleI2C
                 _readGIRO (ARG)
                   _IdleI2C
                   _ReadI2C
                   _WriteI2C
                     _IdleI2C
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   _readACC (ARG)
                     _IdleI2C
                     _ReadI2C
                     _WriteI2C
                       _IdleI2C
                   _readGIRO (ARG)
                     _IdleI2C
                     _ReadI2C
                     _WriteI2C
                       _IdleI2C
                 ___ftpack (ARG)
                 _readACC (ARG)
                   _IdleI2C
                   _ReadI2C
                   _WriteI2C
                     _IdleI2C
                 _readGIRO (ARG)
                   _IdleI2C
                   _ReadI2C
                   _WriteI2C
                     _IdleI2C
               ___ftpack (ARG)
               ___ftpack (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___awtoft (ARG)
               ___awdiv (ARG)
                 _readACC (ARG)
                   _IdleI2C
                   _ReadI2C
                   _WriteI2C
                     _IdleI2C
                 _readGIRO (ARG)
                   _IdleI2C
                   _ReadI2C
                   _WriteI2C
                     _IdleI2C
               ___ftpack (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___ftpack (ARG)
             ___ftpack (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftmul
         ___awdiv (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___awtoft (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         ___ftpack (ARG)
         ___ftpack (ARG)
         _readACC (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _readGIRO (ARG)
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       ___ftneg
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___awtoft (ARG)
               ___awdiv (ARG)
                 _readACC (ARG)
                   _IdleI2C
                   _ReadI2C
                   _WriteI2C
                     _IdleI2C
                 _readGIRO (ARG)
                   _IdleI2C
                   _ReadI2C
                   _WriteI2C
                     _IdleI2C
               ___ftpack (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___ftpack (ARG)
             ___ftpack (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___awtoft (ARG)
             ___awdiv (ARG)
               _readACC (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
               _readGIRO (ARG)
                 _IdleI2C
                 _ReadI2C
                 _WriteI2C
                   _IdleI2C
             ___ftpack (ARG)
             _readACC (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
             _readGIRO (ARG)
               _IdleI2C
               _ReadI2C
               _WriteI2C
                 _IdleI2C
           ___ftpack (ARG)
           ___ftpack (ARG)
           _readACC (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _readGIRO (ARG)
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
       _readACC
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _readGIRO
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C

 _INTERRUPTION (ROOT)
   _INTERRUPTION_Serial
     _SerialReadUntilToken
       _SerialRead
     _waitToken
       _SerialRead
   _INTERRUPTION_Timer0
     _PWM_Execute

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     1A      4C       9       29.7%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F9       7       97.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     22      8D       5       88.1%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     3A      4C       1       80.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     21E      20        0.0%
DATA                 0      0     21E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Feb 03 15:54:09 2017

                                _A 0194                                  _h 00EA  
                      _SSPSTATbits 000FC7                                 l51 256A  
                               l60 2598                                 l45 2540  
                               l54 258C                                 l63 25BA  
                               l72 25E8                                 l48 2564  
                               l57 2592                                 l81 2A98  
                               l66 25C0                                 l90 2AD0  
                               l75 25EE                                 l84 2AB2  
                               l69 25C6                                 l87 2ACA  
                               l96 2A54                                 l99 2A6E  
                     ___awdiv@sign 001C        __end_of_INTERRUPTION_Serial 2750  
      __end_of_INTERRUPTION_Timer0 2C28                       ___ftadd@exp1 00D6  
                     ___ftadd@exp2 00D5                       ___ftadd@sign 00D4  
                              l102 2A86                                l112 21F2  
                              l105 2A8C                                _ADC 00AE  
                              l602 0A9A                                l363 2B90  
                              l716 2A24                                l725 2A44  
                              l663 1AB8                                l691 2BD0  
                              l692 2BD2                                l954 2682  
                              l981 1E62                                l983 1E8A  
                              l992 1F60                                l977 1E28  
                      _PWM_Counter 0049                                _RX9 007D5E  
                              _TX9 007D66                        _PWM_Execute 2958  
                              _pid 0100                                _vel 009F  
                              _pos 0096              ??_readAccelGiroValues 00D7  
                              prod 000FF3                                wreg 000FE8  
                     __CFG_LVP$OFF 000000                       ___ftdiv@cntr 00C2  
                     ___ftdiv@sign 00C7                       __CFG_WDT$OFF 000000  
                             l1001 1F8A                               l1012 230C  
                             l1034 2B64                               l4101 23E2  
                             l4111 240C                               l4115 2422  
                             l4107 23FA                               l4061 1CC2  
                             l4109 2406                               l4063 1CE4  
                             l4215 0CC6                               l4225 0DDE  
                             l4235 0EF6                               l4069 1D9C  
                             l4245 0FFE                               l4079 236C  
                             l3721 1E70                               l4097 23D2  
                             l4185 0A90                               l3651 263A  
                             l3643 2604                               l3715 1E36  
                             l3803 24B6                               l3619 2A30  
                             l4195 0ABC                               l3813 24DE  
                             l3655 2650                               l3647 2612  
                             l3743 1EF0                               l3727 1E80  
                             l3807 24C6                               l3657 266E  
                             l3649 261C                               l3745 1EFE  
                             l3737 1EC2                               l3817 24EE  
                             l3833 27F4                               l3659 2678  
                             l3763 1FB4                               l3755 1F46  
                             l3747 1F0C                               l3595 2C06  
                             l3773 2002                               l3757 1F54  
                             l3749 1F18                               l3941 27B0  
                             l3845 281A                               l3861 284C  
                             l3919 22E2                               l3783 245C  
                             l3847 2822                               l3839 2804  
                             l3937 2780                               l3865 285A  
                             l3857 2842                               l3849 2826  
                             l3947 27DC                               l3893 2268  
                             l3789 2484                               l3877 2AEC  
                             l3983 21DE                               l3899 2294  
                             l3995 2B7C                               l3987 21E8  
                             STR_1 088C                               STR_2 0856  
                             STR_3 081B                               STR_4 0864  
                             STR_5 0840                               STR_6 0872  
                             STR_7 0880                               STR_8 0895  
                             _BRGH 007D62                               _CREN 007D5C  
                             _FERR 007D5A                               _CSRC 007D67  
                             _LATB 000F8A                               u4031 224C  
                             u4051 2278                               u4310 238A  
                             u4315 2382                               u4291 2350  
                             u4507 1098                               u4517 10AA  
                             u4437 101A                               u3911 246C  
                             u4527 10BC                               u4447 102C  
                             u3681 1DD6                               u4537 10CE  
                             u4457 103E                               u3691 1DF4  
                             u4547 10E0                               u4467 1050  
                             _RCIE 007CED                               _RCIF 007CF5  
                             u4557 2B82                               u4477 1062  
                             u4487 1074                               u4497 1086  
                             u3891 2444                               _OERR 007D59  
                             _RX9D 007D58                               _SPEN 007D5F  
                             _TX9D 007D60                               _SREN 007D5D  
                             _TRMT 007D61                               _TXIE 007CEC  
                             _TXIF 007CF4                               _TXEN 007D65  
                             _SYNC 007D64                       __CFG_PWRT$ON 000000  
                             __pwm 003B                               _main 089A  
                             _giro 007B                               _freq 0046  
                     ___ftpack@arg 0013                       ___ftpack@exp 0016  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _step 004B  
                             btemp 004D                               pclat 000FFA  
                      main@pwmTemp 0249                               prodh 000FF4  
                             prodl 000FF3                               start 0816  
                  __end_of_IdleI2C 2C18             ??_SerialReadUntilToken 0001  
                    __CFG_MCLRE$ON 000000                       ___ftmul@cntr 0030  
                     ___param_bank 000010                       ___ftmul@sign 0031  
                  __end_of_ReadI2C 2BDA     __size_of_PID_outputControlCalc 0546  
    __end_of_PID_outputControlCalc 1DC0                       ___fttol@exp1 0021  
                     ___fttol@lval 001D                      __CFG_PLLDIV$5 000000  
                            _ADDEN 007D5B                              ?_main 0001  
                  __end_of___awdiv 2864                    __end_of___ftadd 2028  
                  __end_of___ftdiv 2340                    __end_of___ftneg 2B72  
                  __end_of___ftmul 2528                              _T0CON 000FD5  
                  ___awdiv@divisor 0019                    __end_of___fttol 2434  
                            i2l426 29FA                              i2l393 2BF8  
                  ___awdiv@counter 001B                              _RCREG 000FAE  
                            _SENDB 007D63                              _TMR0L 000FD6  
                            _SPBRG 000FAF                              _PORTB 000F81  
                    __CFG_USBDIV$2 000000                              _TRISA 000F92  
                            _TRISB 000F93                              _TXREG 000FAD  
                  __end_of_delayMS 2B9E                       _ADC_NChannel 0040  
                            _accel 0060                    __end_of_initI2C 25F4  
                  __end_of_readACC 2AD8                      ___awtoft@sign 0022  
                    ?_INTERRUPTION 0001                      ___ftpack@sign 0017  
                            main@i 0248                              main@j 0232  
                            main@l 0239                     __pbitbssCOMRAM 0260  
                 __end_of_PWM_Init 2BF0                              tablat 000FF5  
             _SerialReceivedString 01C7                              status 000FD8  
                  __initialization 2864                       __end_of_main 10EC  
                           ??_main 00E3                      ___fttol@sign1 001C  
                    __activetblptr 000002                     ??_INTERRUPTION 0005  
                           _ADCON0 000FC2                             _ADCON1 000FC1  
                           _ADCON2 000FC0                             _ADRESH 000FC4  
                           _ADRESL 000FC3                   ___awdiv@dividend 0017  
                 __end_of_WriteI2C 2A50                   __end_of___awtoft 2B10  
                 __end_of___ftpack 26A2                             i2l3015 271A  
                           i2l3019 2734                             i2l1721 2990  
                           i2l1715 2986                             i2l2841 2BA8  
                           i2l2851 2BBA                             i2l2863 29F4  
                           i2l2857 29BC                             _INTCON 000FF2  
                        ??_IdleI2C 0013                             _SPBRGH 000FB0  
                           _SSPADD 000FC8                             _SSPBUF 000FC9  
                        ??_ReadI2C 0013                     _WifiTCPDataLen 0044  
                       _SerialRead 2BF0                             ___ftge 2750  
                        ??___awdiv 001B                          ??___ftadd 00D1  
                        ??___ftdiv 0038                          ??___ftneg 003B  
                 __end_of_readGIRO 2A94                   __end_of_initUART 2B42  
                        ??___ftmul 0029                          ??___fttol 0017  
                           _filtro 00E7                             clear_0 28AA  
                           clear_1 28B6                             clear_2 28C2  
                        ??_delayMS 0015                   ___awdiv@quotient 001D  
                           main@u1 023F                             main@u2 0233  
                           main@u3 0236                             main@u4 0242  
                        ??_initI2C 0016              ___ftmul@f3_as_product 002D  
                        ??_readACC 0015                       __pdataCOMRAM 003B  
                     __mediumconst 0000                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
                       __accesstop 0060            __end_of__initialization 28D4  
                  __CFG_PBADEN$OFF 000000                         ___ftadd@f1 00CB  
                       ___ftadd@f2 00CE                         ___ftge@ff1 0013  
                       ___ftge@ff2 0016                      ___rparam_used 000001  
                       ___ftdiv@f1 0032                         ___ftdiv@f2 0035  
                       ___ftdiv@f3 00C3                         ___ftneg@f1 00C8  
                       ___awtoft@c 001F                         ___ftmul@f1 0023  
                       ___ftmul@f2 0026                         ___fttol@f1 0013  
                   __pcstackCOMRAM 0001                       __pidataBANK0 2C34  
                        ?_PWM_Init 0001                       ?_PWM_Execute 0001  
                       __pbssBANK0 0060                         __pbssBANK1 0100  
                       __pbssBANK2 0200                        ?_SerialRead 0001  
                          ?___ftge 0013               __end_of_INTERRUPTION 2958  
PID_outputControlCalc@systemOutput 00DA        __end_of_readAccelGiroValues 187A  
                        ?_WriteI2C 0001                          ?___awtoft 001F  
                        ?___ftpack 0013                         ??_PWM_Init 0013  
               __size_of_waitToken 0020       __size_of_INTERRUPTION_Serial 00AE  
     __size_of_INTERRUPTION_Timer0 0010                            _SSPCON1 000FC6  
                          _SSPCON2 000FC5                            _SSPSTAT 000FC7  
                        ?_readGIRO 0001                          ?_initUART 0001  
                          _IdleI2C 2C06                      readACC@Adress 0015  
                          _ReadI2C 2BBE                            __Hparam 0000  
                          __Lparam 0000                        _WifiTCPData 01B8  
    __size_of_SerialReadUntilToken 0052                    __size_of___ftge 0090  
                          ___awdiv 27E0                            ___ftadd 1DC0  
                          ___ftdiv 223C                            ___ftneg 2B42  
                          ___ftmul 2434                            ___fttol 2340  
                     __psmallconst 081A                            __pcinit 2864  
                       ??_WriteI2C 0014                            _delayMS 2B72  
                       ??___awtoft 0022              _PID_outputControlCalc 187A  
                       ??___ftpack 0018                            __ramtop 0800  
                          __ptext0 089A                            __ptext1 2028  
                          __ptext2 10EC                            __ptext3 2A50  
                          __ptext4 2A94                            __ptext5 2BBE  
                          __ptext6 2AD8                            __ptext7 27E0  
                          __ptext8 2B10                            __ptext9 2528  
                          _initI2C 2528                            _readACC 2A94  
              __size_of_SerialRead 0016                     __pintcode_body 28E2  
             end_of_initialization 28D4                         ??_readGIRO 0015  
                       ??_initUART 0013                      __Lmediumconst 0000  
       _PID_outputControlCalc$1984 00E0                            int_func 28E2  
                __end_of_waitToken 2BBE     PID_outputControlCalc@reference 00D7  
                 _SerialSendString 0200                        sensorInit@i 00DD  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc1 000FE6  
                          postinc2 000FDE                         _sensorInit 2028  
                        _TRISCbits 000F94               __size_of_PWM_Execute 005A  
                      ___ftdiv@exp 00C6                         main@lambda 023C  
            __size_of_INTERRUPTION 2150                        ___ftmul@exp 002C  
           ?_PID_outputControlCalc 00D7                     __end_of___ftge 27E0  
                    __pidataCOMRAM 2C28                    delayMS@waitTime 0013  
                      _ADC_Channel 0047                  __size_of_PWM_Init 0016  
              start_initialization 2864               _PID_interruptCounter 00A8  
                 WriteI2C@data_out 0014                       _INTERRUPTION 0808  
                     ??_SerialRead 0001                          _SerialLen 0042  
              _INTERRUPTION_Serial 26A2                _INTERRUPTION_Timer0 2C18  
                         ??___ftge 0019                        ?_sensorInit 0001  
                      __pdataBANK0 00E4                  __size_of_WriteI2C 004C  
                __size_of___awtoft 0038                  __size_of___ftpack 00AE  
                   initI2C@Adress1 0016                     initI2C@Adress2 0015  
                      __pbssCOMRAM 0047              SerialReadUntilToken@i 0003  
             ?_INTERRUPTION_Serial 0001                      __pcstackBANK0 00C2  
                    __pcstackBANK2 0232               ?_INTERRUPTION_Timer0 0001  
                        _accelBias 0069                 __end_of_SerialRead 2C06  
                        _accelTemp 0072                     waitToken@value 0001  
                         ?_IdleI2C 0001                           ?_ReadI2C 0001  
                __size_of_readGIRO 0044                  __size_of_initUART 0032  
                        _main$1983 0245                          __pintcode 0808  
                         ?___awdiv 0017                           ?___ftadd 00CB  
                         ?___ftdiv 0032                           ?___ftneg 00C8  
                         ?___ftmul 0023                           ?___fttol 0013  
                         ?_delayMS 0013                           ?_initI2C 0015  
                         ?_readACC 0001                        __smallconst 081A  
            ??_INTERRUPTION_Serial 0005              ??_INTERRUPTION_Timer0 0001  
     __size_of_readAccelGiroValues 078E       __end_of_SerialReadUntilToken 2A04  
              __size_of_sensorInit 0214                           _PIE1bits 000F9D  
                         _PIR1bits 000F9E                          _waitToken 2B9E  
                       _ADCON0bits 000FC2                           _PWM_Init 2BDA  
                        copy_data0 2878                          copy_data1 2898  
               _SerialReceivedData 004A                          readGIRO@c 0016  
                 __size_of_IdleI2C 0012                   __size_of_ReadI2C 001C  
                         __Hrparam 0000            ??_PID_outputControlCalc 00DE  
                         __Lrparam 0000                         ?_waitToken 0001  
         _readAccelGiroValues$1982 00DA                   __size_of___awdiv 0084  
                 __size_of___ftadd 0268                   __size_of___ftdiv 0104  
                 __size_of___ftneg 0030                   __size_of___ftmul 00F4  
                 __size_of___fttol 00F4                           _WriteI2C 2A04  
                         ___awtoft 2AD8                           ___ftpack 25F4  
                 WifiTCPSend@F4101 00E4                   __size_of_delayMS 002C  
                    ??_PWM_Execute 0001                   __size_of_initI2C 00CC  
                 __size_of_readACC 0044                           _flagData 0260  
                         _flagLink 0261                           __ptext10 2A04  
                         __ptext11 2C06                           __ptext20 1DC0  
                         __ptext12 2B72                           __ptext21 25F4  
                         __ptext13 2340                           __ptext14 2BDA  
                         __ptext23 2C18                           __ptext15 187A  
                         __ptext24 2958                           __ptext16 2B42  
                         __ptext25 26A2                           __ptext17 2434  
                         __ptext26 2B9E                           __ptext18 2750  
                         __ptext27 29B2                           __ptext19 223C  
                         __ptext28 2BF0  SerialReadUntilToken@charToCompare 0002  
                         _giroBias 0084                           _contador 00AC  
                         _giroTemp 008D                           _readGIRO 2A50  
                         _initUART 2B10                      __size_of_main 0852  
                         delayMS@j 0016               _SerialReadUntilToken 29B2  
                         int$flags 004D                       ??_sensorInit 003B  
            __CFG_CPUDIV$OSC1_PLL2 000000                           readACC@c 0016  
                       _INTCONbits 000FF2                __end_of_PWM_Execute 29B2  
                         intlevel2 0000                 __end_of_sensorInit 223C  
              _readAccelGiroValues 10EC                        ??_waitToken 0001  
            ?_SerialReadUntilToken 0001      PID_outputControlCalc@whichPID 00DD  
             ?_readAccelGiroValues 0001                        _SSPCON1bits 000FC6  
                      _SSPCON2bits 000FC5                 __CFG_FOSC$HSPLL_HS 000000  
                   readGIRO@Adress 0015  
